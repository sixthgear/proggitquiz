{"pk": 1, "model": "pq.language", "fields": {"name": "Actionscript", "extension": "as"}},
{"pk": 2, "model": "pq.language", "fields": {"name": "Ada", "extension": "ada"}},
{"pk": 3, "model": "pq.language", "fields": {"name": "Assembly", "extension": "asm"}},
{"pk": 4, "model": "pq.language", "fields": {"name": "C", "extension": "c"}},
{"pk": 6, "model": "pq.language", "fields": {"name": "C#", "extension": "cs"}},
{"pk": 5, "model": "pq.language", "fields": {"name": "C++", "extension": "cpp"}},
{"pk": 7, "model": "pq.language", "fields": {"name": "Clojure", "extension": "clj"}},
{"pk": 8, "model": "pq.language", "fields": {"name": "Cobol", "extension": "cbl"}},
{"pk": 9, "model": "pq.language", "fields": {"name": "ColdFusion", "extension": "cfm"}},
{"pk": 10, "model": "pq.language", "fields": {"name": "D", "extension": "d"}},
{"pk": 11, "model": "pq.language", "fields": {"name": "Delphi", "extension": "dpr"}},
{"pk": 12, "model": "pq.language", "fields": {"name": "Erlang", "extension": "erl"}},
{"pk": 13, "model": "pq.language", "fields": {"name": "Forth", "extension": "4th"}},
{"pk": 14, "model": "pq.language", "fields": {"name": "Fortran", "extension": "f"}},
{"pk": 15, "model": "pq.language", "fields": {"name": "Haskell", "extension": "hs"}},
{"pk": 16, "model": "pq.language", "fields": {"name": "Java", "extension": "j"}},
{"pk": 17, "model": "pq.language", "fields": {"name": "Javascript", "extension": "js"}},
{"pk": 19, "model": "pq.language", "fields": {"name": "Lua", "extension": "lua"}},
{"pk": 21, "model": "pq.language", "fields": {"name": "OCaml", "extension": "ml"}},
{"pk": 20, "model": "pq.language", "fields": {"name": "Objective C", "extension": "m"}},
{"pk": 25, "model": "pq.language", "fields": {"name": "PHP", "extension": "php"}},
{"pk": 22, "model": "pq.language", "fields": {"name": "Pascal", "extension": "pas"}},
{"pk": 24, "model": "pq.language", "fields": {"name": "Perl", "extension": "pl"}},
{"pk": 23, "model": "pq.language", "fields": {"name": "Python", "extension": "py"}},
{"pk": 26, "model": "pq.language", "fields": {"name": "Rexx", "extension": "exc"}},
{"pk": 27, "model": "pq.language", "fields": {"name": "Ruby", "extension": "rb"}},
{"pk": 28, "model": "pq.language", "fields": {"name": "Scala", "extension": "sca"}},
{"pk": 29, "model": "pq.language", "fields": {"name": "Scheme", "extension": "smd"}},
{"pk": 30, "model": "pq.language", "fields": {"name": "Shell", "extension": "sh"}},
{"pk": 31, "model": "pq.language", "fields": {"name": "Smalltalk", "extension": "sm"}},
{"pk": 32, "model": "pq.language", "fields": {"name": "Tcl", "extension": "tcl"}},
{"pk": 33, "model": "pq.language", "fields": {"name": "Vala", "extension": "vala"}},
{"pk": 34, "model": "pq.language", "fields": {"name": "Visual Basic", "extension": "vb"}},

{"pk": 1, "model": "pq.set", "fields": {"points": 50, "title": "Basic"}},
{"pk": 2, "model": "pq.set", "fields": {"points": 100, "title": "Advanced"}},
{"pk": 3, "model": "pq.set", "fields": {"points": 25, "title": "Bonus"}},

{
 	"pk": 2, 
	"model": "pq.problem", 
	"fields": {
		"title": "Hold'em Ranking Challenge", 
		"author": 1, 
		"status": 2,		
		"created": "2012-06-13", 
		"started": "2012-06-15T16:00:00", 
		"completed": "2012-06-23T00:00:00",
		"preamble": "In this challenge we're going to see how well you can analyze a hand of cards and determine its relative ranking. This is a beta-challenge to test the new features of proggitquiz.", 
		"body": "![Cards](/media/poker.jpg)\r\n\r\n### Problem Description\r\n\r\nTexas Hold 'em has in recent years grown to be one of the most popular games played around the world. In addition to its place in casinos, 
		you can find Hold 'Em televised on major sports networks and played by many thousands of players on gaming websites. \r\n\r\nThe goal of your program in this challenge is to determine the winning hand (or hands) given a set of five community cards and a number of player hands, 
		according to the rules of [Texas Hold 'Em](http://en.wikipedia.org/wiki/Texas_hold_'em#The_showdown).\r\n\r\n<div class=\"well\">\r\n<p>On the showdown, 
		each player plays the best poker hand they can make from the seven cards comprising his two hole cards and the five community cards. A player may use both of his own two hole cards, 
		only one, 
		or none at all, 
		to form his final five-card hand. If the five community cards form the player's best hand, 
		then the player is said to be playing the board and can only hope to split the pot, 
		because each other player can also use the same five cards to construct the same hand.</p></div>\r\n\r\n**Other resources**\r\n\r\n - [Texas Hold 'Em rules](http://en.wikipedia.org/wiki/Texas_hold_'em#Rules).\r\n - [List of poker hands and ranking](http://en.wikipedia.org/wiki/List_of_poker_hands)\r\n\r\n### Input\r\n\r\n- The first line of the input file contains integer **T**, 
		the number of test cases to follow.\r\n- The first line of each test case contains integer **n**, 
		the number of player hands in this case.\r\n- The second line of each test case contains the sequence: **a<sub>1</sub>b<sub>1</sub> a<sub>2</sub>b<sub>2</sub> a<sub>3</sub>b<sub>3</sub> a<sub>4</sub>b<sub>4</sub> a<sub>5</sub>b<sub>5</sub>**\r\n    - where **a<sub>1..5</sub>** are card values from the set *[2,3,4,5,6,7,8,9,T,J,Q,K,A]*\r\n    - where **b<sub>1..5</sub>**  are suit values from the set *[h,d,s,c]* \r\n    - this string represents a sequence of five community cards that comprise the BOARD.\r\n- the following **n** lines of each test case contain the sequence: **a<sub>1</sub>b<sub>1</sub> a<sub>2</sub>b<sub>2</sub>**\r\n    - where **a<sub>1..2</sub>** are card values from the set *[2,3,4,5,6,7,8,9,T,J,Q,K,A]* (same as above)\r\n    - where **b<sub>1..2</sub>**  are suit values from the set *[h,d,s,c]* (same as above)\r\n    - this string represents a sequence of two cards that comprise each player's hand.\r\n\r\n<pre>\r\n<b>Annotated Example:</b>\r\n\r\n1                   <i># one test case to follow</i>\r\n3                   <i># three player hands in this test case</i>\r\nAh 3d Jc Ts 6d      <i># community cards: A\u2661 3\u2662 J\u2663 10\u2660 6\u2662</i>\r\n9s 7d               <i># player 1 holds 9\u2660 7\u2662</i>\r\nKc 2s               <i># player 2 holds K\u2663 2\u2660</i>\r\nQc Jh               <i># player 3 holds Q\u2663 J\u2661</i>\r\n</pre>\r\n\r\n### Output\r\n\r\nYour program should output <b>T</b> lines, 
		one for each test case. On each line the winning player from that hand will be indicated by a <b>zero-based</b> index of the winner by the position in the original input. In the above example, 
		since the third player won, 
		the output for that line would be <code>2</code>. If more than one player is tied for the win, 
		output all winning player on the same line separated by a space. The order that you output each player should be sorted. For example: <code>0 3 4</code> and not <code>4 0 3</code>.\r\n\r\n### Sample\r\n\r\n<table width=\"100%\">\r\n<tr>\r\n<th>Input</th><th>Output</th>\r\n</tr>\r\n<tr>\r\n<td>\r\n<pre>\r\n3\r\n4\r\n4h 2s 4s 7d 8d\r\nTc 4d\r\nAs 3h\r\n<b>Qd 4c</b>\r\n9h Qc\r\n3\r\nKd 9s 4d Jd 2h\r\n<b>Jh Js</b>\r\nAs 5c\r\n7d 4s\r\n4\r\n9s 7s Jd 7d Qs\r\nQh 9c\r\n<b>5h 7h</b>\r\n5s 9h\r\n<b>4h 7c</b>\r\n</pre>\r\n</td>\r\n<td valign=\"top\">\r\n<pre>\r\n2\r\n0\r\n1 3\r\n</pre>\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n### Bonus Set\r\n\r\nAs a bonus challenge, 
		see if you can do the same thing as above, 
		but for [Omaha rules](http://en.wikipedia.org/wiki/Omaha_hold_%27em). Instead of two cards for each player, 
		there will be <b>four</b>. A winning hand MUST be made up of exactly two player cards and exactly three community cards (unlike Texas Hold 'em, 
		which may use any combination of community cards and player cards). Like above, 
		each line of output must specify a winning hand (or hands).\r\n\r\n### Limits\r\n\r\n**Basic Set**\r\n\r\n- 80 &le; **T** &le; 100\r\n- 5 &le; **n** &le; 9\r\n\r\n**Advanced Set**\r\n\r\n- 2000 &le; **T** &le; 2400\r\n- 19 &le; **n** &le; 23\r\n\r\n**Bonus Set (Omaha rules)**\r\n\r\n- 49 &le; **T** &le; 51\r\n- 9 &le; **n** &le; 9", 
		"generator": "generators/holdembetachallenge-gen.py", 		
		"validator": "validators/holdembetachallenge-val.py"	
	}
}, 

{"pk": 1, "model": "pq.bonus", "fields": {"icon": "icon-bookmark", "points": 15, "description": "Complete advanced set within one minute of downloading file.", "title": "Runtime Bonus"}},
{"pk": 2, "model": "pq.bonus", "fields": {"icon": "icon-bookmark", "points": 10, "description": "Complete advanced set within 12 hours of challenge start.", "title": "Earlybird Bonus"}}]