[{"pk": 6, "model": "contenttypes.contenttype", "fields": {"model": "comment", "name": "comment", "app_label": "comments"}}, {"pk": 7, "model": "contenttypes.contenttype", "fields": {"model": "commentflag", "name": "comment flag", "app_label": "comments"}}, {"pk": 8, "model": "contenttypes.contenttype", "fields": {"model": "contenttype", "name": "content type", "app_label": "contenttypes"}}, {"pk": 2, "model": "contenttypes.contenttype", "fields": {"model": "group", "name": "group", "app_label": "auth"}}, {"pk": 14, "model": "contenttypes.contenttype", "fields": {"model": "language", "name": "language", "app_label": "challenges"}}, {"pk": 5, "model": "contenttypes.contenttype", "fields": {"model": "logentry", "name": "log entry", "app_label": "admin"}}, {"pk": 4, "model": "contenttypes.contenttype", "fields": {"model": "message", "name": "message", "app_label": "auth"}}, {"pk": 11, "model": "contenttypes.contenttype", "fields": {"model": "migrationhistory", "name": "migration history", "app_label": "south"}}, {"pk": 1, "model": "contenttypes.contenttype", "fields": {"model": "permission", "name": "permission", "app_label": "auth"}}, {"pk": 13, "model": "contenttypes.contenttype", "fields": {"model": "problem", "name": "problem", "app_label": "challenges"}}, {"pk": 12, "model": "contenttypes.contenttype", "fields": {"model": "registrationprofile", "name": "registration profile", "app_label": "registration"}}, {"pk": 9, "model": "contenttypes.contenttype", "fields": {"model": "session", "name": "session", "app_label": "sessions"}}, {"pk": 10, "model": "contenttypes.contenttype", "fields": {"model": "site", "name": "site", "app_label": "sites"}}, {"pk": 15, "model": "contenttypes.contenttype", "fields": {"model": "solution", "name": "solution", "app_label": "challenges"}}, {"pk": 3, "model": "contenttypes.contenttype", "fields": {"model": "user", "name": "user", "app_label": "auth"}}, {"pk": "78259a56ffc9b681943fc109e51e6a3d", "model": "sessions.session", "fields": {"expire_date": "2010-06-23 20:30:35", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "e2232624eb09cb76843e47b675bcc262", "model": "sessions.session", "fields": {"expire_date": "2010-07-05 07:45:15", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "557a2e1c6617add4a1e4022affb39a91", "model": "sessions.session", "fields": {"expire_date": "2010-07-06 11:07:42", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "3da8705de6c265aa9dc31c863015684d", "model": "sessions.session", "fields": {"expire_date": "2010-07-09 05:12:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "af656775b89449d0f916cd09fc9baa85", "model": "sessions.session", "fields": {"expire_date": "2010-07-11 02:11:55", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a982ed26891db7176958a5a1fb7e166d", "model": "sessions.session", "fields": {"expire_date": "2010-07-12 07:42:07", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3aef2febd096a140613385e5a55ab0a7", "model": "sessions.session", "fields": {"expire_date": "2010-06-22 21:35:12", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "d39910f506db3998760d2024e3514d71", "model": "sessions.session", "fields": {"expire_date": "2010-06-23 21:41:17", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "5a2e24b60205e947959b14733b15daba", "model": "sessions.session", "fields": {"expire_date": "2010-07-12 09:02:27", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwd1LmY4NmViNGRhODBjNWUxYmFlZjc3\nNjlhYTZjOWZiMzEx\n"}}, {"pk": "e04118edb6a77017485f5c48e367bb8b", "model": "sessions.session", "fields": {"expire_date": "2010-07-14 17:30:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1cf6ddc105c7e670d4b118401e3f27d9", "model": "sessions.session", "fields": {"expire_date": "2010-07-16 11:26:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4fc9213413346fbdda0c9896b05f358a", "model": "sessions.session", "fields": {"expire_date": "2010-07-18 07:42:03", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "468d5f533711e63f21bce58e13d9cd14", "model": "sessions.session", "fields": {"expire_date": "2010-07-20 06:09:10", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "16b2210caecb84029c0e318c102edd8a", "model": "sessions.session", "fields": {"expire_date": "2010-07-20 10:35:46", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5b8e907867fcfbaaeeb1a4fa32cb62bd", "model": "sessions.session", "fields": {"expire_date": "2010-06-24 23:42:07", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "6a557d9eafcc4f599f4abddbb29274b2", "model": "sessions.session", "fields": {"expire_date": "2010-06-25 04:24:36", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwV1LmMzYjcyZDdlYjc1ZTNiMDA4NmI2\nZTJhODU5ZGVhMGMy\n"}}, {"pk": "3f8f36788888fc6f162c406c7b6c2843", "model": "sessions.session", "fields": {"expire_date": "2010-06-25 13:59:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9f10bd3d8ff4d6ed4819431df983ac96", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 13:30:24", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwh1LjBiZTVlYTJhMmVhYWFiNjMxNjU4\nOTY3NDRjZjA1NmRk\n"}}, {"pk": "b34fcef124dc0c436c550fa225347eec", "model": "sessions.session", "fields": {"expire_date": "2010-06-28 21:39:12", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "631deecdd5896b4bce8feccc5769ba81", "model": "sessions.session", "fields": {"expire_date": "2010-07-01 17:59:48", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwZ1LjA0NjU0MGM0OGRjZDNlZjQ2ZDFh\nYzFhMGE5NGFiYjQw\n"}}, {"pk": "625a5666583fbcb4fb19f6a2b0c20287", "model": "sessions.session", "fields": {"expire_date": "2010-07-05 06:22:23", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "fcc1a693706bc7e546dfa65f4467d782", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 14:36:25", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "22a34fded7bd200f836c29309cb0bca4", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 19:56:54", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "0784cba2a66e8355dc253427d30d5c29", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 20:42:30", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1e9884d11908c2640a065fd707ddac0a", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 21:08:27", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwl1LjYzNGFiYjAxMzQ3MzU5NzIzYzY1\nMDRiOGNiNDFkY2Vi\n"}}, {"pk": "4172d8e844d25fce3f433ba00cff81b8", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 22:02:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5fb4fa900686f85e3c64da9565bde721", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 01:14:13", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSwp1LmFhN2Y0NjJlNDhlZjRjMzk2MzM3NzkxZGIzOGU0ODY3\n"}}, {"pk": "4c3d9fc112b6ce14803f367507d7c2b1", "model": "sessions.session", "fields": {"expire_date": "2010-07-23 22:28:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0a51769280aee91c755dc71a2a6827af", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 08:37:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5300fc57098795ae3eb75cb9f147d042", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 14:15:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d01f5540fde0f3e281e6e599d0a7098a", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 14:43:33", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d606b64186c11a362978b4060d8cf401", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 14:52:46", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1a99e4621a8ecbfcd4ae2e71b9d13c67", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:07:55", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwt1LmY5MzFkNzk1M2FkNmJhYTAyYTMy\nMGE0MTg5ZDI2MWE0\n"}}, {"pk": "05c6117b1b48db21e2f26b33616879e7", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:15:51", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d62555a6c99a4c1c3902cabd20f93b50", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:16:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6d09b82d776b19083c1789e287012966", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:32:57", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3afaea433ab4fc03726881d97ae9edf6", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:50:57", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7bc1bd95a90e1c4c0f9b30b6fb566994", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 15:52:47", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5f9b08c9e9de402597c3b0b06f76d4a7", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 16:06:11", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "21045c72045098e4cfa5c556b4de0296", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 16:16:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b5c4ca06f676e54c05d90f1c35dfdfee", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 09:29:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4f7a99d5ab3f44b699488df816bfe9ab", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 04:45:50", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ce62b0747c2ee1c9d9bc4e8fdffc1dcf", "model": "sessions.session", "fields": {"expire_date": "2010-07-28 19:50:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d668dab441175ed4c825bf7b478a894d", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 16:30:25", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSwx1LjczYmEwOWQ3ZmVmMjkwNmZmY2JkODkwZjliZjFhNTQ4\n"}}, {"pk": "3b5c1d0b8a4055ef4eef93221ec26728", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 16:39:41", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "027cffd7a0d618fbb45d9973fa115dc7", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 16:47:16", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "41e1ce4e24455fcf6853bc0709d2bb8e", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 17:16:03", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9eb635f253dd973d82c68320695a4f6c", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 17:23:23", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2271d5ba3b332874531601f029ad891b", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 17:30:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0b699b24ba8f17845708a850e7782c2f", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 17:44:19", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESw51LjA5N2NjOGU3Mjg3ODI2NDE4MzMy\nNjQwYjBmYzE2NGNj\n"}}, {"pk": "62535146a1281997338260de3f73a001", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 17:52:38", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "53c8e52d500bcb4fdcd4e24b67519bb6", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:31:10", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8367a0af3136f8f6b77edc9f7716829f", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:31:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "44bbb592165d29a20a4e220af5df0355", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:32:54", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSw91LjI0MDJlNWQyZTg1ZjUyNDFmNDkzMDc0YjMwMGUyYWQ4\n"}}, {"pk": "b106498466996b0a8d155e95481778b7", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:43:48", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxB1LjM2Y2YwNzY1ZDM3NDZhNmUxNmVkN2VjYjY1NTJlNTg2\n"}}, {"pk": "327ee606ab50e198469590958719b372", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:44:05", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESxF1LjM5NWRjNDM2Mjk1OGJkOWU1NmI4\nNzA3ZjYzNGRlOGZm\n"}}, {"pk": "3ce1aeef0e37edbaef6e3796f5b42428", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:44:20", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ae2a761c311ce8f68c225ceee0dbd508", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:48:19", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESxJ1LjQ3YjQ5NWJhOWJkYWFhYWYyNGM0\nNDFiNGY4NGUyYTcz\n"}}, {"pk": "b51fb0111cc1b1fdb9690f2ec07f5985", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 23:15:30", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxV1LjE3YjI0M2U4ZmQyNjQ3ZWQ2NmVkZGQ5YzkwOTA1ODdi\n"}}, {"pk": "834bb57a907a0794eccaa34d8f99d0cc", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 18:54:20", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxN1LjY4MjQ1NzRjZWVmMzFhNmRiZmY4OWY2YjhhODM2Mzll\n"}}, {"pk": "f5d056e27bbe45cd40a6d11cf700c405", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 19:14:00", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e4d236c2f05565f3cb1e8fdaa0a1251d", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 19:14:46", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "85d8726ceacbb187c85e17d02fe652b7", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 19:41:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ad0954954faccb64c9dddf610fd056ea", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 19:45:54", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxR1LjZhMzM4OTg3YWFiNmU2YjBhNDAyYzZlM2RkYTlhNWUy\n"}}, {"pk": "eb0611f4056e5d97e9d1e640cfdd64d5", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 20:11:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ef0831314df322ba6247347b6d7e32cd", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 20:57:15", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d26b003a071d274e5d7448e189a4a339", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 21:33:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7abee5803f5f1a42537f6910392bd802", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 23:19:03", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5985f8fa48c992f1bda72f208eda002c", "model": "sessions.session", "fields": {"expire_date": "2010-07-24 23:58:20", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxZ1LmQyNWMzYjdlNzJmYzBmYjYwMWJiZjdmNGEyNTM1MzZk\n"}}, {"pk": "3b50506e5036d770f9f97e747c93d051", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 00:42:07", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d8f3c20aeed8b677d3cfe2475fec6980", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 01:20:34", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "765029b865a94bf5cc6624e672219a5d", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 01:30:11", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "24af466aba31e027643b967f71fc06a0", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 03:05:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a8a96046bfd450c64eee7bb6af1e06c5", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 03:32:14", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESxd1LjQwNTQ0ZjZjOWM5OTZlOTQ2YjIw\nNDZhMTM4YjY2OWJl\n"}}, {"pk": "e55cb9e1cf96e79d5f7b2adfc20e09d2", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 06:20:15", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxh1LjhhMTRmMDY3NmI5MTYyMjA5ZjNiZDA5NTEzYzljOTU2\n"}}, {"pk": "cd77945b83795cc0810693095f130de8", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 03:55:34", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "fe04fb44f38d0254fe1a250c5dfa138b", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 07:14:29", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSxl1LmZkZmY1NzhjNGJiMDVkYzA0YmJiMTQ1MjI4OTlhY2Jk\n"}}, {"pk": "b5b4d1af1050bb001dbe3e011f3ec9c4", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 08:19:50", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "280d1463e301071730d7b3138c6b4657", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 08:22:49", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESxp1LjlmNTE1YzA2MzMyZTUxZTBkN2Zj\nZjBlMGQzZDFlYjkx\n"}}, {"pk": "56e99046dddd4a7819449c62719cf897", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 09:04:44", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "59ed91a3eddb06a72a8a37e86ffa7302", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 09:33:40", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESxx1LjZkMDEwM2ZmOTAzODExNzc2Mzcx\nN2YyYzM0ZGVjYzAy\n"}}, {"pk": "6c3907d04924d4ecfe14219ec1e9bf9d", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 05:24:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ecd74b0b7b5020922401bd8c4c7d78af", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 10:04:20", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSx11LjAwNTY5NjBiNTI0YjRjNzRlNWIyN2M3YjlkMDRlZjE3\n"}}, {"pk": "40ca905cecef2d56a1374583fb4a11e8", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 02:46:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6a4cffda58e56d1dc5d520574b16ba07", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 10:04:47", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSx51LmY2OGE5YzU4NmQzNzAzMmY0NjAzZTIwMTFhMjYzYWNj\n"}}, {"pk": "f5550cacf3c86a66ab579d1cc9ca1f94", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 05:46:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "988376b2b24bf888754ff54a0ff91437", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 12:10:37", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSx91LjVmZjg3YjA1MzE2MmMyNWIxNWJiZTkwNjYwNjVlYzE3\n"}}, {"pk": "9705702ef5d59035d00b15feb80c63ea", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 13:05:33", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e80e4420de8278f95b15f514a3e4b2ca", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 05:47:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d0a26c08182e0b460096695d2670adb2", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 13:45:24", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyB1LjQ1ZWJhYTNmZDkyZTJhYzU1ZTk5NWFmNTk3Zjc1NTg4\n"}}, {"pk": "64b0d8a2d80ea49f53b4512dd634b0ff", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 13:52:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "df1484258f1625611240000cd438ef3b", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 08:11:10", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e818e042fac311f83430d8b25f5f61c0", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 14:58:31", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyF1LmE2ODExZjk2ZGZhY2EzOTEzOWMyMDUyMDI1MzY3NGIz\n"}}, {"pk": "136e30b663cdbfb9f89cc3f5246a7558", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 08:57:45", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "fc64dbb46c06346f6d54752df592d7cb", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 15:09:51", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9bf426183fc514bfa3bf8836bd61d301", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 15:10:50", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyJ1LjVhMmVlNzJlN2EwNjIwZGJhZTM5YmEwYzMxYTkxMzNl\n"}}, {"pk": "1fa2342e112326f6261af45847bc4d76", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 09:53:04", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e4383c3a3eedf36096524dd7b0db4581", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 15:21:00", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyN1LjI0NTg0YWU5NzNlNDc3ZTczNGQwOWVkNTM0Y2FiY2Rh\n"}}, {"pk": "c412ed9f962d1eccaa9eb48d7ea34944", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 16:11:24", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyV1LmNkMzBmMDM0Y2Y2NGRlY2NjM2M4\nMmQ1ZjU2NWJkZjBj\n"}}, {"pk": "97e1e9759888397c018dd2d2731920da", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 17:21:46", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8fc1825dd639572aebf83db2a1ceb67e", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 18:44:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f584690f7aa38c9b616b5ce9dbd5a9b4", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 20:03:43", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyR1LjJmYTA2YzRjNzliZjRhMTc3MWM5\nZTIzYjVhNzE2MzY1\n"}}, {"pk": "5aab3300f35157c9d47f7cf159bbc0a6", "model": "sessions.session", "fields": {"expire_date": "2010-07-25 20:04:36", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyR1LjJmYTA2YzRjNzliZjRhMTc3MWM5\nZTIzYjVhNzE2MzY1\n"}}, {"pk": "9a107c455fe41a501aee9d924b8c89f2", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 18:34:30", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "32253e967922713b53ed67c75bc20189", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 20:44:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "74ebff14f0788a09751089321a81e52b", "model": "sessions.session", "fields": {"expire_date": "2010-07-26 21:09:25", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyZ1LjdiZmEwODE0NTRlZTE0OTM1MTBjNWM5YzAxYjRkMzIw\n"}}, {"pk": "8bf378e3828614e70f6fdad9f4edc8da", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 04:30:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "71125554a77677986273dea38f03aa7a", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 04:48:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "09ee8cad20cda75d31cd66bddddc096d", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 05:52:08", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyd1LjhjNjE2ZWFiNWVjMzUzMTZiMmY0ZmNmOTk5YjI4OTI5\n"}}, {"pk": "13558895382ba392f8a4e0619e99ec16", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 10:00:44", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1327edc59c9fc94417d725b0535b1cb1", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 10:01:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e20b7ed3253b37cb838d3afd7139ca8c", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 18:03:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "cbf96fea0dbd5c8819cbdb5998fbf321", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 15:17:38", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyh1LjJjYWFmNWY5MmMyZDJlZGY4YzI2\nOTM3Zjc5ZmFkZTEz\n"}}, {"pk": "9570d0b4ef4f692cd2eea3876cbdead5", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 16:27:50", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyl1LjJlZDljZGUxOGZlMjRkOTU4NjczYWEyMTFhODk3YTY3\n"}}, {"pk": "f4a8a7a6bd1fe1df422629af7851b630", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 19:00:19", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyl1LjNmM2VkNGVlZmRkYzE2ZTkyN2I1\nMGU0MWU1MDhkNWZj\n"}}, {"pk": "dfbf6b1239ba90ac79d77c3d9c482b84", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 21:27:47", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "74bcd1b81e19747ef95ccaec3180a61c", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 21:37:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0314afd0f93da675bfa9037ff124d0d8", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 21:44:33", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c4d190299e0deb8779ddb09e90edbfcc", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 22:58:09", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyp1LjExZjkwNzljODU5MjJjMzg5M2NhMThiZTM5MzI1ZWRm\n"}}, {"pk": "378bbe34ae3c4374cdf4224c6ce2b2d3", "model": "sessions.session", "fields": {"expire_date": "2010-07-27 23:11:48", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b72d0b2de4713471fde80e3349a3cf47", "model": "sessions.session", "fields": {"expire_date": "2010-07-28 11:52:55", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b2e54ed1f09862c59bd7f4bc29de3f3c", "model": "sessions.session", "fields": {"expire_date": "2010-07-28 11:34:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "07392c950068e05a3974c05a5a8d1825", "model": "sessions.session", "fields": {"expire_date": "2010-07-28 12:25:10", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyt1LjViZDRmNTNkMjJlOGZhYjQ5NGMyZTgyMjI0MWNhYTkw\n"}}, {"pk": "86005ffa2ff26b634712b67f7e6cdc0c", "model": "sessions.session", "fields": {"expire_date": "2010-07-28 19:49:17", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a9f1a0fb0b083b6e5d9c5a5d1da0bd15", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 04:15:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b6de99eaa48efdca92759f1f0c90a8b5", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 13:12:49", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSyx1Ljk0ZjBmZjFmNmQ1MjA2ODdiM2YwYzY4NTQyZWZlY2Y4\n"}}, {"pk": "16b249e3976da74a360db0a060767209", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 13:14:33", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESy11Ljk3YzFjMjVmYWZhOWNhMzZkZDY2\nYmRmYTg0ZmU1NDZi\n"}}, {"pk": "74a681946b2f7b843ddee304adbaf942", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 14:36:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7d14b89ff084bc65853ad3c934ceeb61", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 15:45:44", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "2da7a000288ec74f9ca1ccd4df65d704", "model": "sessions.session", "fields": {"expire_date": "2010-07-29 20:26:15", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSy91LjEyMWI5YjMzZWIxNDYyNzc2MjYyY2Y5NDBjZTdhOWI3\n"}}, {"pk": "e797b1ce43ea99a257e00cd096c5f536", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 07:33:00", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "880bbfc50fb4afcffc84d8611da96a78", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 13:25:52", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSzB1LjRjOTY0NTAzZGRkZjNkODE0MzI5NDVhMjY3YmQyZDI5\n"}}, {"pk": "34507ee903b8c885f0407d3a1833cdc7", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 14:10:51", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSzF1LjA2NWMwODEwNDQ5YjljOWI5ZWZlMTFlYjMwMjM5YjJk\n"}}, {"pk": "c9c00e3175b115af76ca5ffe2ea49e28", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 16:15:24", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f77b2cfcc9b3029de67e1ff17fd10287", "model": "sessions.session", "fields": {"expire_date": "2010-07-31 22:47:53", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVQ1fYXV0aF91c2VyX2lkcQRLL1USX2F1dGhf\ndXNlcl9iYWNrZW5kcQVVKWRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5k\ncQZ1LjYwZTUzN2FiY2VlZjdkY2VkNjM1ZmE5ZGM0MTBkNmJj\n"}}, {"pk": "678ee233e3be90b770cbe49540421f57", "model": "sessions.session", "fields": {"expire_date": "2010-08-01 01:21:50", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "dd2c85da6dbd08ad03c27350b298e35d", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 17:36:51", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "16e700f12145f6ab5a0f531227503dcb", "model": "sessions.session", "fields": {"expire_date": "2010-07-30 18:53:25", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzJ1LmEwNDRkMzk1Njk0NDhkZjZiZDRk\nZDg1ZWU0OTY1ZjQw\n"}}, {"pk": "596188f92fe84daee76795615ed3deaa", "model": "sessions.session", "fields": {"expire_date": "2010-07-31 17:53:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ff421735ae9120dd82184fd2d8f5461d", "model": "sessions.session", "fields": {"expire_date": "2010-07-31 19:30:17", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyl1LjNmM2VkNGVlZmRkYzE2ZTkyN2I1\nMGU0MWU1MDhkNWZj\n"}}, {"pk": "00d29ae32dff55eee859109e68aa8ce0", "model": "sessions.session", "fields": {"expire_date": "2010-08-01 06:46:51", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzN1LjNmZTA3MTZhYzAwMzRhNzUwYjBi\nYmNiZDM0NGViMzQz\n"}}, {"pk": "f7da62430b6c6e5cf1e046560937150d", "model": "sessions.session", "fields": {"expire_date": "2010-08-01 19:48:25", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzR1LmMwYTM1MTdhNDRjYzZhMzgzY2Jj\nNTAyY2QyZmQzMTRh\n"}}, {"pk": "a6a5c77ddf108ff8bc5c9ea87c86a576", "model": "sessions.session", "fields": {"expire_date": "2010-08-01 22:12:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "283afc35ffa75a8935f6d4b2d91a6425", "model": "sessions.session", "fields": {"expire_date": "2010-08-02 15:04:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3996d946adfb5309c96eeff7c6ec14b5", "model": "sessions.session", "fields": {"expire_date": "2010-08-02 16:32:48", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzV1LjE3NzIyMTI1ODlkNjUzMzkwZTIw\nMmY4ZWI4ZjFlMGJk\n"}}, {"pk": "0814ae4d36f2614882b6eb45b757922b", "model": "sessions.session", "fields": {"expire_date": "2010-08-03 00:43:04", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzZ1LjNlZmRhMjU5MDEzNmE0YTU5OTNi\nMDU4NmQ3ZDNmNzI1\n"}}, {"pk": "cba6c1bf2e695f3842d862ad077e34d6", "model": "sessions.session", "fields": {"expire_date": "2010-08-05 03:48:24", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6aabeccf9189b126b09fe57909459c4f", "model": "sessions.session", "fields": {"expire_date": "2010-08-05 20:03:26", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "fe858ce51a0bbcf13d5017174e5a4e3e", "model": "sessions.session", "fields": {"expire_date": "2010-08-09 10:03:14", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwh1LjBiZTVlYTJhMmVhYWFiNjMxNjU4\nOTY3NDRjZjA1NmRk\n"}}, {"pk": "38d2a9080dced0b2545e2971034c6296", "model": "sessions.session", "fields": {"expire_date": "2010-08-06 01:34:00", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8310a7fff33a9be66a919684984573bf", "model": "sessions.session", "fields": {"expire_date": "2010-08-06 07:30:42", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzd1LmEzOGNiNGRhMTgwNzc0MTg2N2Vm\nZTAxYWJjYjYzODUx\n"}}, {"pk": "d9c0173fc315d133cc837c7c5f6f11f2", "model": "sessions.session", "fields": {"expire_date": "2010-08-07 07:41:41", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzh1LmY0ZDU1ZTQyMDJmODc3NjUwZmIw\nN2E2ZTkwMjQxYmVk\n"}}, {"pk": "aa190bb4b2ae4ed05694b1f851fe6433", "model": "sessions.session", "fields": {"expire_date": "2010-08-08 01:22:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "beb536fb63f616ca576f109ee1c9353e", "model": "sessions.session", "fields": {"expire_date": "2010-08-10 09:16:42", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyR1LjJmYTA2YzRjNzliZjRhMTc3MWM5\nZTIzYjVhNzE2MzY1\n"}}, {"pk": "3d4d769b26150629d14a6e7e0fe398dd", "model": "sessions.session", "fields": {"expire_date": "2010-08-10 18:21:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "51c9c4bb5f1868603689f5ebb4f829e9", "model": "sessions.session", "fields": {"expire_date": "2010-08-10 19:33:37", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwd1LmY4NmViNGRhODBjNWUxYmFlZjc3\nNjlhYTZjOWZiMzEx\n"}}, {"pk": "c7356cd6eb607c0c79d00e8daa99225e", "model": "sessions.session", "fields": {"expire_date": "2010-08-10 19:45:11", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "00b67626420e0d10bdaaa50b8da3a367", "model": "sessions.session", "fields": {"expire_date": "2010-08-13 05:40:00", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "fa50a44c33fd460fc359c787534f3355", "model": "sessions.session", "fields": {"expire_date": "2010-08-15 01:23:45", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6080d1df942f8772ce999a420c0c14c1", "model": "sessions.session", "fields": {"expire_date": "2010-08-15 18:07:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4ed23bd0e0c3dc73abfb55fa936f99b1", "model": "sessions.session", "fields": {"expire_date": "2010-10-17 03:34:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ac70111ea2e07963d97bda62831a9c72", "model": "sessions.session", "fields": {"expire_date": "2010-10-22 17:27:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b8b460b7bad5ade78ca720d50d987b16", "model": "sessions.session", "fields": {"expire_date": "2010-08-25 11:39:29", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVQ1fYXV0aF91c2VyX2lkcQRLOlUSX2F1dGhf\ndXNlcl9iYWNrZW5kcQVVKWRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5k\ncQZ1LjI4YzdiM2JkZTAwYjBkYmUyMjMwNGM0ZjEzMzg0NDRm\n"}}, {"pk": "bffee12525b194a1c32cc2cadf6ced73", "model": "sessions.session", "fields": {"expire_date": "2010-08-17 18:00:33", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c177f27a3b06cc3501dc6489d737587a", "model": "sessions.session", "fields": {"expire_date": "2010-10-22 20:21:50", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f3e468dede61e100e1456499db4214c6", "model": "sessions.session", "fields": {"expire_date": "2010-08-26 11:23:41", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "9c472467f566d9ec5f0b95296e46c6a6", "model": "sessions.session", "fields": {"expire_date": "2010-08-27 19:20:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9fbe6e5267e5c4789895ad62e35ce7be", "model": "sessions.session", "fields": {"expire_date": "2010-08-29 01:29:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4e601eaee5e401093a21a637d4a07325", "model": "sessions.session", "fields": {"expire_date": "2010-08-30 00:11:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a1bd80f22bf66f97a144e4ca761adb7d", "model": "sessions.session", "fields": {"expire_date": "2010-08-20 06:23:32", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "359a4d97da844214510147fea1583c62", "model": "sessions.session", "fields": {"expire_date": "2010-08-31 21:09:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "745b528a83256b35e437664a8f6f5d87", "model": "sessions.session", "fields": {"expire_date": "2010-09-01 19:46:12", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "11e261be76f1a228b30d39952caa4824", "model": "sessions.session", "fields": {"expire_date": "2010-08-21 00:19:36", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzl1LmQ1ZTY5NmY3M2I3ZjNhMTFkNmIy\nNDU4ZmZkMWMwMmI5\n"}}, {"pk": "b3939b7836ab4ac0e178016e7a388ab1", "model": "sessions.session", "fields": {"expire_date": "2010-08-21 16:23:23", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "3eda68e0611f6230abc9569eebf621fe", "model": "sessions.session", "fields": {"expire_date": "2010-08-22 01:28:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5ce25271c5b1943ade36a3f0eee017bf", "model": "sessions.session", "fields": {"expire_date": "2010-08-24 11:19:59", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyR1LjJmYTA2YzRjNzliZjRhMTc3MWM5\nZTIzYjVhNzE2MzY1\n"}}, {"pk": "4919913f38ebf9d92c79a2d51a7579b0", "model": "sessions.session", "fields": {"expire_date": "2010-08-24 19:57:11", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzp1LjBhOWZlZDBmOGYxYzRiZjM4Mjc0\nZTgxOTg4ZTA5MWUx\n"}}, {"pk": "60b5b7a2186d3f3fe46da9d137be9672", "model": "sessions.session", "fields": {"expire_date": "2010-09-04 15:00:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0714de81bcc0081e658ed8362e6a1c38", "model": "sessions.session", "fields": {"expire_date": "2010-09-04 22:01:26", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0a9eaa033765a191cfb2a144c000c78d", "model": "sessions.session", "fields": {"expire_date": "2010-09-05 01:31:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "755221481faaeb8c9f2dfa76ff39d27e", "model": "sessions.session", "fields": {"expire_date": "2010-08-25 11:39:24", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVQ1fYXV0aF91c2VyX2lkcQRLOlUSX2F1dGhf\ndXNlcl9iYWNrZW5kcQVVKWRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5k\ncQZ1LjI4YzdiM2JkZTAwYjBkYmUyMjMwNGM0ZjEzMzg0NDRm\n"}}, {"pk": "52a5bd791b64902cab95f96e667749ec", "model": "sessions.session", "fields": {"expire_date": "2010-10-23 15:48:55", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "120d2995ee96a7bedcf72d6e44c3f5cf", "model": "sessions.session", "fields": {"expire_date": "2010-09-07 13:09:53", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "be97d01b12bf3c7e7e6946c9b61c86dc", "model": "sessions.session", "fields": {"expire_date": "2010-09-10 06:17:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c1311d8121029748f0bbc7428ee72184", "model": "sessions.session", "fields": {"expire_date": "2010-09-12 01:34:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "682901d45bb5e7067cc188d3ca0bf9c0", "model": "sessions.session", "fields": {"expire_date": "2010-09-16 20:45:45", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1fbe751e36b67fa421a3e74bcd7a6533", "model": "sessions.session", "fields": {"expire_date": "2010-09-21 11:38:24", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d23f6d4c360e1f05b622e5a7b7fcb1b0", "model": "sessions.session", "fields": {"expire_date": "2010-09-29 04:40:53", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyh1LjJjYWFmNWY5MmMyZDJlZGY4YzI2\nOTM3Zjc5ZmFkZTEz\n"}}, {"pk": "5889beeb62a8cf7b0c58e404e38f2f71", "model": "sessions.session", "fields": {"expire_date": "2010-10-01 02:37:31", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d032b9ec056e56fedd40c086c9004258", "model": "sessions.session", "fields": {"expire_date": "2010-10-02 08:40:55", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "24105e202a10c59ef077591deb1779de", "model": "sessions.session", "fields": {"expire_date": "2010-10-06 11:28:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f69185446de0650b550f98c3af979516", "model": "sessions.session", "fields": {"expire_date": "2010-10-10 17:43:13", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f028935c69c2423cf2923fb7a96fad36", "model": "sessions.session", "fields": {"expire_date": "2010-10-13 13:54:16", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "07e06d854f73e625727b4024c17b230a", "model": "sessions.session", "fields": {"expire_date": "2010-10-14 20:02:53", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1d76151535c7dc65e940d059848a2d0f", "model": "sessions.session", "fields": {"expire_date": "2010-10-16 06:38:22", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e7f4ecbae2676a658d0dd5b6fb19f38f", "model": "sessions.session", "fields": {"expire_date": "2010-10-23 16:01:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6e66f356e8c6eeeb58ece8d26afdedd5", "model": "sessions.session", "fields": {"expire_date": "2010-10-23 16:10:36", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1bd1cd4956800f9611791cca34b15d9c", "model": "sessions.session", "fields": {"expire_date": "2010-10-27 14:01:31", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "10789207667daca40baa628d697dbee6", "model": "sessions.session", "fields": {"expire_date": "2010-11-02 21:52:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3ddaf51e8f6826410bd5aedf88e0d200", "model": "sessions.session", "fields": {"expire_date": "2010-11-04 05:56:24", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "80aa3e7ea9f54aa8eb7647e2d7d3a1c3", "model": "sessions.session", "fields": {"expire_date": "2010-11-04 20:19:51", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "cff714d3e172675a54bc7b110854da39", "model": "sessions.session", "fields": {"expire_date": "2010-11-05 16:19:37", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSzx1LjdkNGU3YTFjNGExNzQ0NTQyZDZmNDNkMGFhMGMyNWE4\n"}}, {"pk": "543a0147356127913033746c0f2205c7", "model": "sessions.session", "fields": {"expire_date": "2010-11-05 16:43:24", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "0034f42f6a1d0e8286280114864fc6b4", "model": "sessions.session", "fields": {"expire_date": "2010-11-05 16:47:12", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "6edbafcec07fe67a31b5b95f5f440acf", "model": "sessions.session", "fields": {"expire_date": "2010-11-08 16:11:04", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nS0J1LmFiZWJhNDA5NDM2MDk2OTk3YWJkY2JmYzdkYzM5Y2Jl\n"}}, {"pk": "70fd3e8eb5665ea3493d44435ebf704f", "model": "sessions.session", "fields": {"expire_date": "2010-11-11 00:18:38", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8646240cded7d7f2583253c2bfd61f04", "model": "sessions.session", "fields": {"expire_date": "2010-11-11 13:36:37", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nS0N1LjNlNTBjMTRlMzYyN2YzMDcyM2ZkNzc3ZmE4YTFjYzk3\n"}}, {"pk": "4b63e214efa5e9c0c3862549ee07e35a", "model": "sessions.session", "fields": {"expire_date": "2010-11-12 15:54:04", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "af264b03418d03a5faffdfbcd35110f0", "model": "sessions.session", "fields": {"expire_date": "2010-11-05 23:04:16", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nSz11LjNjN2NiMTI1YjU2YzBiMjkyODlkYjIzOWVmYmI0MDZl\n"}}, {"pk": "919f0d8225deeab3493b74a847a5d317", "model": "sessions.session", "fields": {"expire_date": "2010-11-06 10:55:46", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4ae2f4f90b355c9049630f1d814ab273", "model": "sessions.session", "fields": {"expire_date": "2010-11-06 17:42:45", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "47bc1cb30fc930b69d6080e544400d45", "model": "sessions.session", "fields": {"expire_date": "2010-11-07 01:42:56", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "c8ef07c4671ed6d6d73140900947d852", "model": "sessions.session", "fields": {"expire_date": "2010-11-07 03:44:24", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwJ1LjAzNmRhOGZhZTE2ZTM1Mjg1MzRm\nZGE0NGQ5YTM0M2Jk\n"}}, {"pk": "ab8baed8b80de73d4d8197b38e2d9e0f", "model": "sessions.session", "fields": {"expire_date": "2010-11-07 04:46:21", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESz91LjFkMmZmYjg3OGYwODhkMjVhZTZm\nNzhiMjY3OGU0ZGI1\n"}}, {"pk": "e83bd0efcda7aeee3a351feb8b99f617", "model": "sessions.session", "fields": {"expire_date": "2010-11-12 19:32:53", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2dc5a16117026d91587b7a5f227b95fa", "model": "sessions.session", "fields": {"expire_date": "2010-11-07 13:01:57", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nS0B1Ljk3ZjEwNjYwOTJlZTEzNjU1YzRiNmY0M2Y2NjgxZWZm\n"}}, {"pk": "291b8f7652ca1cd24609e5bc22222078", "model": "sessions.session", "fields": {"expire_date": "2010-11-07 13:58:28", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0F1LjIxNWIwN2E1YjRhMjA5MjZlNGY0\nYjE0MTczMTAyOTQ3\n"}}, {"pk": "7501a524448f8ba2abee5476cd92da39", "model": "sessions.session", "fields": {"expire_date": "2010-11-08 07:12:30", "session_data": "gAJ9cQEuNDY5MjVhMDAzOGMzM2M0ZTY3MWZlMzkwODdmYjczNjg=\n"}}, {"pk": "9222da06fe3e810874d51931333d7860", "model": "sessions.session", "fields": {"expire_date": "2010-11-12 19:33:19", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nS0R1LjFkZGI4NGJhMTE3NzM1MTI4ZWFiNjM5NTZmNDY3YmIz\n"}}, {"pk": "f1b2f8d8d18f1cd8c6c675a327eca91b", "model": "sessions.session", "fields": {"expire_date": "2010-11-13 03:24:07", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e2925d06bfa455ae8bcaefeff8488d2b", "model": "sessions.session", "fields": {"expire_date": "2010-11-15 05:00:26", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a70eb6b2c878c0b38f6e43981264caff", "model": "sessions.session", "fields": {"expire_date": "2010-11-15 05:00:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ed873a20433905e56e1ef34a75b1ebb7", "model": "sessions.session", "fields": {"expire_date": "2010-11-08 15:41:45", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESx11Ljk5NDRkNDMxOWYxMzg2MGRlZDZl\nNThhNjMyOWI3YmZh\n"}}, {"pk": "669aaab84c2533b2ba122c3646ea4747", "model": "sessions.session", "fields": {"expire_date": "2010-11-15 09:44:02", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyx1LmZhYzY4OWFiN2RjNzUzMmRhZTUy\nNDhlYzg1NGU0Y2Nh\n"}}, {"pk": "8b9f1b68a953d4d085a49eb9d894c476", "model": "sessions.session", "fields": {"expire_date": "2010-11-15 21:45:35", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f51cd2e329f5f107f5f64a470a909f33", "model": "sessions.session", "fields": {"expire_date": "2010-11-15 23:57:21", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7f64143bc5e5a222b9713f19be3281fe", "model": "sessions.session", "fields": {"expire_date": "2010-11-16 03:37:18", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "213877bb7c477b018f6751894fc98817", "model": "sessions.session", "fields": {"expire_date": "2010-11-16 06:55:36", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "08d15baf754dd6aac07d2ce523d676c4", "model": "sessions.session", "fields": {"expire_date": "2010-11-19 15:31:35", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "491b353c03d5e7b7a3c0a7228518d5a7", "model": "sessions.session", "fields": {"expire_date": "2010-11-25 20:40:48", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e7170217c20b12c1d848a7d149d529b1", "model": "sessions.session", "fields": {"expire_date": "2010-11-29 16:52:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a49d2da4f1c8f15ade432c95b82cf987", "model": "sessions.session", "fields": {"expire_date": "2010-12-02 14:08:05", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "39d6355983c1f0cf4bb05b375e8b3192", "model": "sessions.session", "fields": {"expire_date": "2010-12-03 07:28:03", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6e75bc17bd2d960750ac724001971950", "model": "sessions.session", "fields": {"expire_date": "2010-12-05 02:21:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ab5e1a815ceef29f35ee4aa93a3f2368", "model": "sessions.session", "fields": {"expire_date": "2010-12-05 04:36:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2b8a17e9353ccefbe1a85ece79e7ec5e", "model": "sessions.session", "fields": {"expire_date": "2010-12-10 16:03:30", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "976f3b25fe6d8d0bb924c1f5766466dd", "model": "sessions.session", "fields": {"expire_date": "2010-12-11 12:22:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2de1473b525c4b1f6de4b0a7084a85d9", "model": "sessions.session", "fields": {"expire_date": "2010-12-11 13:59:45", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7e100206bf435dcb7f5e1cc2fa1ea0d9", "model": "sessions.session", "fields": {"expire_date": "2010-12-11 17:52:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2a0ada110901e4f6d055423c799098d9", "model": "sessions.session", "fields": {"expire_date": "2010-12-13 07:17:16", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1ea9a15e5e6017b8a3c2c55431c64ab2", "model": "sessions.session", "fields": {"expire_date": "2010-12-15 12:34:34", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f1517295501ccc7fa2504366b461731e", "model": "sessions.session", "fields": {"expire_date": "2010-12-16 02:14:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "48182b87af114fee3d21da7fa7b739a8", "model": "sessions.session", "fields": {"expire_date": "2010-12-22 06:06:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "faded93b4725ec5e81ef29c602b43ff3", "model": "sessions.session", "fields": {"expire_date": "2010-12-28 03:30:57", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7f928d04aa9069d5146a5fb793712fd4", "model": "sessions.session", "fields": {"expire_date": "2010-12-31 17:14:09", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d2aec74dddc5be3cc7bbe8a234b663c2", "model": "sessions.session", "fields": {"expire_date": "2010-12-31 19:04:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f2d29180357b46d92223f244b712e71f", "model": "sessions.session", "fields": {"expire_date": "2011-01-02 03:07:20", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e32139035ccfb0a200efd1e9fbaa2f7f", "model": "sessions.session", "fields": {"expire_date": "2011-01-05 08:52:45", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESyR1LjJmYTA2YzRjNzliZjRhMTc3MWM5\nZTIzYjVhNzE2MzY1\n"}}, {"pk": "a22bdc701b0c140a3f274038b2fd09a8", "model": "sessions.session", "fields": {"expire_date": "2011-01-08 04:45:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7665571ac74a449efa3112025ee08919", "model": "sessions.session", "fields": {"expire_date": "2011-01-11 00:45:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e9c0f56c9d5027ecefc53c5ce6f9e161", "model": "sessions.session", "fields": {"expire_date": "2011-01-14 10:18:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "29ba661c6ec250b12be05979cc6bd446", "model": "sessions.session", "fields": {"expire_date": "2011-01-16 04:50:48", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "86c560e365c68c1a364e1dc2f9af74bb", "model": "sessions.session", "fields": {"expire_date": "2011-01-17 17:45:30", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5f36d0fce9b1ac4b1c60aecd0e927b9e", "model": "sessions.session", "fields": {"expire_date": "2011-01-20 21:02:12", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b8972425162ee81ecef3b80fa21b9d25", "model": "sessions.session", "fields": {"expire_date": "2011-01-21 05:54:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8399bdc5aa9e1bea41b73d4147bead2e", "model": "sessions.session", "fields": {"expire_date": "2011-01-22 12:08:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8f7403df98852cf0396a0b76c65cfd38", "model": "sessions.session", "fields": {"expire_date": "2011-01-23 02:10:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d5b330b6a13ed33a15b3791546ec36b6", "model": "sessions.session", "fields": {"expire_date": "2011-01-24 01:14:51", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "29fd799e63ad22b9c41888393be0729c", "model": "sessions.session", "fields": {"expire_date": "2011-01-24 13:10:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e3f8f6821c007774c763824220b07fc0", "model": "sessions.session", "fields": {"expire_date": "2011-01-24 17:00:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1c466121d01c204a8b11318f5e349f81", "model": "sessions.session", "fields": {"expire_date": "2011-01-24 17:02:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e75a4121e71c180e543a808d22d2d530", "model": "sessions.session", "fields": {"expire_date": "2011-01-25 05:39:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "e5683288d893c3d31d54bb6fd3a7e5c4", "model": "sessions.session", "fields": {"expire_date": "2011-01-25 12:01:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "cc6142460c0a4d4e5d905c61f4829c16", "model": "sessions.session", "fields": {"expire_date": "2011-01-25 15:20:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5f4d65e0fc8d196b686fe16da892216b", "model": "sessions.session", "fields": {"expire_date": "2011-01-26 12:27:04", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f1a469f9bcbc1b6bc21ed6b3fa78e839", "model": "sessions.session", "fields": {"expire_date": "2011-01-26 16:16:10", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8b2859e6bbc58078ed8e4e1c5bfcacf2", "model": "sessions.session", "fields": {"expire_date": "2011-01-28 06:43:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c75aad1ae2c6bd03819bec7cd9ffe705", "model": "sessions.session", "fields": {"expire_date": "2011-01-28 12:05:41", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5e79c00cc4d9c690a86c370cc3a08f12", "model": "sessions.session", "fields": {"expire_date": "2011-01-28 16:21:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4e896d366bb47a2e13201d8e1e8f5db8", "model": "sessions.session", "fields": {"expire_date": "2011-02-03 18:43:56", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0V1LmMxZmNhMGZiNzEzMGZmZTU1YzJk\nZmNlYTYwNjA1OThj\n"}}, {"pk": "3188838f80d80bca0b208f600db32e2a", "model": "sessions.session", "fields": {"expire_date": "2011-01-28 18:15:48", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0V1LmMxZmNhMGZiNzEzMGZmZTU1YzJk\nZmNlYTYwNjA1OThj\n"}}, {"pk": "9ef4a2464916c72ebc266a15fc7baa1c", "model": "sessions.session", "fields": {"expire_date": "2011-01-28 23:58:12", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0Z1LjhlZWEzY2IwYjAyZDRiYjM0OGI3\nZjY0NmI3MmU0YTM3\n"}}, {"pk": "033c9a15072464278cf8e69611eb96c1", "model": "sessions.session", "fields": {"expire_date": "2011-01-29 18:45:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1940c5a5f367c1b5f11c99b190bc5291", "model": "sessions.session", "fields": {"expire_date": "2011-01-31 20:47:23", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "03e83989ce722831fb3a94887a319014", "model": "sessions.session", "fields": {"expire_date": "2011-02-01 16:11:28", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "654353e1fb9d5eedf3560160b074272a", "model": "sessions.session", "fields": {"expire_date": "2011-02-03 08:39:42", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4d0471d145b83f52bf580f6214fce8cc", "model": "sessions.session", "fields": {"expire_date": "2011-02-04 01:38:30", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0Z1LjhlZWEzY2IwYjAyZDRiYjM0OGI3\nZjY0NmI3MmU0YTM3\n"}}, {"pk": "fe1b378ae31fc42e96978b42e452e67b", "model": "sessions.session", "fields": {"expire_date": "2011-02-04 03:44:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ea11069e88f59ceba2b5de946a79b6bb", "model": "sessions.session", "fields": {"expire_date": "2011-02-04 11:12:38", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1e9dfe680265671f290b740eeffe7906", "model": "sessions.session", "fields": {"expire_date": "2011-02-04 15:18:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "12a6649fe781181a07ca6b55bef42eed", "model": "sessions.session", "fields": {"expire_date": "2011-02-04 23:46:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "67554236a808290c0fbadd6a95a3f644", "model": "sessions.session", "fields": {"expire_date": "2011-02-05 04:33:47", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3c1e708110660613f0a071520f393868", "model": "sessions.session", "fields": {"expire_date": "2011-02-11 07:59:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d78fa18101bcf84a3a7087fe3f8a1e7e", "model": "sessions.session", "fields": {"expire_date": "2011-02-14 00:43:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "bc01992c83b8086130f081c9f6f54113", "model": "sessions.session", "fields": {"expire_date": "2011-02-14 11:45:21", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "74fb4db9a29d662e60db733c79a6b963", "model": "sessions.session", "fields": {"expire_date": "2011-02-14 13:24:00", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "96121e79d13bb6bf4ebd01a7ec601dcf", "model": "sessions.session", "fields": {"expire_date": "2011-02-14 13:24:27", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "225733c7d8d964f92bc297a2617b23fd", "model": "sessions.session", "fields": {"expire_date": "2011-02-15 03:47:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "263529fc3619e4244c56d8bfc441f0a1", "model": "sessions.session", "fields": {"expire_date": "2011-02-17 02:28:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "18cce3a1930fcb92ba2a1239aedc399b", "model": "sessions.session", "fields": {"expire_date": "2011-02-17 06:02:44", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "28b2cd0a9efcaca68f4b34889dbd822c", "model": "sessions.session", "fields": {"expire_date": "2011-02-18 06:37:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f4c637ebefc1d75d7d7953ea924af760", "model": "sessions.session", "fields": {"expire_date": "2011-02-21 11:23:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0e0a5e95742f7c82f5bddd3013fcd64e", "model": "sessions.session", "fields": {"expire_date": "2011-02-22 00:12:12", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d96c85d9b35bbbcd5b8f74c1bb5f0bb6", "model": "sessions.session", "fields": {"expire_date": "2011-02-24 17:25:47", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "113681f383ad866cdc396dd6db5cf7fc", "model": "sessions.session", "fields": {"expire_date": "2011-02-26 07:46:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9417c08dbad86eda4a6eeed2ea77c582", "model": "sessions.session", "fields": {"expire_date": "2011-03-01 22:34:42", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d664629d5e6c6e8eae7cc3eccba982c0", "model": "sessions.session", "fields": {"expire_date": "2011-03-02 17:48:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2e01daa5173f4e73a9cce2df3cfda940", "model": "sessions.session", "fields": {"expire_date": "2011-03-05 21:30:07", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "44afd63f9cc7537c933b5c9200f78f07", "model": "sessions.session", "fields": {"expire_date": "2011-03-11 09:42:31", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5aea8cb040e3adde3f93b44153a492fd", "model": "sessions.session", "fields": {"expire_date": "2011-03-11 17:48:11", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "be85959c86f56b532d0ea8bde67ef135", "model": "sessions.session", "fields": {"expire_date": "2011-03-12 20:20:20", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f97a150a1f25f529017b4174a9edc448", "model": "sessions.session", "fields": {"expire_date": "2011-03-14 14:11:04", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4fefe31b1809891497299430a3d0eeee", "model": "sessions.session", "fields": {"expire_date": "2011-03-15 18:08:28", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "30c0378da61ae5a74c83229515928ed2", "model": "sessions.session", "fields": {"expire_date": "2011-03-15 22:21:35", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a3a12b258b1be1bbfbded5385b84213b", "model": "sessions.session", "fields": {"expire_date": "2011-03-17 03:24:47", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8c7ca22e3fb3e59cbc29fa0d5ca6ffe4", "model": "sessions.session", "fields": {"expire_date": "2011-03-27 15:46:05", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7e15b570b1cb3e87ecbca6932785dec1", "model": "sessions.session", "fields": {"expire_date": "2011-03-28 15:31:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b961c8e01d5f729d94daccac771dd56d", "model": "sessions.session", "fields": {"expire_date": "2011-03-29 20:52:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f6c5190291093fe6ad7dc24c9b5877a2", "model": "sessions.session", "fields": {"expire_date": "2011-03-30 14:35:21", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0d6bee2f070e85c5151d11114c53e612", "model": "sessions.session", "fields": {"expire_date": "2011-03-30 22:32:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "18a48910fe1cb966d22569c651785d3a", "model": "sessions.session", "fields": {"expire_date": "2011-04-01 05:57:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "43e145090d9f5c2192e9f7dbcacdd81d", "model": "sessions.session", "fields": {"expire_date": "2011-05-11 04:26:14", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0l1LjViNzNkOWUyNDUxM2E2MTYxNmE4\nZGJiYzk4YmYxNWZl\n"}}, {"pk": "644b48a30de03e24bba5b33f37e995a9", "model": "sessions.session", "fields": {"expire_date": "2011-05-16 15:54:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9e76835b52e1bd5fd4298ec5e6b25c95", "model": "sessions.session", "fields": {"expire_date": "2011-04-03 06:48:36", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0d1LmMzMmJjYzliOTI2MTYzNGJhZTcw\nMjZlNzdkNmYxYTI5\n"}}, {"pk": "57c591e28a666b2bafd913b412713966", "model": "sessions.session", "fields": {"expire_date": "2011-04-05 06:46:54", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "705e44917fd38994d6ec16245443ce3e", "model": "sessions.session", "fields": {"expire_date": "2011-04-21 05:28:07", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6263d919e909ddba7d0c85b6477f13e1", "model": "sessions.session", "fields": {"expire_date": "2011-04-23 19:03:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2bc77445414906cb467b698602e8e800", "model": "sessions.session", "fields": {"expire_date": "2011-04-28 12:29:17", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "37ccdc4088803b4a04b840722715f0bb", "model": "sessions.session", "fields": {"expire_date": "2011-04-28 12:29:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7696d41f7a64793336bf57b6c451745a", "model": "sessions.session", "fields": {"expire_date": "2011-04-28 14:05:47", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a90e0eab214411850580ff9237dfd197", "model": "sessions.session", "fields": {"expire_date": "2011-04-28 16:02:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "83f4c06e623799252efc6e723d130919", "model": "sessions.session", "fields": {"expire_date": "2011-04-30 00:32:17", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "01677a73490d57ad373ecf3fa74e9ddf", "model": "sessions.session", "fields": {"expire_date": "2011-05-01 23:59:08", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0h1LmE2MTdhNTJlYmQxMWE1MmIzYzFk\nZTEzMzIxMmFkMDVk\n"}}, {"pk": "cb9c9c444fdb48645b064e793ac9ac62", "model": "sessions.session", "fields": {"expire_date": "2011-05-02 14:44:21", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2859d4fddadd0cf445fc884718bd501e", "model": "sessions.session", "fields": {"expire_date": "2011-05-03 00:36:35", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "15b5ba4a1e3413547a2688bb348bf031", "model": "sessions.session", "fields": {"expire_date": "2011-05-09 00:25:22", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ff145a72196aadec25b70cd3d7d124a4", "model": "sessions.session", "fields": {"expire_date": "2011-05-13 06:28:37", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3a8e81ec44af6bfb35e2611fa08469f5", "model": "sessions.session", "fields": {"expire_date": "2011-05-14 08:08:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6dc3a0252048932a0f500d297b9669eb", "model": "sessions.session", "fields": {"expire_date": "2011-05-16 15:54:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7a214e228c7b8b3b32bfcf280f086f45", "model": "sessions.session", "fields": {"expire_date": "2011-05-20 06:31:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8e0731c965294f7097f215f559a5d0d2", "model": "sessions.session", "fields": {"expire_date": "2011-05-21 05:31:38", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d2f462423e884472636043b31b1a9140", "model": "sessions.session", "fields": {"expire_date": "2011-05-26 19:52:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6a0b853af6a5fc59968c1068282d27a0", "model": "sessions.session", "fields": {"expire_date": "2011-05-27 03:31:14", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0569cd96aae104e9852d1cacd5c07ca4", "model": "sessions.session", "fields": {"expire_date": "2011-05-28 15:59:31", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b4488130f33ae9eec4b9cd4835c929b3", "model": "sessions.session", "fields": {"expire_date": "2011-05-28 19:50:23", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3d5763289de9c3eb6a7d48f88c299ae2", "model": "sessions.session", "fields": {"expire_date": "2011-05-29 18:45:12", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "949b8a8284f7bb6b47d9b1ec9c77db22", "model": "sessions.session", "fields": {"expire_date": "2011-05-31 07:11:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "213d7c14fc742ebf58731fffe87728b5", "model": "sessions.session", "fields": {"expire_date": "2011-06-02 09:28:31", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4cf5da079fef96aec76c1ac62b5c2ae0", "model": "sessions.session", "fields": {"expire_date": "2011-06-02 09:28:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8bfe47d738b8ccd3d8999ab6833ed636", "model": "sessions.session", "fields": {"expire_date": "2011-06-03 08:03:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "ed355fab7f67b0127fa7c2bf49d591c7", "model": "sessions.session", "fields": {"expire_date": "2011-06-04 18:40:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5b6e4d271f45214e0df95a2f996e97c2", "model": "sessions.session", "fields": {"expire_date": "2011-06-08 14:46:50", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "29d3bac7d7703d53818cf22313aa322e", "model": "sessions.session", "fields": {"expire_date": "2011-06-08 14:50:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "924ce63e770c54537dcb872e7bdca025", "model": "sessions.session", "fields": {"expire_date": "2011-06-12 05:01:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "7e0a8c241e9e850c810755a8d32fde5a", "model": "sessions.session", "fields": {"expire_date": "2011-06-15 06:57:16", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "4f50edb3c6a50fd584d42413de8a8d11", "model": "sessions.session", "fields": {"expire_date": "2011-06-16 11:47:39", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "09839ce937a05edbffb14c00f6bf5e98", "model": "sessions.session", "fields": {"expire_date": "2011-06-18 18:03:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "477f6c668f25a39ec505e3dbc8dc3d24", "model": "sessions.session", "fields": {"expire_date": "2011-06-20 13:37:14", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "6966973508ed7a38039c9a6be999bf15", "model": "sessions.session", "fields": {"expire_date": "2011-06-26 02:56:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "97606982502c4f2aedee4ccd46f1b30f", "model": "sessions.session", "fields": {"expire_date": "2011-06-26 06:48:10", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "94e18c54226478f1b79ed49edc81d421", "model": "sessions.session", "fields": {"expire_date": "2011-07-04 20:28:32", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "599836f2fd9fc3013df7d63e55fe2e18", "model": "sessions.session", "fields": {"expire_date": "2011-06-28 17:50:19", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0p1LjA1Y2Y4MDQxNDY5NTA1ZjBlNzlm\nZjNmNjQ3ODYxOTI5\n"}}, {"pk": "e8bc36280369ade7c75a650077a86bc5", "model": "sessions.session", "fields": {"expire_date": "2011-06-28 20:05:48", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "59efb5866f532e5c67ea98ad9e436440", "model": "sessions.session", "fields": {"expire_date": "2012-01-11 00:13:25", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2c86947f15afc8349c7b311d7538d262", "model": "sessions.session", "fields": {"expire_date": "2011-07-05 11:41:07", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "87220db8104ed72b7ba239c768644fe6", "model": "sessions.session", "fields": {"expire_date": "2011-06-28 20:24:11", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0t1LjhjNGMxYmE0MDgwOGVhZjMwMjQ0\nYTUyNWUzZmUyNGZl\n"}}, {"pk": "803940b0582fb6cad582d9028c018fd4", "model": "sessions.session", "fields": {"expire_date": "2011-06-29 12:28:36", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "6553018c6a379266d53ae0ecfb95346c", "model": "sessions.session", "fields": {"expire_date": "2011-07-06 04:30:30", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2c11a83474d1378a41d9f07c2c44b11f", "model": "sessions.session", "fields": {"expire_date": "2011-07-06 20:14:52", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "dd7f5a0c1fbcb4f870de12df417349cf", "model": "sessions.session", "fields": {"expire_date": "2011-07-01 11:54:47", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES0x1LmI3YTQxOWFlNWI0YzY5MTA0NzAz\nZjUwZDFiMTkzMjhk\n"}}, {"pk": "02ddd4af49a638c71e94086dbd8ffc8b", "model": "sessions.session", "fields": {"expire_date": "2011-07-01 17:56:41", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "d0a931ecd93b21c32134e7261706cfe5", "model": "sessions.session", "fields": {"expire_date": "2011-07-02 07:23:01", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "677cde884a798ec44596250d7606235b", "model": "sessions.session", "fields": {"expire_date": "2011-07-04 02:43:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a7f691e9116f6539009f36a2c470f72c", "model": "sessions.session", "fields": {"expire_date": "2011-07-07 17:40:38", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b5a9eb2342ce8ae06ae32b95277b7afb", "model": "sessions.session", "fields": {"expire_date": "2011-07-10 08:11:03", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0c0272c50483c0d23bbeaed7f4e435d9", "model": "sessions.session", "fields": {"expire_date": "2011-07-11 15:24:26", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES011LmY0Yzk2NTQ2ZDgyOWRjYTNkZDk0\nODdmNGQ5MTJjNjU3\n"}}, {"pk": "5c10a246b7224c42c4c0bab8eeff6bae", "model": "sessions.session", "fields": {"expire_date": "2011-07-13 00:24:15", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "18a33f63b7f4d6751de742a50219d3dc", "model": "sessions.session", "fields": {"expire_date": "2011-07-13 00:24:22", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "bc2cb0abb992c7f97b30b92a8e854917", "model": "sessions.session", "fields": {"expire_date": "2011-07-17 00:58:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f182509d273b5730a29b29ca404d11c8", "model": "sessions.session", "fields": {"expire_date": "2011-07-19 09:23:44", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c02b3bcb9a096794f815be2ede81fb9a", "model": "sessions.session", "fields": {"expire_date": "2011-07-20 04:05:08", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "165c2401896ec3398f850c8a78ff0bb1", "model": "sessions.session", "fields": {"expire_date": "2011-07-21 05:00:53", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "9f4d924d52a5151515c18dc6047523b9", "model": "sessions.session", "fields": {"expire_date": "2011-07-21 12:50:25", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "62c7068239eec5022dc68d8a139dc5be", "model": "sessions.session", "fields": {"expire_date": "2011-07-21 23:28:11", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "06cbbb8e45bde49a7f434f78640c7c4b", "model": "sessions.session", "fields": {"expire_date": "2011-07-23 19:30:15", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2b07cb9f0e448cbe4543824d0dca02ce", "model": "sessions.session", "fields": {"expire_date": "2011-07-23 23:16:41", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "59d9d977fe9cec250e10496cc643adf4", "model": "sessions.session", "fields": {"expire_date": "2011-07-24 01:03:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "34220fbc1de1afaed7a133827c0e1d05", "model": "sessions.session", "fields": {"expire_date": "2011-07-26 15:12:33", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "920083ae5ff3fdbee2e045f425a2f26a", "model": "sessions.session", "fields": {"expire_date": "2011-07-31 02:02:09", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c885453c4321b1e586c56ce73b7e5c33", "model": "sessions.session", "fields": {"expire_date": "2011-08-01 16:04:04", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "bcc828d56c18bef26215997665e67bce", "model": "sessions.session", "fields": {"expire_date": "2011-08-02 09:51:23", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "43591892e62e9d8b867bbce0d535b159", "model": "sessions.session", "fields": {"expire_date": "2011-08-02 09:51:36", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a09bcf772bb2deb0a1e2844783b79450", "model": "sessions.session", "fields": {"expire_date": "2011-08-02 22:51:28", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b8a23bff16a720ad3b48fd47b460db27", "model": "sessions.session", "fields": {"expire_date": "2011-08-03 02:45:29", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "c89d7cf2e66cd0b55693b9388b72fd5e", "model": "sessions.session", "fields": {"expire_date": "2011-08-06 20:18:26", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "03a50bb543c3d72249a2236be2566d18", "model": "sessions.session", "fields": {"expire_date": "2011-08-08 10:12:20", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "0ff0ac6319a330c8df9d467935a61482", "model": "sessions.session", "fields": {"expire_date": "2011-08-08 16:30:22", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "23f47826ebf52fea4013b0b6d81fbfe8", "model": "sessions.session", "fields": {"expire_date": "2011-08-09 10:05:19", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "a88b9fedeb04fa7c305289574065e70f", "model": "sessions.session", "fields": {"expire_date": "2011-08-10 09:11:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "38866bc9dc49aa31465e1bf21457997f", "model": "sessions.session", "fields": {"expire_date": "2011-08-10 12:42:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "784d7cb694c9e53834e7749d2dc7bcf7", "model": "sessions.session", "fields": {"expire_date": "2011-08-14 21:18:48", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "96419ddbb814143101b1186dc89ce481", "model": "sessions.session", "fields": {"expire_date": "2011-08-17 21:52:19", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES051LjVlNDE2N2ExNTEyN2I5M2NkYTU2\nODA4ZTBjMGViNjBi\n"}}, {"pk": "d07558de2e31c6d3a1fba1a7e1e9fced", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 13:06:29", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESwF1LmQ1OGNjMTE4Nzc3ZDk3ZWI4OTgy\nYjI5N2RmYjM4M2Jj\n"}}, {"pk": "7923bf4125bcfed957b6c5e0e8301638", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 13:37:10", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES091LjNiNDUyM2I3MjQyMzdkYTFkNzk3\nZTEzNTAxZDY5Mzk1\n"}}, {"pk": "e32eee7b8a16217e129cbd2ed4e5079e", "model": "sessions.session", "fields": {"expire_date": "2011-08-21 18:14:59", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES051LjVlNDE2N2ExNTEyN2I5M2NkYTU2\nODA4ZTBjMGViNjBi\n"}}, {"pk": "41936a3c03dbde5e7856fae7278d75c0", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 15:59:49", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEESzx1LjQ4MWRlMzEwMzI2MDI1MTJjY2Q5\nYzdjMjRjNjgwNWI4\n"}}, {"pk": "99095300519a63b503a09b574a7702e0", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 16:41:22", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES1B1LjE4YmRjYmZhNTFjNTMxNmRjMjEz\nYTljNDBiYTc3ZGIx\n"}}, {"pk": "4d52bc465a288149fd2cd6a3f4dcc267", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 20:28:24", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES1B1LjE4YmRjYmZhNTFjNTMxNmRjMjEz\nYTljNDBiYTc3ZGIx\n"}}, {"pk": "482002fe08c283b55463e9ec512c4e8d", "model": "sessions.session", "fields": {"expire_date": "2011-08-19 22:11:22", "session_data": "gAJ9cQEoVQp0ZXN0Y29va2llcQJVBndvcmtlZHEDVRJfYXV0aF91c2VyX2JhY2tlbmRxBFUpZGph\nbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxBVUNX2F1dGhfdXNlcl9pZHEG\nS1F1LmQ2OGM4MzU5MTAyZWJjZjQwZWVhNGEwY2FiZDYxYWJh\n"}}, {"pk": "28d17e20fd7d2da0886e86f600631428", "model": "sessions.session", "fields": {"expire_date": "2011-09-02 06:32:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5494abf9d4feefd7a1ee700faa936b8d", "model": "sessions.session", "fields": {"expire_date": "2011-09-02 08:53:58", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "af32072fce67df32af600b5629179c5b", "model": "sessions.session", "fields": {"expire_date": "2011-08-23 07:06:20", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES1J1LjZkOWE1M2RhMmNiMzBiYzgxOWZj\nMjUwMGNlNDcxNWNk\n"}}, {"pk": "728b72bc8f00ae592364c9f2da1985e5", "model": "sessions.session", "fields": {"expire_date": "2011-08-23 10:24:36", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d1426240b3fb129b0e52f68065057957", "model": "sessions.session", "fields": {"expire_date": "2011-08-25 07:39:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1e1fac3f76f07469e8a721eadf3bbdc8", "model": "sessions.session", "fields": {"expire_date": "2011-08-25 07:39:06", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "8ba30faae1d2384910aaea42607573fd", "model": "sessions.session", "fields": {"expire_date": "2011-08-28 20:09:35", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "efe5fea3e2584392da2e48e33119e4f4", "model": "sessions.session", "fields": {"expire_date": "2011-08-29 08:41:43", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "5237286e79878ba24346ee4a8495efb7", "model": "sessions.session", "fields": {"expire_date": "2011-08-30 10:01:49", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "3c82a0475081f0a2896e6b6bc663a23f", "model": "sessions.session", "fields": {"expire_date": "2011-08-30 17:06:02", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "b031789d92f4bc817b26c98c5b4ce25d", "model": "sessions.session", "fields": {"expire_date": "2011-09-02 23:48:32", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "12bc64231edae1de32ea23175eb5ad35", "model": "sessions.session", "fields": {"expire_date": "2011-09-05 09:42:07", "session_data": "gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEES1N1LmZjNmM4NDA4ZTBjNDYxYmQ0Nzdi\nZDg4MjNkMmEwYzBj\n"}}, {"pk": "b46b3229074f9e4c2d34e3b925c8bedd", "model": "sessions.session", "fields": {"expire_date": "2011-09-09 03:30:55", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "d85f111854cc64018a19dba997d35adf", "model": "sessions.session", "fields": {"expire_date": "2011-09-09 05:47:59", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "92f3d19ab9be78b44c5628c20625109d", "model": "sessions.session", "fields": {"expire_date": "2011-09-09 14:15:56", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "1c94408edd938a68c3ce426c43ad04e1", "model": "sessions.session", "fields": {"expire_date": "2011-09-09 23:51:17", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "50573b8b4dda7ad5f6d0c85de65c370e", "model": "sessions.session", "fields": {"expire_date": "2011-09-12 10:28:09", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "74db471e0c877f26de5169ac6bc70bb8", "model": "sessions.session", "fields": {"expire_date": "2011-09-19 08:28:14", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "f91a624bb437390403e4fc72cd214e61", "model": "sessions.session", "fields": {"expire_date": "2011-09-20 01:33:40", "session_data": "gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjgzMjIyZWI4MmZiMWZlN2I4NzczMjJhYjY0\nZmFlYmE1\n"}}, {"pk": "2c6c180888d0f06735e5ecd6469db955", "model": "sessions.session", "fields": {"expire_date": "2011-12-21 19:39:18", "session_data": "NzdmNDU2OTZiMWQwZGI1YWE2YjI4YWVlMmVjOGNjY2M5NTMzYzg3ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}}, {"pk": "3fcc6b65256a27d994c25d25f1109a4d", "model": "sessions.session", "fields": {"expire_date": "2011-12-31 11:30:25", "session_data": "OTM1ZGViZWE2ZjBmY2E2ZDQ1ZTI3NmI4OWE1MTMwMmRmZDU4YzI0ODqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtWdS4=\n"}}, {"pk": "2647012c639fa268491e30655eceacb8", "model": "sessions.session", "fields": {"expire_date": "2012-01-01 08:14:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "194abdad8d0cbade5a92c24d09a78daa", "model": "sessions.session", "fields": {"expire_date": "2011-12-24 23:50:55", "session_data": "Y2MwNjAxMTYzNGZiZmNhNmUzMzQ4OTJjN2VlOWNhMGFmZGJjZWQxZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtUdS4=\n"}}, {"pk": "a07d3ae7034d2e73ad6cffe571877a6b", "model": "sessions.session", "fields": {"expire_date": "2011-12-25 01:18:15", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "6de4dad2424149fb35a31934a2d36b7b", "model": "sessions.session", "fields": {"expire_date": "2011-12-25 08:23:44", "session_data": "YjhjMzEwOWQyMzEwNDZlZDc0YTA1YjdlNjgzZWYzN2M0NzFlYjYzNDqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVXUu\n"}}, {"pk": "7b08f2333d5a7dcec9fc7150c4a5d189", "model": "sessions.session", "fields": {"expire_date": "2011-12-26 09:53:58", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4cbabcaf7f95183edfce1c14b13d27b5", "model": "sessions.session", "fields": {"expire_date": "2011-12-26 11:41:58", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "7088d4746cb3697d927e038dcdcff1d7", "model": "sessions.session", "fields": {"expire_date": "2011-12-21 20:46:51", "session_data": "OGJhODNmNDU5MjM3N2RhMDNiZWY4NzU1NWIzOGViZjA3MThiMWRiYjqAAn1xAVUKdGVzdGNvb2tp\nZVUGd29ya2VkcQJzLg==\n"}}, {"pk": "fa261c7b0fb57623c551e08dad2f9860", "model": "sessions.session", "fields": {"expire_date": "2011-12-26 11:42:05", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a9c7b03fa7c79f49cd847c51ecd3506f", "model": "sessions.session", "fields": {"expire_date": "2011-12-26 17:57:47", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b03fcc24a681c468f87d28003126d065", "model": "sessions.session", "fields": {"expire_date": "2011-12-26 21:33:59", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "aebd2d64dfb4577e2d16588f85141c46", "model": "sessions.session", "fields": {"expire_date": "2011-12-29 15:54:41", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0483a578ff6c246baa9f3a7cbe4a2c0b", "model": "sessions.session", "fields": {"expire_date": "2011-12-30 12:13:39", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "61bbbdde51cc97f2f6b50d00bee4d63a", "model": "sessions.session", "fields": {"expire_date": "2012-01-02 06:21:54", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a5c028d65267c0ad789072dcbf729be9", "model": "sessions.session", "fields": {"expire_date": "2011-12-22 05:05:35", "session_data": "OGJhODNmNDU5MjM3N2RhMDNiZWY4NzU1NWIzOGViZjA3MThiMWRiYjqAAn1xAVUKdGVzdGNvb2tp\nZVUGd29ya2VkcQJzLg==\n"}}, {"pk": "957526d190859f8bc7b6c9a6946caf62", "model": "sessions.session", "fields": {"expire_date": "2012-01-06 23:16:35", "session_data": "OGJhODNmNDU5MjM3N2RhMDNiZWY4NzU1NWIzOGViZjA3MThiMWRiYjqAAn1xAVUKdGVzdGNvb2tp\nZVUGd29ya2VkcQJzLg==\n"}}, {"pk": "4af5946ebb9d555a93b24fc8653e7453", "model": "sessions.session", "fields": {"expire_date": "2012-01-02 17:17:35", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ffafa9209f856834a969c808181cf26a", "model": "sessions.session", "fields": {"expire_date": "2012-01-02 17:32:02", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "fcf7ba9a66c1f2151e47b64fed9c30ce", "model": "sessions.session", "fields": {"expire_date": "2012-01-02 18:29:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "961273d59c5c39161cbd4c71d432095a", "model": "sessions.session", "fields": {"expire_date": "2012-01-04 21:39:43", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "6c9bd8d6827b789737154fc19eacb778", "model": "sessions.session", "fields": {"expire_date": "2012-01-05 22:29:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "286aac696403f47066781aece42afd83", "model": "sessions.session", "fields": {"expire_date": "2012-01-08 01:25:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "88a62935ad37f7f50adc5a29518d6615", "model": "sessions.session", "fields": {"expire_date": "2012-01-10 14:57:59", "session_data": "NzdmNDU2OTZiMWQwZGI1YWE2YjI4YWVlMmVjOGNjY2M5NTMzYzg3ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}}, {"pk": "ccc5c980fa7c97b2b1a5928f355a58a5", "model": "sessions.session", "fields": {"expire_date": "2012-01-10 17:13:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4e3021c07feda23662e0ddf0bffe2c0e", "model": "sessions.session", "fields": {"expire_date": "2012-01-15 07:40:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "030bbc0741929ecb08d6506165d29f10", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 13:38:36", "session_data": "M2Y5NDUxYjY0MDdlYjBiZDNjYzQ3YjA0M2Y4YTM1MWFlOWU3NDQwMTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLEXUu\n"}}, {"pk": "ccd5d7cd4d510b959f0cb9809776edc1", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 13:53:10", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "1749a60bc2e094ff1c2845b7f901ed99", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 13:53:12", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "3de651fdfafdd76ed8f1a8a73f53ef59", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 14:52:08", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b69ee3e01c5715737ec39c79199bb997", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 14:52:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a34ed0a1dfcf0244dca44107de9ae3fe", "model": "sessions.session", "fields": {"expire_date": "2012-01-22 03:25:19", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "51fd4b88a72ebfab5ff60ffbb51339f8", "model": "sessions.session", "fields": {"expire_date": "2012-01-22 08:07:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4d70d2796b293bfb19bbf59be2982a91", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 14:26:07", "session_data": "MzZmN2EwYTNkNTcxYjYzN2JhMGE1NzFjNzQ2ZDAyMzNiYWNkNGI2YTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUXUu\n"}}, {"pk": "5dd0facbd989b511c470e3e76bfc2c45", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 18:22:07", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "15617a4c6d41c9c5659bedbae5991520", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 18:31:17", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0e0e410f41d2a60a35da3ea0651f534e", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 20:56:23", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "66f763dda6a55e3e40fec365e9ca9f9f", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 21:21:12", "session_data": "MjlmZmM0YjEwMmRjZDM4MTE1MTYzMDJmZmVkOGM5YTBhZDFmMjExODqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLCHUu\n"}}, {"pk": "191d8e5fbe0de45c8d5f0879306c8c96", "model": "sessions.session", "fields": {"expire_date": "2012-01-22 19:14:01", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f9ea6fdbad7499b4dbcc12b72b059d57", "model": "sessions.session", "fields": {"expire_date": "2012-01-22 23:30:38", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "15fbb23517be81218d3b962bcd3c202c", "model": "sessions.session", "fields": {"expire_date": "2012-01-22 23:30:39", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "71e04a6291543213a805a6907278dc92", "model": "sessions.session", "fields": {"expire_date": "2012-01-23 01:27:12", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0b31fd87f32084ddc40566957e777531", "model": "sessions.session", "fields": {"expire_date": "2012-01-18 22:27:11", "session_data": "YjhlOWYwMWY3NTE4NzcyN2YxNDI5MGRmNjM0OGNmNWMwOGZjMDNkNTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLKXUu\n"}}, {"pk": "1b08450da27ddac95fb4742dc527d9b2", "model": "sessions.session", "fields": {"expire_date": "2012-01-19 07:45:13", "session_data": "YjhlOWYwMWY3NTE4NzcyN2YxNDI5MGRmNjM0OGNmNWMwOGZjMDNkNTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLKXUu\n"}}, {"pk": "1247359ec9c622fe4b6a1868f83d0127", "model": "sessions.session", "fields": {"expire_date": "2012-01-23 01:27:17", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "cc046b65c0279b24592f22847fcaec95", "model": "sessions.session", "fields": {"expire_date": "2012-01-19 15:45:44", "session_data": "MzZmN2EwYTNkNTcxYjYzN2JhMGE1NzFjNzQ2ZDAyMzNiYWNkNGI2YTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUXUu\n"}}, {"pk": "41175a0fc0fc8e14c258b835ad552d98", "model": "sessions.session", "fields": {"expire_date": "2012-01-19 19:02:48", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "28b106ce73cdd79284e5a9fbec5383d0", "model": "sessions.session", "fields": {"expire_date": "2012-01-19 23:05:06", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bfd07743c9ad473a6bef6e6c4bf62b0d", "model": "sessions.session", "fields": {"expire_date": "2012-01-20 22:09:02", "session_data": "NmY1MGIwMmM2ZGI2NGM5NzljMmNiNjUwOTNlYjY0MzFhYzExZmM1MDqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLV3Uu\n"}}, {"pk": "d7b6e500871274a66d523551de35d7d2", "model": "sessions.session", "fields": {"expire_date": "2012-01-21 08:57:55", "session_data": "ZmU4NWIzOTYyMjNlYmVkOWFkYWE1MjE1YTg5NjJiMGRkM2YzMDNhNTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUHUu\n"}}, {"pk": "7d9e587a5c757bbb98dc4c7fb1d20c77", "model": "sessions.session", "fields": {"expire_date": "2012-01-23 15:07:51", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "efe4cb0ca16acb7dab39f19889847a1e", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 00:34:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "44c13cb6e1059ebd1a9ba6ef5a8ef750", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 00:34:10", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2a1b230b963855cd44caa032f2f04a9f", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 04:46:13", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f1d60085abc293ce2950dc7da47cad91", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 05:35:39", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b7855ab1abc51ffc3e19b8166be1b792", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 05:35:41", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "30f77fc02fec1c921431c4d99822c764", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 10:33:34", "session_data": "NzdmNDU2OTZiMWQwZGI1YWE2YjI4YWVlMmVjOGNjY2M5NTMzYzg3ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}}, {"pk": "edab9642672be0bb4e158703085ecef7", "model": "sessions.session", "fields": {"expire_date": "2012-01-25 20:09:00", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d61f4d9be7f3f4beb6e3f53a23c7400c", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 10:27:38", "session_data": "MzcwNTY3ZTM1ZGRhMDU5NDNmM2I2ZjU2YWE4ZmU2NjljMjJkNTEyNjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVHUu\n"}}, {"pk": "fa09eec636d2837762bb46d99f944403", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 17:52:16", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f61c9e10c153dfca9e9203d1119dce04", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 18:29:58", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "c989b65e7b71f4a259c582e2e22b276f", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 18:29:59", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "97cf8c11930066664ae963ac99365efa", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 22:31:37", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bc62ff148e0f2821a37158f0ce78338f", "model": "sessions.session", "fields": {"expire_date": "2012-01-26 22:31:38", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "268076f9e00711ab11e93e1228f26abd", "model": "sessions.session", "fields": {"expire_date": "2012-01-27 00:01:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "3326045b1f152af3582b25fb7088b863", "model": "sessions.session", "fields": {"expire_date": "2012-01-28 15:09:59", "session_data": "ZDg4NGU0NWUyMDQ1MWFiZDJmOTQ2MGMyNTdhNzk1MjVjNjJhYTU4YjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtYdS4=\n"}}, {"pk": "2eb3e9ff75b2ff6057498439a23c77fa", "model": "sessions.session", "fields": {"expire_date": "2012-01-28 17:00:07", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ab4fd685f7b92816abd7c1dfa3bc2bad", "model": "sessions.session", "fields": {"expire_date": "2012-02-03 01:25:22", "session_data": "MzZmN2EwYTNkNTcxYjYzN2JhMGE1NzFjNzQ2ZDAyMzNiYWNkNGI2YTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUXUu\n"}}, {"pk": "88eb05b05235f2dd2f1729a7d1b8521b", "model": "sessions.session", "fields": {"expire_date": "2012-02-04 09:08:55", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "acfe1d6fd2713a63f19b48d4b7ce131a", "model": "sessions.session", "fields": {"expire_date": "2012-02-04 09:08:56", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f5431c734424091e43102157cb5b684f", "model": "sessions.session", "fields": {"expire_date": "2012-02-04 19:38:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "787867ea2fe498a67faee2ea8bc0a223", "model": "sessions.session", "fields": {"expire_date": "2012-02-04 19:41:57", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0a3f02f0d5828ef7b40c66313da5d4b7", "model": "sessions.session", "fields": {"expire_date": "2012-02-05 04:20:15", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f4b8047eb3264a493414b32c3be2beb5", "model": "sessions.session", "fields": {"expire_date": "2012-02-05 20:29:14", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "81a08bcec16272af88064c8414f431b2", "model": "sessions.session", "fields": {"expire_date": "2012-02-11 16:54:34", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d42d210e256e7c2bd3da3fa034836c0d", "model": "sessions.session", "fields": {"expire_date": "2012-02-13 20:01:27", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "afe6b1b1d82b825b45eaa49971522328", "model": "sessions.session", "fields": {"expire_date": "2012-02-13 20:01:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "7b4f025f6aecd9520360218ef8631135", "model": "sessions.session", "fields": {"expire_date": "2012-02-14 01:35:20", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "fd50424b123422cab95559fe2007bb8d", "model": "sessions.session", "fields": {"expire_date": "2012-02-14 10:50:14", "session_data": "NTgzZTQ2ZmRhODM3ODZjYjc3MjFmYWVlOWQ2NTEyZDc0ZTY1YzQxZTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLWXUu\n"}}, {"pk": "1f4ec7877e071037a33b0dc464aa5b92", "model": "sessions.session", "fields": {"expire_date": "2012-02-15 14:30:07", "session_data": "YjU3Nzg3ZWNjZTNmMzUwMTliOGI1ZjE5MGRjZjcyNTQ3MzYwMjZlZDqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLWnUu\n"}}, {"pk": "c36e7e16bb732e37fc8940753ff777ce", "model": "sessions.session", "fields": {"expire_date": "2012-02-16 12:19:28", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "01bcf8885eba00ae4b6e70a24c5f9637", "model": "sessions.session", "fields": {"expire_date": "2012-02-17 11:03:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "de97bc752f4dfc162620b8919f5086aa", "model": "sessions.session", "fields": {"expire_date": "2012-02-18 12:19:27", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d9154d512875723f1985a42ab7ff6900", "model": "sessions.session", "fields": {"expire_date": "2012-02-19 07:11:48", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "e2b8410815135986ca778ff05278253b", "model": "sessions.session", "fields": {"expire_date": "2012-02-20 19:03:10", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bb0a1cb00c4d609588d6f001d9019e3b", "model": "sessions.session", "fields": {"expire_date": "2012-02-20 22:46:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "156eb506f2a958f97ffa0ed3464bb38d", "model": "sessions.session", "fields": {"expire_date": "2012-02-21 02:59:34", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4cc7e8a93563eb015c91e643049433de", "model": "sessions.session", "fields": {"expire_date": "2012-02-21 02:59:36", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d95e7d0aa3d0ec788850da17b9016453", "model": "sessions.session", "fields": {"expire_date": "2012-02-22 08:12:28", "session_data": "MzcwNTY3ZTM1ZGRhMDU5NDNmM2I2ZjU2YWE4ZmU2NjljMjJkNTEyNjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVHUu\n"}}, {"pk": "fc424dc6db3c6aeee555a28f7f22500c", "model": "sessions.session", "fields": {"expire_date": "2012-02-22 20:08:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "936443d32f75a6ca5908805ff02ef047", "model": "sessions.session", "fields": {"expire_date": "2012-02-22 20:08:05", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "029c3dd0ae57c4db73a9ab8575cb658c", "model": "sessions.session", "fields": {"expire_date": "2012-02-24 00:22:04", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "c1e9714d9aea2e47f34b86a13dc3cbaf", "model": "sessions.session", "fields": {"expire_date": "2012-02-24 00:43:28", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2139a1934a89ef5a1dbeaef966bd850c", "model": "sessions.session", "fields": {"expire_date": "2012-02-24 00:43:29", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f7758ba8ecfc238689f3d11ba7e4c159", "model": "sessions.session", "fields": {"expire_date": "2012-02-24 22:14:34", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "8dba0b651c2993c092484a0e943dec67", "model": "sessions.session", "fields": {"expire_date": "2012-02-24 22:14:35", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a4c66eadd7a014472a2404cc86052c0a", "model": "sessions.session", "fields": {"expire_date": "2012-02-26 06:55:22", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "e86d0a7927fc590f604b2e1b39f11267", "model": "sessions.session", "fields": {"expire_date": "2012-02-26 14:11:11", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "59e65b0e62e537cb3207614da3f3ca1c", "model": "sessions.session", "fields": {"expire_date": "2012-02-26 14:11:12", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "88d0e01415d87c967f970c5eb606d72e", "model": "sessions.session", "fields": {"expire_date": "2012-02-27 01:30:24", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a7930882a5eaf09304f93e669b3c1d44", "model": "sessions.session", "fields": {"expire_date": "2012-02-27 03:32:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "01527ea12b0d70aaf878e59fc28940bb", "model": "sessions.session", "fields": {"expire_date": "2012-02-27 14:47:33", "session_data": "MzZmN2EwYTNkNTcxYjYzN2JhMGE1NzFjNzQ2ZDAyMzNiYWNkNGI2YTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUXUu\n"}}, {"pk": "d82f64c101b12efd873d4cb525b9dd8f", "model": "sessions.session", "fields": {"expire_date": "2012-02-27 16:59:30", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "8d80331d95ed57b0771af12af7f38025", "model": "sessions.session", "fields": {"expire_date": "2012-02-28 06:05:52", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "6682ca4a706c3fccef9bfac70a30cd2e", "model": "sessions.session", "fields": {"expire_date": "2012-02-28 06:05:53", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9348d167b2e60edaa34b2fbbafcfbe6b", "model": "sessions.session", "fields": {"expire_date": "2012-02-29 16:41:53", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "49e4ac80bac35e79e02f7a43354678b3", "model": "sessions.session", "fields": {"expire_date": "2012-03-01 00:30:16", "session_data": "N2NhMzY2ZjkxZjkyZDMwZTIzMWRjZjk1MDdkZWNmNTA2YTk0NjQxNzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLW3Uu\n"}}, {"pk": "91b0ad126980cb9691e3b475afc3909e", "model": "sessions.session", "fields": {"expire_date": "2012-03-01 23:52:49", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "aa98197013208061ddf939c416c1068e", "model": "sessions.session", "fields": {"expire_date": "2012-03-03 11:47:12", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "246b99f957a23b0f18fe053852565bae", "model": "sessions.session", "fields": {"expire_date": "2012-03-04 07:27:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "050a4d96c992c3efdc1f9fc96d9f008d", "model": "sessions.session", "fields": {"expire_date": "2012-03-04 15:05:21", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d379841034ed63a73064b4d4ce4968e1", "model": "sessions.session", "fields": {"expire_date": "2012-03-05 01:40:32", "session_data": "MzcwNTY3ZTM1ZGRhMDU5NDNmM2I2ZjU2YWE4ZmU2NjljMjJkNTEyNjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVHUu\n"}}, {"pk": "55b90043ec8820464ac64c90138f3968", "model": "sessions.session", "fields": {"expire_date": "2012-03-05 11:27:04", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "e64cf9a1a41f8966c1dae191797d4671", "model": "sessions.session", "fields": {"expire_date": "2012-03-05 19:25:59", "session_data": "MjAwZTI2ZDIzZmYzYTM4ZTM2MDZjMjgxN2VjMDA5OTg2ZGNmZjU3NjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtcdS4=\n"}}, {"pk": "54544f1ad78b5d8f03d1a24dab483c37", "model": "sessions.session", "fields": {"expire_date": "2012-03-06 07:01:43", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "07d63321bdf9bb1ac08d1ffd39f4375b", "model": "sessions.session", "fields": {"expire_date": "2012-03-08 08:15:07", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b4581817e6c5f9d94ffb4afc4af0e6c6", "model": "sessions.session", "fields": {"expire_date": "2012-03-09 19:25:53", "session_data": "ZmU4NWIzOTYyMjNlYmVkOWFkYWE1MjE1YTg5NjJiMGRkM2YzMDNhNTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLUHUu\n"}}, {"pk": "269912f5ab067cb7b8886c89c2917f00", "model": "sessions.session", "fields": {"expire_date": "2012-03-10 13:47:01", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f6fbbf26d0c62f18957ef1583b84225e", "model": "sessions.session", "fields": {"expire_date": "2012-03-10 15:53:13", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0ab7ce431e5e3a4cc4c1e9fc228838b9", "model": "sessions.session", "fields": {"expire_date": "2012-03-11 13:41:44", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "1581c8fc31d88b96266f0caef0379b97", "model": "sessions.session", "fields": {"expire_date": "2012-03-11 15:11:35", "session_data": "MGFjZmQ0ZmM1NDY2N2EyYmZjODZmMjNlN2ZhN2ZiZmI1ZjgzM2YzMDqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtddS4=\n"}}, {"pk": "a002ed676f015aefc4f50e5694863257", "model": "sessions.session", "fields": {"expire_date": "2012-03-11 16:09:54", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "6c8e411b61f98b795f24538008f41713", "model": "sessions.session", "fields": {"expire_date": "2012-03-12 02:06:41", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "65db4a2ffebf2534f96b2bc2782f4934", "model": "sessions.session", "fields": {"expire_date": "2012-03-13 09:24:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "dadf533faabdf04082d5a34ac3d95f57", "model": "sessions.session", "fields": {"expire_date": "2012-03-13 14:43:40", "session_data": "ZWQ2MDg0YzcwYjM4YTJmYWNkY2VmNWM1MTc3NTQxNzIwNmM5MTE0MjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLQXUu\n"}}, {"pk": "1b0c31009eba932c19899ae58388a03a", "model": "sessions.session", "fields": {"expire_date": "2012-03-15 11:07:21", "session_data": "NzdmNDU2OTZiMWQwZGI1YWE2YjI4YWVlMmVjOGNjY2M5NTMzYzg3ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}}, {"pk": "96dc060215708cc4a796c406c8c61d45", "model": "sessions.session", "fields": {"expire_date": "2012-03-15 15:15:57", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "944b484ea47fd55c60e08f4564fda6db", "model": "sessions.session", "fields": {"expire_date": "2012-03-17 17:55:02", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4349ee4085427764a65ab5b164cc7638", "model": "sessions.session", "fields": {"expire_date": "2012-03-19 04:03:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "598effda4e9f5019b3648a0b10918609", "model": "sessions.session", "fields": {"expire_date": "2012-03-20 09:59:36", "session_data": "MzcwNTY3ZTM1ZGRhMDU5NDNmM2I2ZjU2YWE4ZmU2NjljMjJkNTEyNjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVHUu\n"}}, {"pk": "7d9a2031c10c670556f09e41ab937b7e", "model": "sessions.session", "fields": {"expire_date": "2012-03-21 04:08:34", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "c2b1005120140a72c680088b3a181dfd", "model": "sessions.session", "fields": {"expire_date": "2012-03-21 04:08:35", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9a218ba99bfb76fdfecf0f8c5a6d5d8a", "model": "sessions.session", "fields": {"expire_date": "2012-03-22 11:25:20", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "01486d686ea3fbaaa34344cbdf3df38a", "model": "sessions.session", "fields": {"expire_date": "2012-03-23 05:36:30", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f29f3f841bd1594507baf1bc6426db54", "model": "sessions.session", "fields": {"expire_date": "2012-03-25 15:51:16", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "baca5e2060aaec42947902fcdc34537b", "model": "sessions.session", "fields": {"expire_date": "2012-03-26 01:16:23", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "88d9f0d7b4a2666b83064f553d95b1fb", "model": "sessions.session", "fields": {"expire_date": "2012-03-26 05:13:30", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "09e4005c894032c269df2aba39a7fdae", "model": "sessions.session", "fields": {"expire_date": "2012-03-26 05:13:41", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "57571300b4c13480058dd08a7bd251cb", "model": "sessions.session", "fields": {"expire_date": "2012-03-26 12:19:46", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "225592be00b8798a2f7d1f7085248305", "model": "sessions.session", "fields": {"expire_date": "2012-04-18 19:00:26", "session_data": "ZjNkZjU2NTRjNmY0NzUzN2ExMjczZDMzNzY4MDQ1NGU0ZWQ1OTE3ZTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtkdS4=\n"}}, {"pk": "ce29fb74498f0807b692b42f8828a283", "model": "sessions.session", "fields": {"expire_date": "2012-04-12 20:29:52", "session_data": "YmRmYTJiM2NkYTlhZjcxMTMzZjkwZjBjOWVlMTc3NGRhNjRkNTVhNDqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtidS4=\n"}}, {"pk": "03b5e68872dda15fe519c9a548a9f541", "model": "sessions.session", "fields": {"expire_date": "2012-03-26 12:55:04", "session_data": "MGI2MTBkYWFjYWJhOGQ5NzMyNTliMjdhOWY4NGQzNDI1YzczNmIwNzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtedS4=\n"}}, {"pk": "1447ec5d30257526e54380e66c01a469", "model": "sessions.session", "fields": {"expire_date": "2012-03-29 11:37:17", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ed8a330ef4072507db10c49ad6ffa521", "model": "sessions.session", "fields": {"expire_date": "2012-03-29 16:58:05", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b2d70a1e088f8f4728e5a83534578713", "model": "sessions.session", "fields": {"expire_date": "2012-03-29 19:52:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "8fcf220a289370117ce3bb11151e16c5", "model": "sessions.session", "fields": {"expire_date": "2012-03-30 04:48:32", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4cb61d897b46e124a899481b1910fccf", "model": "sessions.session", "fields": {"expire_date": "2012-03-31 01:55:22", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "68f09b6c30b4d643e4d5d28b02673277", "model": "sessions.session", "fields": {"expire_date": "2012-03-31 12:44:26", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "695cf0eb5c698c228601107953915ee8", "model": "sessions.session", "fields": {"expire_date": "2012-03-31 13:46:29", "session_data": "MzcwNTY3ZTM1ZGRhMDU5NDNmM2I2ZjU2YWE4ZmU2NjljMjJkNTEyNjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLVHUu\n"}}, {"pk": "f198609bfff5f2c3295b58d545d661e1", "model": "sessions.session", "fields": {"expire_date": "2012-03-31 17:05:55", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "576ef1c53be6dc748aa731a173124365", "model": "sessions.session", "fields": {"expire_date": "2012-04-01 03:06:41", "session_data": "ZWI3NGYwZGYyZjRjNWEzYTE0NmViNjAzNTE0M2IwNGY3NDllMjM0MjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLX3Uu\n"}}, {"pk": "6ca41f451e960a995b8988d114c07f7a", "model": "sessions.session", "fields": {"expire_date": "2012-04-02 16:52:27", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9ef2ab35425f01042546502bfdf48fc3", "model": "sessions.session", "fields": {"expire_date": "2012-04-03 22:31:36", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "3aa884801360381224e1c489f25935f9", "model": "sessions.session", "fields": {"expire_date": "2012-04-04 03:23:45", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "1f5f67638420413041f28240df9f4040", "model": "sessions.session", "fields": {"expire_date": "2012-04-04 03:23:46", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f18eac991bd9a87fba2769b681e0c80d", "model": "sessions.session", "fields": {"expire_date": "2012-04-07 23:17:51", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "85c6f10209ac05d76519349fec43cbac", "model": "sessions.session", "fields": {"expire_date": "2012-04-08 00:10:16", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "970a4389a5608bfc5accc557498cf348", "model": "sessions.session", "fields": {"expire_date": "2012-04-18 19:40:40", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "61e89781345f42aa345270b103e1985d", "model": "sessions.session", "fields": {"expire_date": "2012-04-08 03:39:02", "session_data": "NmZkZmUxYWUyNTY2NjQwNTA5ZGY1ZDFkYTRkYzdmNGZkYzY3MmQ4YTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtgdS4=\n"}}, {"pk": "fd009eef991860c5e17d9851aee088f9", "model": "sessions.session", "fields": {"expire_date": "2012-04-09 03:52:50", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "45c36419df74c667674b63a1407aa30b", "model": "sessions.session", "fields": {"expire_date": "2012-04-09 09:13:12", "session_data": "ZWI3NGYwZGYyZjRjNWEzYTE0NmViNjAzNTE0M2IwNGY3NDllMjM0MjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLX3Uu\n"}}, {"pk": "473df98f4002359df8f6edb22ba0688e", "model": "sessions.session", "fields": {"expire_date": "2012-04-09 10:45:32", "session_data": "OGM5ZTFkMDE3YmJhN2Q4MGJhZDljYmRlODRkYzA2YmQzYjI5Y2Q4ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLYXUu\n"}}, {"pk": "bba194ec799ca406646d99de40c4921d", "model": "sessions.session", "fields": {"expire_date": "2012-04-09 17:15:26", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2edf97ed1a18e7451c640d3f516a273d", "model": "sessions.session", "fields": {"expire_date": "2012-04-19 00:51:19", "session_data": "MTk4ODVlMjg5YWZjMjk5NjFmZjdmY2JmNjcxYTBiYmEyNTY2YzQ3ODqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLZXUu\n"}}, {"pk": "749ccf52a00ab547e2416c4dcb76db73", "model": "sessions.session", "fields": {"expire_date": "2012-04-14 23:02:49", "session_data": "Y2FmZmY2ZjU4YzcwMTE0ZGQ2ZGYzNTc5Mjc1YjM4Yjk0Mzk4ZGZhODqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtjdS4=\n"}}, {"pk": "8ddb4f5cbb98c8807d08f0e815dca3d9", "model": "sessions.session", "fields": {"expire_date": "2012-04-15 07:15:25", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "16c215d67ce395b304814288f4a90e9b", "model": "sessions.session", "fields": {"expire_date": "2012-04-16 13:10:29", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "58ec8c3a4752925154df76d22a9ead5a", "model": "sessions.session", "fields": {"expire_date": "2012-04-20 20:52:22", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "49f7fb59b5a8f45088742372ae5d5f8c", "model": "sessions.session", "fields": {"expire_date": "2012-04-23 12:03:03", "session_data": "MjQxMDU5MDExNjEzY2NjNTlmZTAyMGUxMjRhNWNiMzk5MmFhMjgwYTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLZnUu\n"}}, {"pk": "1fc8d275985807dca7cc07be7751eb4b", "model": "sessions.session", "fields": {"expire_date": "2012-04-20 20:52:24", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "5bf6d62bccf3e5462d62fa6400b0c549", "model": "sessions.session", "fields": {"expire_date": "2012-04-21 19:10:01", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "6d9c25c55f560d74e341df35b2778e96", "model": "sessions.session", "fields": {"expire_date": "2012-04-22 08:47:26", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "f00bc991377cb67f31bb5fc4382d2c36", "model": "sessions.session", "fields": {"expire_date": "2012-04-22 13:13:21", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d3e69c4afc65d26cefdac00f4b1803a1", "model": "sessions.session", "fields": {"expire_date": "2012-04-23 23:24:36", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "84e838241318c8c476c938d02ec8cfe1", "model": "sessions.session", "fields": {"expire_date": "2012-04-23 23:24:37", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "34382ff3916861abf22ae223a656569c", "model": "sessions.session", "fields": {"expire_date": "2012-04-25 23:23:02", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4836c910081a4bad65267ebaad386275", "model": "sessions.session", "fields": {"expire_date": "2012-04-25 23:23:04", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b43af188f86bdbb6837d5b8a5c35a3dc", "model": "sessions.session", "fields": {"expire_date": "2012-04-26 01:40:40", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "670cd740d400031038b76a7ccc98aa05", "model": "sessions.session", "fields": {"expire_date": "2012-06-10 02:36:48", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "13a8098c57d94fe61e33faf76d52b384", "model": "sessions.session", "fields": {"expire_date": "2012-06-10 22:16:05", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "7fe23985c8e7a1f3bd014da863fcb5bc", "model": "sessions.session", "fields": {"expire_date": "2012-04-26 12:43:46", "session_data": "ZjAxNGFhMTU0OTUxZTEyYWU3NzBiMzdkYTJkODg5MjE2YTAyNGYwMTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtndS4=\n"}}, {"pk": "1f9c9f6f6c3147e55e58c9955e6940b1", "model": "sessions.session", "fields": {"expire_date": "2012-04-26 17:32:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "54316e12195ae412625b36a7181f446a", "model": "sessions.session", "fields": {"expire_date": "2012-04-27 16:49:45", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "5bb246d06b09c7a90ecca12cb96bfb30", "model": "sessions.session", "fields": {"expire_date": "2012-04-27 16:49:47", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2c52969dd5c7c704baacfbe14dedd142", "model": "sessions.session", "fields": {"expire_date": "2012-04-28 09:08:28", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "004a159ed25378bb009e598af99fa866", "model": "sessions.session", "fields": {"expire_date": "2012-04-28 09:08:30", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "cfa48b992a8154a853ffc2dd880f8db8", "model": "sessions.session", "fields": {"expire_date": "2012-04-28 21:22:07", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bfa59b7ee3a5da2b97f7d31522eb0582", "model": "sessions.session", "fields": {"expire_date": "2012-04-29 12:06:17", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "267605696f65b1128103e9c52945faba", "model": "sessions.session", "fields": {"expire_date": "2012-04-29 12:06:18", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9cb99ed41cc2b5f5224ac8a9a65fea58", "model": "sessions.session", "fields": {"expire_date": "2012-04-30 23:08:46", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9b55875f4bc6ae3cab2f08a1f0a66e19", "model": "sessions.session", "fields": {"expire_date": "2012-05-03 22:10:26", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "7d48653472e87c7b42e5712d81ef6aa7", "model": "sessions.session", "fields": {"expire_date": "2012-05-05 21:25:48", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "8e407854aa678585a19cf0c05b2e74df", "model": "sessions.session", "fields": {"expire_date": "2012-05-07 13:26:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "cad0a2aeb4fdf3938b6534909e62cbdd", "model": "sessions.session", "fields": {"expire_date": "2012-06-13 12:54:19", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d8fe91d36abcabeeb0ee409749f60348", "model": "sessions.session", "fields": {"expire_date": "2012-05-07 19:00:07", "session_data": "MDYxNDdmNDY2OGNiMWExMzQzOTg0MjRkMzYxNThiNjBjNmNmZTFkYzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtodS4=\n"}}, {"pk": "81b7fd42cfabf1529fe9c7c9668cb172", "model": "sessions.session", "fields": {"expire_date": "2012-05-08 07:24:23", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "1b5987d96f267e0a3be74fee0b432dbc", "model": "sessions.session", "fields": {"expire_date": "2012-05-08 23:15:34", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "fceb3d13ce1125614efc6eabe02565a6", "model": "sessions.session", "fields": {"expire_date": "2012-05-10 17:11:17", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "187317d39bdae000ee9ae584b5aed270", "model": "sessions.session", "fields": {"expire_date": "2012-06-13 19:40:22", "session_data": "YjFjMDZkODY2MDgwMTA5NTkwOGJlZTgyMjhhOGZkYzkwMTcxMWVhZTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLa3Uu\n"}}, {"pk": "af213ecdb242643596586f5b473dcd39", "model": "sessions.session", "fields": {"expire_date": "2012-06-15 07:47:19", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bae0aaa8618521d22c2662b1ddef4734", "model": "sessions.session", "fields": {"expire_date": "2012-05-10 21:04:27", "session_data": "ODYzZjU4YjVhMjA0MGU2OGQzNzlmNTY2NDZhOGVkY2RjNzBlNWMxNTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZFUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmRxAlUN\nX2F1dGhfdXNlcl9pZEtpdS4=\n"}}, {"pk": "97082c7c5617506f3d131027bff5a673", "model": "sessions.session", "fields": {"expire_date": "2012-05-11 20:24:33", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ef55913dee5ce28f95a44e3fd3d84bac", "model": "sessions.session", "fields": {"expire_date": "2012-05-12 20:47:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "10dc7d109ea3cc25c5e48ef3294e4313", "model": "sessions.session", "fields": {"expire_date": "2012-05-13 10:56:04", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "c1f9df2ac84ac45e67f162fe64c52253", "model": "sessions.session", "fields": {"expire_date": "2012-06-08 12:11:24", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "42587b4d91072ea5d7e276ea3883c97c", "model": "sessions.session", "fields": {"expire_date": "2012-06-09 02:17:37", "session_data": "OGJhODNmNDU5MjM3N2RhMDNiZWY4NzU1NWIzOGViZjA3MThiMWRiYjqAAn1xAVUKdGVzdGNvb2tp\nZVUGd29ya2VkcQJzLg==\n"}}, {"pk": "16eff1c3cc13b911697f6a214784135d", "model": "sessions.session", "fields": {"expire_date": "2012-06-09 08:36:30", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "abaec349c14ceb9ea1e6d17f4a8e3aef", "model": "sessions.session", "fields": {"expire_date": "2012-06-09 14:43:11", "session_data": "MjBlY2JiOTEwNzYyNzdhZWNhZjExNTQyZTk5N2Q4ZGMzOThjYjU5OTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLanUu\n"}}, {"pk": "89282abc07b10a9062cb5f0fa564e36e", "model": "sessions.session", "fields": {"expire_date": "2012-06-09 16:41:47", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "cd7df3eaf5b5eeb3d7b2cc7e3e3b4a2b", "model": "sessions.session", "fields": {"expire_date": "2012-06-10 02:36:45", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "b0045534b2f7e9fd09a875169acbc8ff", "model": "sessions.session", "fields": {"expire_date": "2012-06-15 10:44:48", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9ef305e0b6c7d1940b18d257540b01f9", "model": "sessions.session", "fields": {"expire_date": "2012-06-16 22:58:35", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bdfb117af2ab55c9c45c9ce06a09eda5", "model": "sessions.session", "fields": {"expire_date": "2012-06-17 13:08:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2d5ba4e784703b4660d18b3d480d2584", "model": "sessions.session", "fields": {"expire_date": "2012-06-17 13:08:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "34495226be9af7d3bb2511a37d96b559", "model": "sessions.session", "fields": {"expire_date": "2012-06-17 13:08:10", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "71eb6504b2e4f09da1d6fdef275af37a", "model": "sessions.session", "fields": {"expire_date": "2012-06-18 12:57:46", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ee5a04086fe1c6ae13724e2bb440afbd", "model": "sessions.session", "fields": {"expire_date": "2012-06-18 15:56:18", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4518407a3befce7b77cae257350f34fb", "model": "sessions.session", "fields": {"expire_date": "2012-06-19 13:20:25", "session_data": "NzdmNDU2OTZiMWQwZGI1YWE2YjI4YWVlMmVjOGNjY2M5NTMzYzg3ZjqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLAXUu\n"}}, {"pk": "c832e9e81ff0f9fb6c69fe046a64380a", "model": "sessions.session", "fields": {"expire_date": "2012-06-19 21:51:39", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0a789347c986cbe0334d4c95b4bac9da", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 00:28:41", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "3afd67ce2ab4be85d297ac54d1612cd6", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 00:44:23", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "de8fb055412b5fc77965a6387481e444", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 02:38:04", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2851b742080890a299819a9626edd09a", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 02:38:06", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "4d90a607961f1c5427688305e82f3cca", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 03:52:31", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "dde00581ae0d9ce1e725248759c07a57", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 03:52:32", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "e7040ec45bb85e7dadfc46705a69e2f5", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 07:02:52", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "a3872c17546afc243aaf05768a8db81c", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 07:02:53", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "bab42433b8af3dc1f67dd22ba96b1580", "model": "sessions.session", "fields": {"expire_date": "2012-06-22 20:03:09", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "ca5a18e72b6bd8fd7eeb4897a925b86d", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 19:12:42", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "2ab8d5576219a77b3907758ca53733c4", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 19:12:43", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9bf40a30c6c5c61753c52cc7eb0d7cdb", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 19:37:19", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "9aa96f89b36bd333e45e9383d868ee5d", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 20:15:32", "session_data": "ZGI2MGI1MzI4OGY2NjJjZmQ3Y2M2Njk1YWNjYzEyNDY4ZjRhZmNhNzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLbHUu\n"}}, {"pk": "f2647a05c66f942e582c074524300b8a", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 23:34:23", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "0054204c1d731619aed25a3507fc84d3", "model": "sessions.session", "fields": {"expire_date": "2012-06-24 23:34:24", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "d072b4e0ad380189978743e808320751", "model": "sessions.session", "fields": {"expire_date": "2012-06-25 01:03:14", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "059f20e91f128d6f5c68e2e79dd2e3ad", "model": "sessions.session", "fields": {"expire_date": "2012-06-25 01:03:15", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "5023dafb6b5eceef9b5f71d509ab728b", "model": "sessions.session", "fields": {"expire_date": "2012-06-27 12:37:17", "session_data": "NjFlNTYxMTQ0OWJhYTFiYmVlNWM4MTY1YjYwZTAzNTY2Yzk5OTAyYTqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLbXUu\n"}}, {"pk": "538b70cfabbd9615ebcc9c55d2dd776b", "model": "sessions.session", "fields": {"expire_date": "2012-06-27 23:11:58", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "5a46acbd1b21503ee6009ca7e4706cad", "model": "sessions.session", "fields": {"expire_date": "2012-06-28 12:08:09", "session_data": "ZmE1MmYzYzE3NTAzNjIxOTkwODUyODUwMjhjZTc1NWVhN2Q1M2I4NzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQRLbnUu\n"}}, {"pk": "8a7e9c539e3d40d157819eb4532e0599", "model": "sessions.session", "fields": {"expire_date": "2012-06-28 12:35:03", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": "970bffd4a1847a74b916ffc836548a7b", "model": "sessions.session", "fields": {"expire_date": "2012-06-29 03:09:54", "session_data": "OTlkMWE0YmY0ZTZiNTVmMzQxNzUxMDFiNzljZTZmMmRkYmY3M2I2NDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n"}}, {"pk": 1, "model": "sites.site", "fields": {"domain": "proggitquiz.com", "name": "proggitquiz"}}, {"pk": 1, "model": "south.migrationhistory", "fields": {"applied": "2010-06-10 02:43:50", "app_name": "challenges", "migration": "0001_initial"}}, {"pk": 2, "model": "south.migrationhistory", "fields": {"applied": "2010-06-10 02:43:50", "app_name": "challenges", "migration": "0002_auto__add_field_language_extension"}}, {"pk": 3, "model": "challenges.problem", "fields": {"body": "<pre>\r\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | ...#......##......##### | +-+     +-+=========+-+\r\n                \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7>\u00b7\u00b7| | ..##.....####......#### | |.|  |  |.|         |.|\r\n            ####\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2502 | ###.....#####......#### | |.|     |.+---------+.|\r\n            #   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u00b7\u2500\u2518 | ##....#######......#### | +.|  |  |.|#########|.|\r\n            #            #   | ##...#######....####### | |.|     |.|#::###::#|.|\r\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500.\u2500\u2510 | ##...#######...######## | |.|  |  |.|###[ ]###|.|\r\n \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2502 #   \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2502 | ###...#####....######## | --+     +-------------+\r\n \u2502\u00b7<\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7+#####\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7| | ####...........######## |      |\r\n \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2502     \u2502\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u2502 | ######........######### | - - -+- - - - - - - - -\r\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 | ####################### |\r\n                             | ####################### | ----+======+-----------\r\n</pre>\r\n\r\n### Introduction\r\n\r\nA large part of game development is devoted to \r\ncreating content for players to consume. This includes drawing maps, \r\nwriting stories, and setting goals for players to accomplish.\r\n\r\nThe quality of this content has a large impact on how much the players \r\nend up enjoying the game. Human designers are able to pore over\r\nevery detail, crafting an experience that is sure to be challenging, interesting\r\nand coherent. Unfortunately this process also tends to take a lot of time.\r\n\r\nAs a result, games that have human-designed content may also tend to have a low\r\nreplay value. Once you finish a game, there is little incentive to play it again \r\nif you end up rehashing the same old settings and characters.\r\n\r\nWhat if we could pass off some of this work to computers? While machines lack in\r\ncreativity and common sense, they are able to follow instructions very well.\r\nIf we are able to teach a computer some basic rules about content creation, it\r\nmight be able to craft game experiences that rival the quality human-designed\r\ncontent.\r\n\r\nThe overall goal of this exercise to see how computers fare at the challenges\r\nof map design if they have a competent programmer to teach them the ropes. \r\n\r\n### A: Your Task\r\n\r\nWrite a program that will output a single map of given dimensions. This can be \r\nin any genre. You may want to model your terrain after one of the following:\r\n\r\n - **Maze**: series of winding passages with many forks and dead ends. \r\n - **Dungeons**: large and small rooms, connected by snaking passages.\r\n - **Buildings**: Large spaces, delimited by room partitions and hallways.\r\n - **Caves**: large tunnels and caverns, blending together organically.\r\n - **Cities**: A grid network of roads with buildings spaced between.\r\n - **Landscapes**: Oceans, mountains, valleys and rivers, with smooth height gradients.\r\n \r\nThe map should output a grid (ASCII or an image) that demarcates the various types of terrain. At the\r\nminimum, you should have a different symbol for passable and impassable \r\nterrain.\r\n\r\n### B: Extra Credit\r\n\r\nPlace two distinct points on your map: a starting point, and an ending point. \r\nIn a dungeon this might represent the stairs going up, and the stairs leading\r\nyou deeper into the dungeon. In a landscape it might represent a helicopter \r\ndrop point, and buried treasure. No matter what type of map you generate, you\r\nshould have a place where the player starts, and where the ultimate goal is.\r\n\r\nMake sure:\r\n\r\n - that it is not impossible to reach the goal\r\n - that the goal is not too trivial to reach (try to make the player traverse at least a small portion of your map)\\\r\n - avoid pointless sections of the map. ", "status": 1, "title": "The Dungeons of Proggit", "started": "2010-06-06", "completed": "2010-07-01", "author": 1, "created": "2010-06-06", "difficulty": 5, "output": "", "input": "", "preamble": "Go forth, my liege, and build ye a procedural map generator. Your algorithm must create a playable dungeon map in the the style of rouge and nethack.", "example": ""}}, {"pk": 1, "model": "challenges.problem", "fields": {"body": "The basic syntax for this notation is \"XdY\" where X\r\nis the number of dice and Y is the faces on each die. These rolls can be futher\r\nmodified using basic arithmetic operators such as \"+\" and \"*\" for addition an\r\nmultiplication, respecively. Here are some examples:\r\n\r\n* \"1d20\" means roll one 20-sided die\r\n* \"3d6+10\" means roll 3 6-sided dice (summing the totals) and add 10 to the result\r\n* \"4*d100\" means roll a 100-sided die and multiply the result by 4\r\n\r\nYour task to create a program that can example a dice notation expression as\r\nan input, and generate a usable result.\r\n\r\nIt should at least accept the following syntaxes:\r\n\r\n* \"3d6\" roll 3 6-sided die (summing the total)\r\n* \"2d4+10\" roll 2 4-sided die and add 10\r\n* \"d20\" roll 1 20-sided die (the 1 is implied if not provided) \r\n* \"3*4d6\" roll 4 six-sided die and multiply the result by 3\r\n* \"d10 * d10\" roll 2 10-sided dice and multiply the result \r\n\r\nExtra credit:\r\n\r\n1. Also accept subtraction \"-\" and division \"/\" operators\r\n\r\n2. Support \"keep\" syntax as well. This will allow you to specify whether to\r\n   keep or discard certain dice rolls. This takes the form XdYkZ, where X is\r\n   number of dice to roll, Y is the number of faces, and Z is how many dice\r\n   to keep. If this notation is used, you should keep the \"best\" dice, which\r\n   means you get rid of the lowest rolls first. For example:\r\n   \"4d6k3\" means roll 4 six-sided dice, keeping the best 3. If the rolls \r\n   turned up as 1,3,4,5 you would discard the 1, and the total would be 12.\r\n\r\n3. Also accept parenthes \"()\" for operator precedence. Example: \"(1d20+3)*5\"\r\n\r\n4. Allow the result of die rolls to be used as parameters in subsequent rolls\r\n   For instance: \"(d20)d6\" means to roll a d20, and use the result to specify\r\n   how many six-sided die to roll.\r\n\r\n5. Write an analyzer to determine the probability of each result from a given\r\n   dice notation experession :)", "status": 3, "title": "Dice Notation", "started": "2010-01-06", "completed": "2010-01-07", "author": 1, "created": "2010-06-06", "difficulty": 3, "output": "", "input": "", "preamble": "In role-playing games, there is often a need to resolve the outcome of actions \r\nusing random numbers. In tabletop games, this is usually accomplished by using\r\na variety of dice. The number and type of dice are often specified by using a\r\ntype of \"dice notation\".", "example": ""}}, {"pk": 4, "model": "challenges.problem", "fields": {"body": "You are the overworked and cruely under-baconed city planner. The powers that \r\nbe have called upon you to select the optimal street corners for each \r\ndispenser.\r\n\r\nGiven an *n* by *m* graph of the city that shows the locations of the *p* \r\nlargest population centers of the city, you need to decide where each of *b*\r\ndispensers should be placed so that the *total* distance between each\r\npopulation center and its closest bacon-dispenulator is the shortest.\r\n\r\nThe two rules are that you can't place a dispenser on the same graph location\r\nas a population center, and that distance should be calculated using \r\n[Taxicab Geometry][1] rather than straight Euclidean distance. (**tldr**: residents\r\nare only able to move vertically and horizontally along the graph, never \r\ndiagonally.)\r\n\r\n[1]: http://en.wikipedia.org/wiki/Taxicab_geometry\r\n\r\n### Example\r\n\r\nA 8&times;8 graph containing 6 population centers, with 3 bacon dispensers to\r\ndeploy.\r\n\r\n![Example Probem](http://imgur.com/wxqlz.png)\r\n\r\nGiven this graph, you might select the following locations for the bacon\r\ndeployment. If we calulate the distance for each population center, we get a shortest possible total \r\ndistance of 10, because 3+2+2+1+1+1 = 10.\r\n\r\n![Example Solution](http://imgur.com/9gQbe.png)\r\n\r\n", "status": 3, "title": "Bacon Graph", "started": "2010-07-09", "completed": "2010-07-17", "author": 1, "created": "2010-07-09", "difficulty": 9000, "output": "### Output\r\n\r\nYour program should output the combined shortest distance of all of the population centers. \r\nAdditionally, it should output X Y coordinates of each of the bacon dispenulators.\r\n\r\nGood luck!\r\n\r\nThanks Chronicler for pointing out an error in the original example!", "input": "### Instructions\r\n\r\nWrite a program that is able to solve the following sample graphs, along with\r\nany similar graph given a *n* by *m* graph with *p* population centers and\r\n*b* bacon dispensers available.\r\n\r\nThe first line of the data format is \"**n**x**m** **b**\", where **n** is width,\r\n**m** is height and **b** is the bacon dispensers available to you. The following \r\nlines are a representation of the graph where *P* represents a population center\r\nand a period (*.*) represents an empty space where dispensers may be deployed.\r\n\r\nYou may [download more samples here](http://proggitquiz.com/samples/4.tgz), \r\nalong with a python script to generate more.\r\n\r\n### Small Sample\r\n\r\n<code><pre>\r\n8x8 3\r\n........\r\n........\r\n....PP..\r\n........\r\n...P....\r\n........\r\n.PP.P...\r\n........\r\n</pre></code>\r\n\r\n### Medium Sample\r\n\r\n<code><pre>\r\n16x16 5\r\n...........P....\r\n...........P....\r\n..............PP\r\n................\r\n................\r\n................\r\n................\r\n................\r\n...............P\r\n.P..............\r\n....P...........\r\n................\r\n..P.............\r\n................\r\n........P.......\r\n...........P....\r\n</pre></code>\r\n\r\n### Large Sample\r\n\r\n<code><pre>\r\n32x32 10\r\n.....................P..........\r\n.......P...........P............\r\n.........................P......\r\n................................\r\n................................\r\n.P.................P............\r\n.................P..............\r\n................................\r\n................................\r\n...................P............\r\n................................\r\n.PP.............................\r\n................................\r\n................................\r\n................................\r\n................................\r\n.......P..P.....................\r\n................................\r\n................................\r\n................................\r\n....P...........................\r\n..............P....P............\r\n..........P...........P.........\r\n................................\r\n................................\r\n.......P.......................P\r\n................P...............\r\n................................\r\n................................\r\n................................\r\n................................\r\n................................\r\n</pre></code>", "preamble": "New Graph City, a bustling metropolis, is planning on adding some new bacon \r\ndispensers to serve the residents. You see, the citizens of NGC have developed\r\nan insatiable addiction to bacon as part of a government plot to control the \r\npopulation with delicious breakfast foods.", "example": ""}}, {"pk": 2, "model": "challenges.problem", "fields": {"body": "### Background\r\n\r\nA message is encoded using a random 1-to-1 substitution cipher.\r\n\r\nExample substitution cipher:\r\n\r\n<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n||||||||||||||||||||||||||\r\nYVTFMECWSODXRZLHBAKIQGJPUN</code></pre>\r\n\r\nEncode the message by substituting each letter with the letter on the other side.  For example, the letter A maps to Y.  K maps to D.\r\nTHE POWER GLOVE IS SO BAD maps to IWM HLJMA CXLGM SK KL VYF.\r\n\r\n### Goal\r\n\r\nYou will receive a variety of messages encoded using a substitution cipher.  Your goal is to figure out what that substitution cipher is so that you can decode the message.  The problem is easy, but the solution can be as simple or as complex as you'd like.  At the end of it, this programming contest should show you how you approach your code and your solutions, whether you are truly a master developer, a Mr. Vaporware, a brute force tactician, a bottom-up developer, or just a pretender (among other possibilities.)  Good luck! \r\n\r\n### Rules\r\n\r\nSubmit a program, in any language, that opens an encoded message file and outputs the decoded message along with a human-readable cipher that can be used to decode the message.\r\nSample output from THE POWER GLOVE IS SO BAD MESSAGE ABOVE might look like the following:\r\n\r\n<pre><code>INPUT:   IWM HLJMA CXLGM SK KL VYF\r\nOUTPUT:  THE POWER GLOVE IS SO BAD\r\n\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n||||||||||||||||||||||||||\r\nYVTFMECWSODXRZLHBAKIQGJPUN</code></pre>\r\n\r\n* You do not have to output values for characters that do not exist in the message.  A simple ? or other notifier will suffice.  If you are unable to decode all of the characters in the message, output ? or some other notifier in place of characters you can't figure out.\r\n\r\n* You may use external data files as long as they contain data that is not related to the encoded messages in this contest.  Allowed files would be:  a list of the all the words in the English language, a list of letter frequencies in the English language, a list of commonly used English words, etc.\r\n\r\n* Some messages may be more difficult to decode than others.  It is acceptable to submit a program that works on most of the messages or decodes them in such a way that they are close to the original intent.\r\n\r\n* Your program may take no longer than 10 MINUTES of time per message.\r\n\r\n[Download](http://docs.google.com/leaf?id=0BwopxtP7dMhHZWFmZjNiMDgtODg3My00NTMwLThmNmUtMzQ1ZjliNGY4MTFh&hl=en) all 5 messages in .txt form along with a list of valid English words.\r\n", "status": 3, "title": "Decoder Ring", "started": "2010-05-01", "completed": "2010-05-28", "author": 68, "created": "2010-04-11", "difficulty": 3, "output": "", "input": "### Message 1\r\n\r\n<code>HY IBY XYAXWY AQ IBY FCGIYP NIEIYN, GC ASPYS IA QAST E TASY XYSQYLI FCGAC, YNIEKWGNB JFNIGLY, GCNFSY PATYNIGL ISECZFGWGIO, XSAVGPY QAS IBY LATTAC PYQYCLY, XSATAIY IBY RYCYSEW HYWQESY, ECP NYLFSY IBY KWYNNGCRN AQ WGKYSIO IA AFSNYWVYN ECP AFS XANIYSGIO, PA ASPEGC ECP YNIEKWGNB IBGN LACNIGIFIGAC QAS IBY FCGIYP NIEIYN AQ ETYSGLE. </code>\r\n\r\n### Message 2\r\n\r\n<code>UQRC CHFH WLKFI FIHKIRP FRCPLCO DM HFIKNCHDIF, IQRZ JDLXSGZ PLFXNTRKRP IQHI VHGGMNLCI MRCF UNDGP CNI UNKS LC BRKN OKHTLIZ. IN XNEVHI IQR MKNVGRE, CHFH FXLRCILFIF FMRCI H PRXHPR HCP $12 VLGGLNC IN PRTRGNM H MRC IQHI UKLIRF LC BRKN OKHTLIZ, DMFLPR PNUC, DCPRKUHIRK, NC HGENFI HCZ FDKWHXR LCXGDPLCO OGHFF HCP HI IREMRKHIDKRF KHCOLCO WKNE VRGNU WKRRBLCO IN 300 X. IQR KDFFLHCF DFRP H MRCXLG.</code>\r\n\r\n### Message 3\r\n\r\n<code>N JEYEQNA YKLRWEO KYE KV BRC CKAOREQC FEBNDRYJ KOOAG. LBE CKAOREQ HKIAO ZRWS IZ NYG ZREWE KV ZNZEQ BE VKIYO, VQKHY NYO CNG: \u201cLBNL\u2019C YKL RL\u201d NYO ZIL RL OKHY NJNRY. LBRC HEYL KY VKQ CKUE LRUE, IYLRA LBE JEYEQNA NQQNYJEO LK BNDE LBE CKAOREQ ZCGWBKAKJRWNAAG LECLEO. LBE ZCGWBKAKJRCL WKYWAIOEO LBNL LBE CKAOREQ HNC OEQNYJEO, NYO HQKLE KIL BRC ORCWBNQJE VQKU LBE NQUG. LBE CKAOREQ ZRWSEO RL IZ, CURAEO NYO CNRO: \u201cLBNL\u2019C RL.\u201d</code>\r\n\r\n### Message 4\r\n\r\n<code>THIS IS NOT EVEN ENCODED OR ENCRYPTED IN ANY CONSIDERABLE FASHION. IT SHOULD JUST FIGURE IT OUT. PURPLE MONKEY DISHWASHER CONSTITUTIONALLY LET US SEE WHAT HAPPENS IF IT IS PUT THROUGH THE PROGRAM </code>\r\n\r\n### Message 5\r\n\r\n<code>URYYB GUVF VF N GRFG BS GUR RZRETRAPL OEBNQPNFGVAT FLFGRZ! GURER VF AB JNL GUNG GUVF JVYY OR QRPBQRQ VZZRQVNGRYL! VG VF NA HASBEGHANGR PBAFRDHRAPR GUNG GUR EBGNGVBA OL GUVEGRRA VF HFRQ. </code>", "preamble": "Remember those decoder rings that you'd get in cereal boxes as a kid?  Those were 1-to-1 substitution ciphers.  They let you encode and decode messages so that your bratty friends/siblings couldn't eavesdrop on your secrets.", "example": ""}}, {"pk": 7, "model": "challenges.problem", "fields": {"body": "<b>Write two functions:</b>\r\n\r\n1. A method that will take a Roman numeral string as input and output an integer representing the value of that Roman numeral. <pre><code>\r\n        <b>Examples:</b>\r\n        \"X\" -> 10\r\n        \"XXIX\" -> 29\r\n        \"XXXV\" -> 35\r\n</code></pre>\r\n\r\n2. A method that will take an integer <= 3999 as input and output that number represented as a Roman numeral. Examples:<pre><code>\r\n       <b>Examples:</b>\r\n        10 -> \"X\"\r\n        13 -> \"XIII\"\r\n        52 -> \"LII\"\r\n</code></pre>\r\n\r\n[Roman Numerals](http://en.wikipedia.org/wiki/Roman_numerals#Reading_Roman_numerals) on Wikipedia\r\n\r\nWe'll run the challenge until 3AM Pacific time on Saturday, so get your entries in. Points for style and creativity! Thanks to quanticle for the submission!", "status": 3, "title": "Roman Numerals Mini Challenge", "started": "2011-08-05", "completed": "2011-08-06", "author": 79, "created": "2011-08-05", "difficulty": 37, "output": "", "input": "", "preamble": "This challenge is all about Roman Numerals! While chatting about software interviews on IRC, someone recounted being asked to convert between roman and arabic up on the whiteboard. Let's see how everyone else does.", "example": ""}}, {"pk": 5, "model": "challenges.problem", "fields": {"body": "For instance, we can transform \"scale\" into \"cloud\" in 14 steps:\r\n\r\n    scale\r\n    scare\r\n    share\r\n    shard\r\n    chard\r\n    chart\r\n    chert\r\n    cheat\r\n    cleat\r\n    bleat\r\n    bloat\r\n    float\r\n    flout\r\n    clout\r\n    cloud\r\n    14\r\n\r\n", "status": 3, "title": "Word Ladders Mini Challenge", "started": "2010-10-22", "completed": "2010-10-29", "author": 60, "created": "2010-10-22", "difficulty": 42, "output": "### Program 1. \r\n\r\nGiven any two valid five-letter words, generate a shortest possible\r\nword ladder between them. Your program should produce output similar to the \r\nexample above. Each step in the ladder, including the source and target words, \r\nshould be printed on a single line, followed by the number steps required to \r\nreach the goal. If there is no possible path, you should output the source word\r\non the first line, and 0 on the second.\r\n\r\n### Program 2. \r\n\r\nGiven any single valid five-letter word as a starting point, find \r\nthe word in the dictionary that represents the end-point of the longest word ladder that you can build without visiting the same word twice. Your program should produce the same type of output as the first problem.\r\n\r\n### Downloads\r\n\r\nPlease download the following word file to use as your [dictionary](http://dl.dropbox.com/u/6314490/words.txt).\r\n\r\nThanks to Chronicler for the submission!", "input": "", "preamble": "There are nearly 6000 five-letter words in the English language. For two given\r\nwords in the dictionary, we can transform one into the other using a word \r\nladder, where a single letter is changed at a time and all intervening steps \r\nare also valid english words.\r\n", "example": ""}}, {"pk": 6, "model": "challenges.problem", "fields": {"body": "You and your family trek through the wilderness and find the perfect section of unclaimed land. **Ninety-one acres** of fertile martian soil with all of the resources you will need to survive the harsh winters for the next few years as you construct your homes and livelihood. Only one problem. Another family has laid claim to the same tract of land!\r\n\r\nAccording to the Martian Homestead Act of 2135, the rules to settle this deadlock are clear. The land in question shall be divided into thirteen chunks and each chunk shall be bid upon by the two families to determine who owns it.\r\n\r\n<img src=\"http://i.imgur.com/wVakf.png\" style=\"float:right; width: 400px;\">\r\n\r\n\tA. 1 acre   \r\n\tB. 2 acres \r\n\tC. 3 acres \r\n\tD. 4 acres \r\n\tE. 5 acres \r\n\tF. 6 acres \r\n\tG. 7 acres \r\n\tH. 8 acres \r\n\tI. 9 acres \r\n\tJ. 10 acres\r\n\tK. 11 acres\r\n\tL. 12 acres \r\n\tM. 13 acres \r\n\r\n<br style=\"clear: both;\"/>\r\n\r\nEach family is given thirteen bargaining chips numbered 1 to 13. In *random* order, each chunk will be presented one at a time for bidding. Each family must then **select and discard** one of their bargaining chips to place their bid. Whoever played the higher chip wins that section. The bidding process continues until all the land has been divvied up. If both families bid the same amount, each receives half the land in that chunk.\r\n\r\nYour goal is to write an AI program that will allow you to claim more land than your rival.", "status": 1, "title": "13 Plots AI (aka Martian Goofspiel)", "started": "2011-06-17", "completed": null, "author": 1, "created": "2011-06-17", "difficulty": 2, "output": "### Output\r\n\r\nYour program will then have 2 seconds to respond. The response should be a single line with a number representing the value of the bargaining chip you'd like to play for that turn.\r\n\r\nAfter your bid has been received by the host program it will output one line containing a space separated list of bids of your rivals in the following format: \r\n\r\n\topp [bid value] [bid value...]\r\n\t\r\nFor example: a line reading **opp 8** would indicate that on the last turn, your rival bid his 8 chip. It is up for your own program to interpret this and decide who won the bid and how much land you have accumulated.", "input": "### Input\r\n\r\nYour program should read the game state from stdin and output bids to stdout. Each turn the host program will pipe one line to your stdin in the following format:\r\n\r\n\tturn [num] [land value]\r\n\r\nFor example: **turn 1 9** would mean that on the first turn, the 9 acre chunk of land is being bid on.", "preamble": "The year is 2137. After the successful colonization and terraforming of the planet Mars, the newly formed Martian government is ready to grant tracts of land to the newly arriving colonists.\r\n", "example": ""}}, {"pk": 8, "model": "challenges.problem", "fields": {"body": "### Introduction to Boggle\r\n\r\nIn the game of [Boggle](http://en.wikipedia.org/wiki/Boggle), the main idea is that you find words by starting with any letter and constructing a chain by moving to any of the letter's eight neighbors. You cannot use a letter more than once in a single chain, but you may reuse letters for other words.  For instance, you can find the word SUPER like so:\r\n\r\n![Boggle](http://www.boggled.org/sample.gif)\r\n\r\nOther possible words might include TURN, HIP, HIPS and KELP.  For every dictionary word identified within the grid, score 1 point per letter.  For example, scoring the aforementioned words would net SUPER (5) + TURN (4) + HIP (3) + HIPS (4) + KELP (4) for 20 points.\r\n\r\n### The Problem\r\n\r\nThe goal of this particular challenge is to solve this problem in reverse. That is, given a **dictionary** of acceptable words, create a 4&times;4 grid of letters in such a way to maximize the number of points. Only words found in the dictionary may be scored, and each word may only be scored once. If the list of words were HASKELL, PYTHON, LISP and PERL, an acceptable grid would be:\r\n", "status": 3, "title": "Reverse Boggle Challenge", "started": "2012-01-04", "completed": "2012-01-22", "author": 1, "created": "2011-12-08", "difficulty": 96, "output": "### Output\r\n\r\nThe program you create will output a 4&times;4 grid in such a format that:\r\n\r\n1. **The output contains four lines.**\r\n2. **Each line is an ascii string of 4 characters representing the rows of the grid in order.**\r\n\r\nAn example output given the above dictionary:\r\n\r\n    PKSP\r\n    EIAY\r\n    RLTH\r\n    LZNO\r\n\r\n### Resources\r\n\r\n- Test Cases: [View](https://gist.github.com/42b9768abb8942537f00) - [Download](https://gist.github.com/gists/42b9768abb8942537f00/download)\r\n- score.py: [View](https://gist.github.com/6e5a6e396b109459388f) - [Download](https://gist.github.com/gists/6e5a6e396b109459388f/download) | Useful for checking your score, requires python.", "input": "### Input\r\n\r\nYour program should accept a list of words as standard input. This will be the dictionary. The dictionary is in a format such that:\r\n\r\n1. **It is an ascii text file, with unix line endings (\\n).**\r\n2. **First line is a single positive integer *n*.**\r\n3. **the next *n* lines will be words, one per line. Make sure your program is case-insensitive.**\r\n\r\nAn example dictionary:\r\n\r\n    4\r\n    HASKELL\r\n    PERL\r\n    PYTHON\r\n    LISP", "preamble": "Boggle is a game where given a 4&times;4 grid of random letters, you are asked to identify as many words as you can by chaining letters together. This problem is about writing a *reverse* Boggle solver.", "example": "![Reverse Boggle](http://i.imgur.com/0ckWm.png)\r\n\r\nThis grid contains all the words, so it scores the maximum number of possible points, which is 21. The list of words will typically be larger than the available space in the grid. In that situation, your task is to create a grid that maximizes the score.\r\n\r\n**Clarification**: Any particular word in the dictionary can only be scored once, even if it takes different paths to create.  In the above grid, PERL can be made in two ways, but can only be scored once.\r\n\r\n**Clarification**: The letters used in the grid DO NOT need to follow the same distribution of the physical Boggle game. You may use any single letter in any position. This also means that there is no combined \"Qu\" tile as in the actual game. Q and U must occupy separate spaces."}}, {"pk": 9, "model": "challenges.problem", "fields": {"body": "### Problem\r\nRecently, news hit that a [4 coloring 17x17 grid](http://mathlesstraveled.com/2012/02/09/17x17-4-coloring-with-no-monochromatic-rectangles/) was solved.\r\n\r\nAn X by Y grid is N-colorable if there is a way to N-color the vertices of the X by Y grid so that there are no rectangles having four corners of the same color.\r\n\r\nThis challenge is to create a computer solution that will solve some arbitrary X by Y grid in N colors.\r\n\r\n### Example\r\nUsing numerals to represent the vertices of a grid, the following 3x3 grid is 2-colorable:\r\n\r\n![good grid](http://i.imgur.com/3rUAG.png)\r\n\r\nHowever, the following 3x3 grid (colors represented by letters) is NOT 2-colorable:\r\n\r\n![bad grid](http://i.imgur.com/Gb5G2.png)\r\n\r\nThat is because there exists a rectangle (marked with green line) with four corners of the same color:\r\n\r\n![bad grid explained](http://i.imgur.com/72JSf.png)\r\n\r\n### Difficulty\r\nIt took some smart folks a long time to solve 4-color 17x17.  Our goal for proggitquiz is to to target 4-color 8 x 8 (a case that is known to be 4-colorable).\r\n\r\nIf that task is too daunting, you can try either a smaller grid (say, 5x5) or fewer colors.  If our proggitquiz is too easy, you can attempt the harder grids (please consult [this .pdf](http://www.cs.umd.edu/~gasarch/BLOGPAPERS/17x17chart.pdf) for the known 4-colorable grids).\r\n\r\nIf you really want to aim high, it is still unknown whether a solution exists for 4-color 12x21!\r\n\r\n### Solution checker\r\nCheck your solutions using this [python gist](https://gist.github.com/1821805).\r\n\r\n### Resources\r\n  * [HN discussion about problem](http://news.ycombinator.com/item?id=3582881)\r\n  * [Online widget to play challenge in browser](http://www.martinschweitzer.com/squaregame.html)\r\n  * [Original 17x17 prize announcement](http://blog.computationalcomplexity.org/2009/11/17x17-challenge-worth-28900-this-is-not.html)\r\n\r\n### Clarification\r\nThis is NOT the same N-color problem as used in the [Four Color Theorem](http://en.wikipedia.org/wiki/Four_color_theorem).   That problem relates to having contiguous areas such that no two adjacent area has the same color.  In this problem, you are allowed to have adjacent grid blocks of the same color, all that matters is the corner of any rectangle you can impose within the grid.", "status": 3, "title": "N-coloring grid with no monochromatic rectangles", "started": "2012-02-13", "completed": "2012-02-29", "author": 81, "created": "2012-02-13", "difficulty": 0, "output": "", "input": "", "preamble": "Assign one of N colors to a X by Y grid such that there are no monochromatic rectangles within that grid.", "example": ""}}, {"pk": 10, "model": "challenges.problem", "fields": {"body": "<img src=\"http://i.imgur.com/gxZvT.png\" width=\"540\">", "status": 1, "title": "Perfect Tic Tac Toe AI", "started": null, "completed": null, "author": 1, "created": "2012-06-05", "difficulty": 65536, "output": "", "input": "", "preamble": "Hello.", "example": ""}}, {"pk": 1, "model": "challenges.language", "fields": {"name": "Actionscript", "extension": "as"}}, {"pk": 2, "model": "challenges.language", "fields": {"name": "Ada", "extension": "ada"}}, {"pk": 3, "model": "challenges.language", "fields": {"name": "Assembly", "extension": "asm"}}, {"pk": 4, "model": "challenges.language", "fields": {"name": "C", "extension": "c"}}, {"pk": 6, "model": "challenges.language", "fields": {"name": "C#", "extension": "cs"}}, {"pk": 5, "model": "challenges.language", "fields": {"name": "C++", "extension": "cpp"}}, {"pk": 7, "model": "challenges.language", "fields": {"name": "Clojure", "extension": "clj"}}, {"pk": 8, "model": "challenges.language", "fields": {"name": "Cobol", "extension": "cbl"}}, {"pk": 9, "model": "challenges.language", "fields": {"name": "ColdFusion", "extension": "cfm"}}, {"pk": 10, "model": "challenges.language", "fields": {"name": "D", "extension": "d"}}, {"pk": 11, "model": "challenges.language", "fields": {"name": "Delphi", "extension": "dpr"}}, {"pk": 12, "model": "challenges.language", "fields": {"name": "Erlang", "extension": "erl"}}, {"pk": 35, "model": "challenges.language", "fields": {"name": "Flex", "extension": "l"}}, {"pk": 13, "model": "challenges.language", "fields": {"name": "Forth", "extension": "4th"}}, {"pk": 14, "model": "challenges.language", "fields": {"name": "Fortran", "extension": "f"}}, {"pk": 15, "model": "challenges.language", "fields": {"name": "Haskell", "extension": "hs"}}, {"pk": 16, "model": "challenges.language", "fields": {"name": "Java", "extension": "j"}}, {"pk": 17, "model": "challenges.language", "fields": {"name": "Javascript", "extension": "js"}}, {"pk": 19, "model": "challenges.language", "fields": {"name": "Lua", "extension": "lua"}}, {"pk": 20, "model": "challenges.language", "fields": {"name": "Objective C", "extension": "m"}}, {"pk": 21, "model": "challenges.language", "fields": {"name": "OCaml", "extension": "ml"}}, {"pk": 22, "model": "challenges.language", "fields": {"name": "Pascal", "extension": "pas"}}, {"pk": 24, "model": "challenges.language", "fields": {"name": "Perl", "extension": "pl"}}, {"pk": 25, "model": "challenges.language", "fields": {"name": "PHP", "extension": "php"}}, {"pk": 23, "model": "challenges.language", "fields": {"name": "Python", "extension": "py"}}, {"pk": 26, "model": "challenges.language", "fields": {"name": "Rexx", "extension": "exc"}}, {"pk": 27, "model": "challenges.language", "fields": {"name": "Ruby", "extension": "rb"}}, {"pk": 28, "model": "challenges.language", "fields": {"name": "Scala", "extension": "sca"}}, {"pk": 29, "model": "challenges.language", "fields": {"name": "Scheme", "extension": "smd"}}, {"pk": 30, "model": "challenges.language", "fields": {"name": "Shell", "extension": "sh"}}, {"pk": 31, "model": "challenges.language", "fields": {"name": "Smalltalk", "extension": "sm"}}, {"pk": 32, "model": "challenges.language", "fields": {"name": "Tcl", "extension": "tcl"}}, {"pk": 34, "model": "challenges.language", "fields": {"name": "Vala", "extension": "vala"}}, {"pk": 33, "model": "challenges.language", "fields": {"name": "Visual Basic", "extension": "vb"}}, {"pk": 1, "model": "challenges.solution", "fields": {"language": 23, "title": "sixthgear dice", "author": 1, "submitted": "2010-06-09", "source": "\"\"\"\r\nSimple python dice module.\r\n\"\"\"\r\n\r\nimport random\r\n    \r\ndef roll(faces, dice=1, keep=0):\r\n    \"\"\"\r\n    Perform a simple dice roll, summing the totals.\r\n    ---\r\n    faces: the number of faces on each die\r\n    dice: the number of dice to roll\r\n    keep: how many dice to keep (discarding the lowest dice first)\r\n          a value of 0 will keep all dice (default)\r\n    \"\"\"\r\n    rolls = [random.randrange(faces)+1 for d in range(dice)]\r\n    if keep:\r\n        rolls.sort(reverse=True)\r\n        rolls = rolls[:keep]\r\n    return sum(rolls)\r\n    \r\ndef dice(expression):\r\n    \"\"\"\r\n    The dice generator takes a standard dice notation expression, and returns a \r\n    generator object that will generate a new roll on every iteration.\r\n    ---        \r\n    Example inputs:\r\n    '3d6+12'  : roll 3 six-sided dice (summing the results) and add 12.\r\n    '4*d12+3' : roll 1 twelve-sided die, multiply the result by 4 and add 3.\r\n    'd100'    : roll 1 100-sided die.\r\n    '4d6k3'   : roll 4 six-sided dice, keep the best 3 rolls.\r\n    \"\"\"\r\n    \r\n    def parse(expression):\r\n        expression = expression.replace('-','+-')\r\n        terms = []        \r\n        for t1 in expression.split('+'):        \r\n            mterms = []\r\n            for t2 in t1.split('*'):\r\n                # check for dice expressions            \r\n                dice, d, _roll = t2.partition('d')\r\n                faces, k, keep = _roll.partition('k')\r\n                if not d:\r\n                    # no dice terms here, bail out\r\n                    mterms.append(int(t2))\r\n                    continue            \r\n                if d and not _roll:\r\n                    raise SyntaxError('faces term is required in dice expressions: %s' % t2)\r\n                if k and not keep:\r\n                    raise SyntaxError('keep term is required if you use k: %s' % t2)\r\n                if not dice:\r\n                    # default to a single die\r\n                    dice = 1\r\n                roll_terms = {}                            \r\n                roll_terms['dice'] = int(dice)\r\n                roll_terms['faces'] = int(faces)\r\n                if keep:\r\n                    if int(keep) > int(dice):                    \r\n                        raise SyntaxError('keep term can not exceed total number of dice: %s' % t2)\r\n                    roll_terms['keep'] = int(keep)                \r\n                mterms.append(roll_terms)\r\n            terms.append(mterms)\r\n        return terms\r\n            \r\n    terms = parse(expression)    \r\n    while True:\r\n        # evaluate terms\r\n        result = 0 \r\n        for t1 in terms:\r\n            # add \r\n            if type(t1) is list:\r\n                #multiply\r\n                multiply_result = 1\r\n                for t2 in t1:                        \r\n                    if type(t2) is dict:\r\n                        t2 = roll(**t2)\r\n                    multiply_result *= t2\r\n                t1 = multiply_result\r\n            result += t1\r\n        yield result\r\n    \r\ndef profile(expression, n=100000):\r\n    \"\"\"\r\n    \"\"\"\r\n    d = dice(expression)\r\n    results = {}\r\n    for i in range(n):\r\n        r = d.next()\r\n        if results.has_key(r):\r\n            results[r] += 1\r\n        else:\r\n            results[r] = 1\r\n    for k,v in results.iteritems():\r\n        results[k] = float(v)/n\r\n        print '%d: %.3f' % (k, results[k]*100)\r\n        \r\nd = dice('4d6k3+10')\r\nfor i in range(10): print d.next()", "problem": 1}}, {"pk": 2, "model": "challenges.solution", "fields": {"language": 5, "title": "ryanWIN", "author": 1, "submitted": "2010-06-09", "source": "/*\r\nWhen approaching this problem, I took a look at the scope of the information\r\nthat was provided:\r\n\r\n - All of the letters are uppercase. \r\n\r\n - Punctuation, word length, and spacing were preserved. \r\n\r\n - The substitution cipher was 1-to-1, which meant that words\r\n   with repeating patterns were encoded with preservation. Words like hello,\r\n   rabbit, and deem would encode with preservation of these patterns because\r\n   the same letter would translate into the same representation. \r\n\r\n - A list of English words was provided and the ability to use frequency    \r\n   analysis was allowed.\r\n\r\nHere is a list of the approaches I took until I determined my final solution:\r\n\r\n1. Frequency Analysis: My first thought was to attempt something fancy: I\r\nstarted my solutions by looking for frequency analysis information on common\r\nEnglish phrases. I quickly realized that frequency analysis tends to work over\r\na long body of text and the contest only had short paragraphs. I quickly\r\ndiscarded this method.\r\n\r\n2. Brute Force: I quickly surmised that brute force may be an option. I set\r\nout to analyze the complexity of the problem by doing a quick analysis. I\r\nfigured that if the decipher ring contained 26 characters, all I would have to\r\ndo is randomly generate ciphers until all of the words in the sentence decoded\r\nto valid english words. However, calculating the entire ring is 26! (yes,\r\nthat's a factorial), which meant that it would require at most\r\n403,291,461,126,605,635,584,000,000 operations. Since I did not have enough\r\ntime to wait around for trillions of years, I knew this approach wasn't\r\nviable.\r\n\r\n3. Going back to the information provided: I noticed that punctuation, word\r\nlength, and repeating letter patterns were preserved, so I began to quickly\r\nrealize that each word, if it was valid English, would only have a finite\r\nnumber of possibilities. XYZ could not be Truck. ABCDEFA could not be The.\r\nTEEG could not possibly be Bear.\r\n\r\nFINAL SOLUTION\r\n\r\nI built a prototype program to determine, exactly, how many potential\r\ncandidates each word would have. The first criteria was length. In the\r\nfollowing sentence: THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG, I could\r\ndevelop a list of potential word candidates for each word. Short words would\r\nhave thousands of candidates while long words would have fewer candidates.\r\nAfter that, I developed a method of analyzing a word for repeating patterns so\r\nthat I could differentiate between words that had patterns and words that\r\ndidn't, such as Hello and Whole. The algorithm I used assigned a number 1 to\r\nthe first letter found. Any subsequent findings of that same letter would also\r\nreceive a number 1. The second unique letter found would receive a 2 and any\r\nsubsequent findings of that letter would receive a number 2, and so on. I\r\nfound that this generated a signature for each word and would allow me to\r\ndifferentiate between words comprised of unique letters and ones that had\r\ninternal letter repetition, regardless of the way they were encoded in a\r\n1-to-1 substitution cipher. Bear and XYZP would compute to 1234. Beer and TEEG\r\nwould compute to 1223. This left me with one more problem to address: words\r\nlike Deer and Seer would also compute to 1223, which meant that while it\r\neliminated impossibilities, it wasn't a sure predictor of word matching\r\nsuccess. After testing this method, I found that it would eliminate the\r\npossible candidates for words that were lengthy and had unique letter\r\nrepetition patterns. At last, I was making headway! If I had calculated that a\r\nword like PSYCHOLOGICALLY was the only possible match for ZCGWBKAKJRWNAAG,\r\nthen I would have the following portion of the cipher decoded:\r\n\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n||||||||||||||||||||||||||\r\nLHS   Y  GO  A   I    C  P\r\n\r\nWith this breakthrough, I would be able to fill in the blanks on my existing\r\nsentence and then use those blanks to further negate possibilities. If a word\r\nin my sentence was updated from ???? to PA??, I would know that it could only\r\npossibly be 4 letter words that began with P and A. This would take results\r\nfrom thousands to less than a hundred. Some words would resolve down to a\r\nsingle candidate and then I could use that result to further update the\r\ncipher. After the initial pass and a second pass for cleanup, I found that all\r\nof the cipher text in the contest was decoded.\r\n*/\r\n\r\n#include <iostream>\r\n#include <fstream>\r\n#include <string.h>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <map>\r\n\r\nusing namespace std;\r\n\r\ntypedef vector<int> indexlist;\r\ntypedef map<string,int> wordlist;\r\ntypedef map<char,int> letterfrequency;\r\ntypedef map<char,char> decryptmap;\r\ntypedef map<string,int> wordanalysis;\r\ntypedef map<int,int> lengthanalysis;\r\ntypedef vector<string> hugedictionary;\r\ntypedef map<string,hugedictionary> matchlist;\r\ntypedef map<string,wordlist> newmatchlist;\r\n\r\nwordlist uniques;\r\nhugedictionary originalwords;\r\nletterfrequency letfreq;\r\ndecryptmap decryptogram;\r\nmatchlist matcheslist;\r\n\r\nvoid BuildFrequency(string &pstring)\r\n{\r\n\tstring parseword;\r\n\r\n\tcout << \"Original Message==============\" << endl << pstring << endl << \"==============\" << endl;\r\n\tfor(unsigned int i=0;i<pstring.length();i++)\r\n\t{\r\n\t\tif(pstring[i]>='A' && pstring[i]<='Z')\r\n\t\t{\r\n\t\t\tparseword.push_back(pstring[i]);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(parseword!=\"\") originalwords.push_back(parseword);\r\n\t\t\tparseword.clear();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nindexlist AnalyzePossibility(string &pstring)\r\n{\r\n\tletterfrequency frequency;\r\n\tindexlist tmp;\r\n\tint numeric = 1;\r\n\tfor(int i = 0;i<pstring.length();++i)\r\n\t{\r\n\t\tif(frequency[pstring[i]]==0)\r\n\t\t{\r\n\t\t\ttmp.push_back(numeric);\r\n\t\t\tfrequency[pstring[i]]=numeric;\r\n\t\t\t++numeric;\r\n\t\t}\r\n\t\telse tmp.push_back(frequency[pstring[i]]);\t\t\r\n\t}\r\n\r\n\treturn tmp;\r\n}\r\n\r\n\r\nbool Pattern(string orig, string scrambled)\r\n{\r\n\tindexlist crap = AnalyzePossibility(orig);\r\n\tindexlist crap2 = AnalyzePossibility(scrambled);\r\n\r\n\tfor(int i=0;i<orig.length();++i)\r\n\t{\r\n\t\tif(crap[i]!=crap2[i]) return false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool stringlengthcompare(string lhs, string rhs) { return (lhs.length() > rhs.length()); }\r\n\r\n\r\nstring UpdateString(string &pstring)\r\n{\r\n\tstring tmp;\r\n\tfor(unsigned int i=0;i<pstring.length();i++)\r\n\t{\r\n\t\tif(pstring[i]>='A' && pstring[i]<='Z')\r\n\t\t{\r\n\t\t\ttmp.push_back(decryptogram[pstring[i]]);\r\n\t\t}\r\n\t}\r\n\t//cout << \"Fixing \" << pstring << \" to \" << tmp << endl;\r\n\treturn tmp;\r\n}\r\n\r\n\r\n\r\nbool ProbableMatch(string &orig,string &scramble,string &filter)\r\n{\r\n\tif(orig.length()!=scramble.length()) return false;\r\n\tfor(int compare=0;compare<orig.length();++compare)\r\n\t{\r\n\t\tif(orig[compare]=='.')\r\n\t\t{\r\n\t\t\tif(filter.length()>0)\r\n\t\t\t{\r\n\t\t\t\tbool wrong = true;\r\n\t\t\t\tfor(int ist=0;ist<filter.length();++ist)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(scramble[compare]==filter[ist]) wrong=false;\r\n\t\t\t\t}\r\n\t\t\t\tif(wrong==true) return false;\r\n\t\t\t\t//cout << \"Debug: \" << orig << \": \" << scramble << \": \" << filter << endl;\r\n\t\t\t\t//Wildcard\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(orig[compare]!=scramble[compare])\r\n\t\t\t{\r\n\t\t\t\t//cout << \"DEBUG:  Comparing \" << orig << \" to \" << scramble << endl;\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\t//cout << \"DEBUG:  MATCHED! \" << orig << \" to \" << scramble << endl;\t\t\t\r\n\treturn true;\t\r\n}\r\n\r\nvoid PrintFrequency()\r\n{\r\n\tfor(char blah = 'A'; blah<='Z'; ++blah)\r\n\t{\r\n\t\tdecryptogram[blah] = '.';\r\n\t}\r\n\tfor(hugedictionary::const_iterator itr = originalwords.begin(); itr != originalwords.end(); ++itr)\r\n\t{\r\n\t\tint matches = 0;\r\n\t\tfor(wordlist::const_iterator itru2 = uniques.begin(); itru2 != uniques.end(); ++itru2)\r\n\t\t{\r\n\t\t\tif((*itru2).first.length()==(*itr).length())\r\n\t\t\t{\r\n\t\t\t\tif(Pattern((*itru2).first,(*itr))==true)\r\n\t\t\t\t{\r\n\t\t\t\t\t++matches;\r\n\t\t\t\t\tmatcheslist[(*itr)].push_back((*itru2).first);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//cout << \"Found \" << matches << \" matches for the word of \" << (*itr) << \".\" << endl;\r\n\t\tif(matches==1)\r\n\t\t{\r\n\t\t\tfor(int fd=0;fd<(*itr).length();++fd)\r\n\t\t\t{\r\n\t\t\t\tdecryptogram[(*itr)[fd]] = matcheslist[(*itr)][0][fd];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(matches>1 && matches<10)\r\n\t\t{\r\n\t\t\tfor(int j=0;j<matcheslist[(*itr)].size();++j)\r\n\t\t\t{\r\n\t\t\t\t//cout << \"Match \" << (j+1) << \": \" << matcheslist[(*itr)][j] << endl;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//else cout << \"Too many matches on that word to list options...\" << endl;\r\n\t}\r\n\t\r\n\tstring cf;\r\n\tfor(int j=0;j<originalwords.size();++j)\r\n\t{\r\n\t\twordanalysis filterwords;\r\n\t\tint secondmatches = 0;\r\n\t\tstring hrm = UpdateString(originalwords[j]);\r\n\t\tfor(int checks = 0;checks<matcheslist[originalwords[j]].size();++checks)\r\n\t\t{\r\n\t\t\tif(ProbableMatch(hrm,matcheslist[originalwords[j]][checks],cf)==true)\r\n\t\t\t{\r\n\t\t\t\tif(filterwords.find(matcheslist[originalwords[j]][checks])==filterwords.end())\r\n\t\t\t\t{\r\n\t\t\t\t\tfilterwords[matcheslist[originalwords[j]][checks]] = 1;\r\n\t\t\t\t\t++secondmatches;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(secondmatches==1)\r\n\t\t{\r\n\t\t\tfor(wordanalysis::const_iterator itru3 = filterwords.begin(); itru3 != filterwords.end(); ++itru3)\r\n\t\t\t{\r\n\t\t\t\t//cout << \"Updating the cryptogram to reflect \" << (*itru3).first << endl;\r\n\t\t\t\tfor(int fd=0;fd<(*itru3).first.length();++fd)\r\n\t\t\t\t{\r\n\t\t\t\t\tdecryptogram[originalwords[j][fd]] = (*itru3).first[fd];\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(secondmatches>1 && secondmatches<10)\r\n\t\t{\r\n\t\t\tfor(wordanalysis::const_iterator itru3 = filterwords.begin(); itru3 != filterwords.end(); ++itru3)\r\n\t\t\t{\r\n\t\t\t\t//cout << \"Match : \" << (*itru3).first << endl;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//else cout << \"Too many matches on that word to list options...\" << endl;\r\n\t}\r\n\r\n\tmatchlist updated;\r\n\tnewmatchlist updated2;\r\n\thugedictionary newwords;\r\n\tfor(int j=0;j<originalwords.size();++j)\r\n\t{\r\n\t\tstring hrm2 = UpdateString(originalwords[j]);\r\n\t\tnewwords.push_back(hrm2);\r\n\t\tupdated[hrm2] = matcheslist[originalwords[j]];\t\r\n\t}\r\n\r\n\tstring leftovers;\r\n\tdecryptmap checker;\r\n\tfor(char lolz='A';lolz<='Z';++lolz) { checker[lolz] = '.'; }\r\n\tfor(decryptmap::const_iterator cit=decryptogram.begin();cit!=decryptogram.end();++cit)\r\n\t{\r\n\t\tif((*cit).second!='.')\r\n\t\t{\r\n\t\t\tchecker[(*cit).second]='Y';\r\n\t\t}\r\n\t}\r\n\tfor(char lol='A';lol<='Z';++lol)\r\n\t{\r\n\t\tif(checker[lol]=='.') leftovers.push_back(lol);\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\tif(leftovers==\"\") { } // whoa cipher is already figured out!\r\n\telse\r\n\t{\r\n\t\t//cout << \"DEBUG:  DOIN LAST SWEEP\" << endl;\r\n\t\tfor(int iw=0;iw<newwords.size();++iw)\r\n\t\t{\r\n\t\t\t//cout << \"WORD CHECK: \" << newwords[iw] << endl;\r\n\t\t\tfor(int checks = 0;checks<updated[newwords[iw]].size();++checks)\r\n\t\t\t{\r\n\r\n\t\t\t\tif(ProbableMatch(newwords[iw],updated[newwords[iw]][checks],leftovers)==true)\r\n\t\t\t\t{\r\n\t\t\t\t\tupdated2[newwords[iw]][updated[newwords[iw]][checks]]=1;\r\n\t\t\t\t\t//cout << newwords[iw] << \" matches with \" << updated[newwords[iw]][checks] << \" using filter \" << leftovers << \"...\";\t\t\t\t\t\r\n\t\t\t\t\t//cout << \"yes!\" << endl;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int iw=0;iw<newwords.size();++iw)\r\n\t\t{\r\n\t\t\tint count = 0;\r\n\t\t\thugedictionary ambiguous;\r\n\r\n\t\t\tfor(wordlist::const_iterator cit=updated2[newwords[iw]].begin();cit!=updated2[newwords[iw]].end();++cit)\r\n\t\t\t{\r\n\t\t\t\tambiguous.push_back((*cit).first);\r\n\t\t\t}\r\n\t\t\tif(ambiguous.size()==1)\r\n\t\t\t{\r\n\t\t\t\t//cout << newwords[iw] << \" is solved to \" << ambiguous[0] << \" fixing up decoder...\" << endl;\r\n\t\t\t\tfor(int fd=0;fd<ambiguous[0].length();++fd)\r\n\t\t\t\t{\r\n\t\t\t\t\tdecryptogram[originalwords[iw][fd]] = ambiguous[0][fd];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcout << newwords[iw] << \" is ambiguous with \" << ambiguous.size() << \" words. \" << endl;\r\n\t\t\t\tcout << \"|> \";\r\n\t\t\t\tfor(int whoa=0;whoa<ambiguous.size();++whoa)\r\n\t\t\t\t{\r\n\t\t\t\t\tcout << ambiguous[whoa];\r\n\t\t\t\t\tif(whoa<ambiguous.size()-1) cout << \",\";\r\n\t\t\t\t}\r\n\t\t\t\tcout << endl;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid Unscramble(string &pstring)\r\n{\r\n\r\n\tcout << \"Decoded Message==============\" << endl;\r\n\tfor(unsigned int i=0;i<pstring.length();i++)\r\n\t{\r\n\t\tif(pstring[i]>='A' && pstring[i]<='Z')\r\n\t\t{\r\n\t\t\tcout << decryptogram[pstring[i]];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcout << pstring[i];\r\n\t\t}\r\n\t}\r\n \tcout << endl << \"==============\" << endl;\r\n\r\n\t\r\n\tfor(char lol='A';lol<='Z';++lol)\r\n\t{\r\n\t\tcout << \"CIPHER [\" << lol << \"] = [\" << decryptogram[lol] << \"]\" << endl;\r\n\t}\r\n\r\n\tstring leftovers;\r\n\tdecryptmap checker;\r\n\tfor(char lolz='A';lolz<='Z';++lolz) { checker[lolz] = '.'; }\r\n\tfor(decryptmap::const_iterator cit=decryptogram.begin();cit!=decryptogram.end();++cit)\r\n\t{\r\n\t\tif((*cit).second!='.')\r\n\t\t{\r\n\t\t\tchecker[(*cit).second]='Y';\r\n\t\t}\r\n\t}\r\n\tfor(char lol='A';lol<='Z';++lol)\r\n\t{\r\n\t\tif(checker[lol]=='.') leftovers.push_back(lol);\r\n\t}\r\n\tcout << \"The following letters were left over: \" << leftovers << endl;\r\n}\r\n\r\n\r\nstring BILLYMAYS(string &pstring)\r\n{\r\n\tstring CRUISECONTROL;\r\n\tfor(unsigned int i=0;i<pstring.length();i++)\r\n\t{\r\n\t\tCRUISECONTROL.push_back(toupper(pstring[i]));\r\n\t}\r\n\treturn CRUISECONTROL;\r\n\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\tif(argc<3)\r\n\t{\r\n\t\tcout << \"usage: crypt cryptfile wordfile\" << endl;\r\n\t\treturn 1;\r\n\r\n\t}\r\n\r\n\r\n\tifstream c(argv[1]);\r\n\tstring query;\r\n\tstring creadline;\r\n\tint clines = 0;\r\n\tif(c.is_open())\r\n\t{\r\n    \t\twhile (!c.eof())\r\n\t\t{\r\n\t\t\tgetline(c,creadline);\r\n\t\t\tquery += creadline;\r\n\t\t\t++clines;\r\n\t\t}\r\n\t\tc.close();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcout << \"ULTRA FAIL:  Unable to open cryptogram for read access!  Exiting...\" << endl;\r\n\t\treturn 1;\r\n\t}\r\n\r\n\r\n\r\n\r\n\tifstream d(argv[2]);\r\n\tstring readline;\r\n\tint lines = 0;\r\n\tif(d.is_open())\r\n\t{\r\n    \t\twhile (!d.eof())\r\n\t\t{\r\n\t\t\tgetline(d,readline);\r\n\t\t\tuniques[BILLYMAYS(readline)]=1;\r\n\t\t\t++lines;\r\n\t\t}\r\n\t\td.close();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcout << \"ULTRA FAIL:  Unable to open dict for read access!  Exiting...\" << endl;\r\n\t\treturn 1;\r\n\t}\r\n\tstring t1 = \".ROM\";\r\n\tstring t2 = \"FROM\";\r\n\tstring fil = \"\";\r\n\tcout << \"Read \" << lines << \" words.\" << endl;\r\n\tcout << \"Unit test: \" << ProbableMatch(t1,t2,fil) << endl;\r\n\tBuildFrequency(query);\r\n\tPrintFrequency();\r\n\tUnscramble(query);\r\n}", "problem": 2}}, {"pk": 3, "model": "challenges.solution", "fields": {"language": 23, "title": "cheezey", "author": 10, "submitted": "2010-06-09", "source": "import re\r\nimport time\r\n\r\ndictionary_location = \"/usr/share/dict/words\"\r\ndictionary = set(open(dictionary_location).read().split('\\n'))\r\n\r\n#additional words..\r\ndictionary.add(\"defence\")\r\ndictionary.add(\"america\")\r\n\r\n#ordered by likelyhood\r\nalphabet = 'etaoinshrdlcumwfgypbvkjxqz'\r\n\r\ndef sort_frequency(mapping):\r\n  f = sorted(mapping.items(), key = lambda x: x[1])\r\n  f.reverse()\r\n  m = []\r\n  for i in f:\r\n    m.append(i[0])\r\n  return m\r\n\r\ndef find_helper(input, string):\r\n  for i in range(0, len(input)):\r\n    if input[i] == '_':\r\n      continue\r\n    elif input[i] == string[i]:\r\n      continue\r\n    else:\r\n      return False\r\n  return True\r\n\r\ndef find_matches(input):\r\n  \"\"\"format: \"_x_\" - the second letter is known.. etc. returns: a list of all matching words.\"\"\"\r\n  l = set()\r\n  for i in dictionary:\r\n    if (len(i) != len(input)):\r\n      continue\r\n    elif find_helper(input, i):\r\n      l.add(i)\r\n  return l\r\n\r\ndef find_matches_for_word(input, i):\r\n  \"\"\"same as find_matches except it will match a sentence, look for the ith word in the sentence (or last if i is too large) and returns a list of guesses using words that match the ith guess.\"\"\"\r\n  l = []\r\n  s = input.split(\" \")\r\n  if i > len(s)-1:\r\n    i = len(s)-1\r\n  elif i < 0:\r\n    i = 0\r\n  guesses = find_matches(s[i])\r\n  for z in guesses:\r\n    l.append(\" \".join(s[:i] + [z] + s[i+1:]))\r\n  return l\r\n\r\ndef get_frequency(input):\r\n  \"\"\"given a string, will return a map with the frequncy of letters used. example: get_frequency(\"ab\") - {'a':50, 'b':50}\"\"\"\r\n  input = input.replace(' ', '')\r\n  m = {}\r\n  for i in input:\r\n    if i in m:\r\n      m[i] += 1\r\n    else:\r\n      m[i] = 1\r\n  return m\r\n\r\ndef check(input):\r\n  for i in input.split(' '):\r\n    if not i in dictionary:\r\n      return False\r\n  return True\r\n\r\ndef create_mapping(input, solution):\r\n  \"\"\"given the original input and a possible solution (with possible _ matches)it returns a mapping from the input characters to the solution. if there are any discrepencies, it will return a blank mapping.\"\"\"\r\n  input = input.replace(' ', '')\r\n  solution = solution.lower().replace(' ', '')\r\n  if (len(input) != len(solution)):\r\n    return {}\r\n  else:\r\n    s = {}\r\n    for i in xrange(0, len(input)):\r\n      if solution[i] != '_' and input[i] not in s and solution[i] not in s.values():\r\n        s[input[i]] = solution[i]\r\n      elif solution[i] == '_' or input[i] in s or solution[i] in s.values():\r\n        continue\r\n      else:\r\n        return {}\r\n    return s\r\n\r\ndef use_mapping(input, mapping):\r\n  \"\"\"given an input and mapping, changes the input to reflect all known mappings\"\"\"\r\n  s = \"\"\r\n  for i in input:\r\n    if i in mapping:\r\n      s += mapping[i]\r\n    elif i == \" \":\r\n      s += \" \"\r\n    else:\r\n      s += \"_\"\r\n  return s\r\n\r\n#helper functions:\r\n#count the number of words in an input\r\ndef count_words(input):\r\n  return len(input.split(\" \"))\r\n\r\n#find the most complete word and returns the index\r\n#returns 0 if everything is equal\r\ndef find_most_complete_word(guess):\r\n  def count(word):\r\n    c = 0\r\n    for i in word:\r\n     if i != \"_\":\r\n       c = c + 1\r\n    return c\r\n  l = guess.split(\" \")\r\n  z = 0\r\n  k = -1\r\n  for i in range(0, len(l)):\r\n    if '_' in l[i]:\r\n      c = count(l[i])\r\n      if c > k:\r\n        k = c\r\n        z = i\r\n    else:\r\n      continue\r\n  return z\r\n\r\ndef initial_guess(input, actual_frequency):\r\n  #iterates through all initial guesses in a smart way\r\n  #  first letter only matches the first few. finishes these guesses before even continuing to the next.\r\n  for i in actual_frequency:\r\n    mapping = {}\r\n    for j in alphabet:\r\n      mapping[i] = j\r\n      t = time.time()\r\n      run(input, mapping, t)\r\n\r\ndef run(input, mapping, t):\r\n  \"\"\"guess is not empty. must have at least one letter. mapping must not be empty either.\"\"\"\r\n  #recursive solve. given a guess, iterate through all valid guesses and recurses.\r\n  guess = use_mapping(input, mapping)\r\n   \r\n  best_index = find_most_complete_word(guess)\r\n  possible_guesses = find_matches_for_word(guess, best_index)\r\n  for current_guess in possible_guesses:\r\n    current_mapping = create_mapping(input, current_guess)\r\n    print \"current mapping:\", current_mapping\r\n    if check(current_guess):\r\n      print \"time taken:\", time.time() - t\r\n      print \"poss solution:\", current_guess\r\n      if \"continue\" == raw_input(\"continue or exit (default)? \"):\r\n        t = time.time()\r\n        continue\r\n      exit()\r\n    else:\r\n      print \"current guess:\", current_guess\r\n    print \"\"\r\n    if current_mapping != mapping:\r\n      run(input, current_mapping, t)\r\n\r\n  return\r\n\r\ndef solve(input):\r\n  i = input.lower()\r\n  af = \"\".join(sort_frequency(get_frequency(i)))\r\n  initial_guess(i, af)\r\n\r\nsolve(\"HY IBY XYAXWY AQ IBY FCGIYP NIEIYN GC ASPYS IA QAST E TASY XYSQYLI FCGAC YNIEKWGNB JFNIGLY GCNFSY PATYNIGL ISECZFGWGIO XSAVGPY QAS IBY LATTAC PYQYCLY XSATAIY IBY RYCYSEW HYWQESY ECP NYLFSY IBY KWYNNGCRN AQ WGKYSIO IA AFSNYWVYN ECP AFS XANIYSGIO PA ASPEGC ECP YNIEKWGNB IBGN LACNIGIFIGAC QAS IBY FCGIYP NIEIYN AQ ETYSGLE\")\r\n\r\n#solve(\"URYYB GUVF VF N GRFG BS GUR RZRETRAPL OEBNQPNFGVAT FLFGRZ GURER VF AB JNL GUNG GUVF JVYY OR QRPBQRQ VZZRQVNGRYL VG VF NA HASBEGHANGR PBAFRDHRAPR GUNG GUR EBGNGVBA OL GUVEGRRA VF HFRQ\")\r\n\r\n#this one doesn't \"solve\" because \"C\" is not a word\r\n#solve(\"UQRC CHFH WLKFI FIHKIRP FRCPLCO DM HFIKNCHDIF IQRZ JDLXSGZ PLFXNTRKRP IQHI VHGGMNLCI MRCF UNDGP CNI UNKS LC BRKN OKHTLIZ IN XNEVHI IQR MKNVGRE CHFH FXLRCILFIF FMRCI H PRXHPR HCP VLGGLNC IN PRTRGNM H MRC IQHI UKLIRF LC BRKN OKHTLIZ DMFLPR PNUC DCPRKUHIRK NC HGENFI HCZ FDKWHXR LCXGDPLCO OGHFF HCP HI IREMRKHIDKRF KHCOLCO WKNE VRGNU WKRRBLCO IN X IQR KDFFLHCF DFRP H MRCXLG\")", "problem": 2}}, {"pk": 41, "model": "challenges.solution", "fields": {"language": 16, "title": "HillClimbing + Redundant Position Elimination", "author": 29, "submitted": "2010-07-16", "source": "package com.yoden;\r\n\r\nimport java.awt.Point;\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport com.nativelibs4java.opencl.JavaCL;\r\nimport com.yoden.ProggitQuizBaconChallenge.BaconBoard.BaconBoardSquare;\r\n\r\npublic class ProggitQuizBaconChallenge {\r\n\tpublic static final boolean DEBUG = true;\r\n\t\r\n\tpublic static enum BaconBit {\r\n\t\tOPEN,\r\n\t\tCITY,\r\n\t\tBACON,\t//a bacon dispensary\r\n\t\tINVALID;\t//no need to try to put bacon here\r\n\t\t\r\n\t\tpublic String toString() {\r\n\t\t\tswitch(this) {\r\n\t\t\tcase OPEN:\r\n\t\t\t\treturn \".\";\r\n\t\t\tcase CITY:\r\n\t\t\t\treturn \"P\";\r\n\t\t\tcase BACON:\r\n\t\t\t\treturn \"B\";\r\n\t\t\tcase INVALID:\r\n\t\t\t\treturn \"-\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn OPEN.toString();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static BaconBit toBacon(String s) {\r\n\t\t\tif(BaconBit.OPEN.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.OPEN;\r\n\t\t\t} else if(BaconBit.CITY.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.CITY;\r\n\t\t\t} else if(BaconBit.BACON.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.BACON;\r\n\t\t\t} else if(BaconBit.INVALID.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.INVALID;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid board character:\" + s);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static class BaconBoard {\r\n\t\tpublic static class BaconBoardSquare {\r\n\t\t\tBaconBit bit;\r\n\t\t\tfinal int x,y;\t//some duplicated state; for speed\r\n\r\n\t\t\t//BACON - how far is the furthest city using this BACON?\r\n\t\t\tint maxDistToAnyFedCity = -1;\r\n\t\t\t\r\n\t\t\t//CITY - cached last bacon dispensary\r\n\t\t\tBaconBoardSquare bacon = null;\r\n\t\t\t\r\n\t\t\tpublic BaconBoardSquare(int x, int y) {\r\n\t\t\t\tthis.x = x;\r\n\t\t\t\tthis.y = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//these squares are mutable, and their references will not change\r\n\t\tfinal BaconBoardSquare[][] board;\r\n\t\t\r\n\t\t//cache\r\n\t\t//TODO: pro optimization: spatially hash this\r\n\t\tprivate List<BaconBoardSquare> baconSquares = new ArrayList<BaconBoardSquare>();\t\r\n\t\t//cache, do not mutate this one\r\n\t\tprivate List<BaconBoardSquare> citySquares = new ArrayList<BaconBoardSquare>();\t\r\n\t\t\r\n\t\tpublic BaconBoard(String s) {\r\n\t\t\tString[] allLines = s.split(\"\\n\");\r\n\t\t\tString[] lines = new String[allLines.length-1];\r\n\t\t\t//just ignoring the first line of metadata\r\n\t\t\tfor(int i=0; i<lines.length; i++) {\t\r\n\t\t\t\tlines[i] = allLines[i+1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboard = new BaconBoardSquare[lines.length][];\r\n\t\t\t\r\n\t\t\tfor(int j=0, lineLength=-1; j<lines.length; j++) {\r\n\t\t\t\tString ss = lines[j];\r\n\t\t\t\t\r\n\t\t\t\tif(lineLength < 0) {\r\n\t\t\t\t\tlineLength = ss.length();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(ss.length() != lineLength) {\r\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid board\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tboard[j] = new BaconBoardSquare[lineLength];\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<ss.length(); i++) {\r\n\t\t\t\t\tboard[j][i] = new BaconBoardSquare(i, j);\r\n\t\t\t\t\tBaconBit bit = BaconBit.toBacon(ss.substring(i, i+1));\r\n\t\t\t\t\tset(j, i, bit);\r\n\t\t\t\t\tif(BaconBit.CITY.equals(bit)) {\r\n\t\t\t\t\t\tcitySquares.add(board[j][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//a copy constructor, we'll want a copy of the board per thread\r\n\t\tpublic BaconBoard(BaconBoard toCopy) {\r\n\t\t\tboard = new BaconBoardSquare[toCopy.board.length][];\r\n\t\t\tfor(int j=0; j<toCopy.board.length; j++) {\r\n\t\t\t\tboard[j] = new BaconBoardSquare[toCopy.board[j].length];\r\n\t\t\t\tfor(int i=0; i<toCopy.board[j].length; i++) {\r\n\t\t\t\t\tboard[j][i] = new BaconBoardSquare(i, j);\r\n\t\t\t\t\tBaconBit bit = toCopy.get(j, i);\r\n\t\t\t\t\tset(j, i, bit);\r\n\t\t\t\t\tif(BaconBit.CITY.equals(bit)) {\r\n\t\t\t\t\t\tcitySquares.add(board[j][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t \r\n\t\tpublic BaconBit get(int row, int col) {\r\n\t\t\treturn board[row][col].bit;\r\n\t\t}\r\n\t\t\r\n\t\tpublic boolean isBacon(int row, int col) {\r\n\t\t\treturn BaconBit.BACON.equals(board[row][col].bit);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * \tMust call getTotalBaconDistance first to generate cache\r\n\t\t * \r\n\t\t * @param row\r\n\t\t * @param col\r\n\t\t * @return\r\n\t\t */\r\n\t\tpublic boolean isBaconAndUsed(int row, int col) {\r\n\t\t\tBaconBoardSquare square = board[row][col];\r\n\t\t\treturn BaconBit.BACON.equals(square.bit) && square.maxDistToAnyFedCity > 0;\r\n\t\t}\r\n\t\t\r\n\t\tpublic BaconBoard set(int row, int col, BaconBit b) {\r\n\t\t\tBaconBoardSquare square = board[row][col];\r\n\t\t\t\r\n\t\t\t//some debug code\r\n//\t\t\tif(square.equals(BaconBit.CITY)) {\r\n//\t\t\t\tif(!b.equals(BaconBit.CITY)) {\r\n//\t\t\t\t\tSystem.out.println(\"You just killed a city... probably not what you wanted\");\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n\t\t\t\r\n\t\t\tif(BaconBit.BACON.equals(square.bit)) {\r\n\t\t\t\tif(BaconBit.OPEN.equals(b)) {\r\n\t\t\t\t\tif(calcMaxMaxDistanceToAnyFedSquare() > 0) {\r\n\t\t\t\t\t\tadjustCaching(square);\r\n\t\t\t\t\t\tbaconSquares.remove(square);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(BaconBit.OPEN.equals(square.bit)) {\r\n\t\t\t\tif(BaconBit.BACON.equals(b)) {\r\n\t\t\t\t\tbaconSquares.add(square);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsquare.bit = b;\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDirty the cache of city->bacon references,\r\n\t\t * \tcentered around square\r\n\t\t * \r\n\t\t * @param square\r\n\t\t */\r\n\t\tprivate void adjustCaching(BaconBoardSquare square) {\r\n\t\t\tint delta = calcMaxMaxDistanceToAnyFedSquare();\r\n\t\t\t\r\n\t\t\tint startJ = Math.max(square.y - delta, 0);\r\n\t\t\tint startI = Math.max(square.x - delta, 0);\r\n\t\t\t\r\n\t\t\tint endJ = Math.min(square.y + delta, board.length-1);\r\n\t\t\tint endI = Math.min(square.x + delta, board[0].length-1);\r\n\t\t\t\r\n\t\t\tfor(int j=startJ; j<=endJ; j++) {\r\n\t\t\t\tfor(int i=startI; i<=endI; i++) {\r\n\t\t\t\t\tboard[j][i].bacon = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsquare.maxDistToAnyFedCity = -1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tBy calculating this, we can determine a subset of the\r\n\t\t * \tboard to dirty, so that local movements only cause local recalculation\r\n\t\t * \r\n\t\t * \t@return\r\n\t\t */\r\n\t\tprivate int calcMaxMaxDistanceToAnyFedSquare() {\r\n\t\t\tint rv = -1;\r\n\t\t\tCollection<BaconBoardSquare> baconSquares = getBaconSquares();\r\n\t\t\tfor(BaconBoardSquare square : baconSquares) {\r\n\t\t\t\trv = Math.max(square.maxDistToAnyFedCity, rv);\r\n\t\t\t}\r\n\t\t\treturn rv + 1;\r\n\t\t}\r\n\t\t\r\n\t\tpublic boolean isOnBoard(int row, int col) {\r\n\t\t\treturn row >= 0 && col >= 0 && row < board.length && col < board[0].length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getRows() {\r\n\t\t\treturn board.length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getCols() {\r\n\t\t\treturn board[0].length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic long getTotalBaconDistance() {\r\n\t\t\tlong rv = 0;\r\n\t\t\t\r\n\t\t\tCollection<BaconBoardSquare> cities = getCitySquares();\r\n\t\t\tCollection<BaconBoardSquare> bacons = getBaconSquares();\r\n\t\t\t\r\n\t\t\tfor(BaconBoardSquare city : cities) {\r\n\t\t\t\tint bestSoFar;\r\n\t\t\t\t\r\n\t\t\t\tif(city.bacon != null) {\r\n\t\t\t\t\tbestSoFar = getCachedBest(city);\r\n\t\t\t\t\t//debug code\r\n//\t\t\t\t\tif(bestSoFar != calcDistance(city, bacons, false)) {\r\n//\t\t\t\t\t\tSystem.out.println(\"boooooched\");\r\n//\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbestSoFar = calcDistance(city, bacons, true);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\trv += bestSoFar;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(rv == 0) {\r\n\t\t\t\tSystem.out.println(\"I don't think you have any bacon...\");\r\n\t\t\t\trv = Long.MAX_VALUE;\r\n\t\t\t}\r\n\t\t\t \r\n\t\t\treturn rv;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tFind the best bacon location for city, and return the manhattan distance\r\n\t\t * \r\n\t\t * @param city\r\n\t\t * @param bacons\r\n\t\t * @param updateCache\r\n\t\t * @return\r\n\t\t */\r\n\t\tprivate int calcDistance(\r\n\t\t\t\tBaconBoardSquare city, \r\n\t\t\t\tCollection<BaconBoardSquare> bacons, \r\n\t\t\t\tboolean updateCache) {\r\n\t\t\t\r\n\t\t\tint bestSoFar;\r\n\t\t\tbestSoFar = Integer.MAX_VALUE;\r\n\t\t\tint bestJ = -1;\r\n\t\t\tint bestI = -1;\r\n\t\t\tfor(BaconBoardSquare bacon : bacons) {\r\n\t\t\t\tint d = manhattanDistance(city.x, city.y, bacon.x, bacon.y);\r\n\t\t\t\tif(d < bestSoFar) {\r\n\t\t\t\t\tbestSoFar = d;\r\n\t\t\t\t\tbestJ = bacon.y;\r\n\t\t\t\t\tbestI = bacon.x;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(updateCache) {\r\n\t\t\t\tint tmp = Math.max(board[bestJ][bestI].maxDistToAnyFedCity, bestSoFar);\r\n\t\t\t\tboard[bestJ][bestI].maxDistToAnyFedCity = tmp;\r\n\t\t\t\tcity.bacon = board[bestJ][bestI];\r\n\t\t\t}\r\n\t\t\treturn bestSoFar;\r\n\t\t}\r\n\r\n\t\tprivate int getCachedBest(BaconBoardSquare city) {\r\n\t\t\tint bestSoFar;\r\n\t\t\tbestSoFar = manhattanDistance(\tcity.x, \r\n\t\t\t\t\t\t\t\t\t\t\tcity.y,\r\n\t\t\t\t\t\t\t\t\t\t\tcity.bacon.x,\r\n\t\t\t\t\t\t\t\t\t\t\tcity.bacon.y);\r\n\t\t\treturn bestSoFar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getTotalBaconCount() {\r\n\t\t\tint rv = 0;\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.length; j++) {\r\n\t\t\t\tfor(int i=0; i<board[0].length; i++) {\r\n\t\t\t\t\tif(isBacon(j, i)) {\r\n\t\t\t\t\t\trv++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @return\tall the city squares\r\n\t\t * \r\n\t\t * \tA/N: I created this method before it was apparent caching this\r\n\t\t * \tlist would be a win\r\n\t\t */\r\n\t\tprivate Collection<BaconBoardSquare> getCitySquares() {\r\n\t\t\treturn citySquares;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @return\tall the Bacon squares\r\n\t\t * \r\n\t\t * \tA/N: I created this method before it was apparent caching this\r\n\t\t * \tlist would be a win\r\n\t\t */\r\n\t\tprivate Collection<BaconBoardSquare> getBaconSquares() {\r\n\t\t\treturn baconSquares;\r\n\t\t}\r\n\r\n\t\t//also called taxicab distance, I guess...\r\n\t\tprivate int manhattanDistance(int startX, int startY, int endX, int endY) {\r\n\t\t\tint x = Math.abs(startX - endX);\r\n\t\t\tint y = Math.abs(startY - endY);\r\n\t\t\t\r\n\t\t\treturn x + y;\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\tString rv = \"\";\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.length; j++) {\r\n\t\t\t\tfor(int i=0; i<board[0].length; i++) {\r\n\t\t\t\t\trv += get(j, i).toString();\r\n\t\t\t\t}\r\n\t\t\t\tif(j < board.length-1) {\r\n\t\t\t\t\trv += \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static interface BaconPlacementSolver {\r\n\t\t/**\r\n\t\t * @param \tboard to be solved\r\n\t\t * @param \tnumBaconDispensaries\r\n\t\t * @return\tsolved board\r\n\t\t */\r\n\t\tpublic BaconBoard solve(BaconBoard board, int numBaconDispensaries);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @author yoden\r\n\t *\r\n\t *\tThis class uses random restart hill climbing to optimize bacon placement\r\n\t *\r\n\t *\tHigh level strategy:\r\n\t *\t\t1) Place bacon randomly\r\n\t *\t\t2) For each bacon:\r\n\t *\t\t\ta) Try moving it a little bit\r\n\t *\t\t\tb) Accept the best move which is a lower score, or stay where we are\r\n\t *\t\t3) If we reduced the score, goto 2), else continue\r\n\t *\t\t4) For each unused bacon:\r\n\t *\t\t\ta) Scan the entire board, and select the best global spot for this bacon\r\n\t *\t\t5) Goto 2) if we reduced the score in 4), else stop\r\n\t */\r\n\tpublic static class RandomRestartHillClimbingSolver implements BaconPlacementSolver {\r\n\t\tfinal public int numRestarts;\r\n\t\tfinal Random[] random;\t//one per thread\r\n\t\tBaconBoard[] solutions;\t//one per thread\r\n\t\tThread[] threads;\r\n\r\n\t\tpublic RandomRestartHillClimbingSolver(int numRestarts) {\r\n\t\t\tthis.numRestarts = numRestarts;\r\n\t\t\t\r\n\t\t\trandom = new Random[numThreads()];\r\n\t\t\tsolutions = new BaconBoard[numThreads()];\r\n\t\t\tthreads = new Thread[numThreads()];\r\n\t\t\tfor(int i=0; i<random.length; i++) {\r\n\t\t\t\trandom[i] = new Random(42 + i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\t//lots of lame threading logic here that would be gone if i had libraries...\r\n\t\t//e.g., this would normally be more like:\r\n\t\t//Util.threadedBlockingMap(numRestarts, new Functor() {\r\n\t\t//\t\tf(int index, int threadIndex) {\r\n\t\t//\t\t\tsolveThread(...)\r\n\t\t//\t\t}\r\n\t\t//};\r\n\t\tpublic BaconBoard solve(final BaconBoard board, final int numBaconDispensaries) {\r\n\t\t\tint numPerThread = (int) Math.ceil((float)numRestarts / numThreads());\r\n\t\t\tint totalStarted = 0;\r\n\t\t\t\r\n\t\t\tfor(int threadIndex=0; threadIndex<numThreads(); threadIndex++) {\r\n\t\t\t\tfinal int fThreadIndex = threadIndex;\r\n\t\t\t\tfinal int fNumPerThread;\r\n\t\t\t\tif(totalStarted + numPerThread < numRestarts) {\r\n\t\t\t\t\tfNumPerThread = numPerThread;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfNumPerThread = (numRestarts - totalStarted);\r\n\t\t\t\t}\r\n\t\t\t\ttotalStarted += fNumPerThread;\r\n\t\t\t\t\r\n\t\t\t\tthreads[fThreadIndex] = new Thread(\"Thread:\"+threadIndex) {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\tBaconBoard threadBoard = new BaconBoard(board);\r\n\t\t\t\t\t\tBaconBoard bestBoardSoFar = solveThread(threadBoard, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumBaconDispensaries, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfNumPerThread, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trandom[fThreadIndex]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsolutions[fThreadIndex] = bestBoardSoFar;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tthreads[fThreadIndex].start();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int t=0; t<threads.length; t++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthreads[t].join();\r\n\t\t\t\t} catch (InterruptedException e) { }\t//impossible..?\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBaconBoard bestBoard = solutions[0];\r\n\t\t\tlong bestScore = solutions[0].getTotalBaconDistance();\r\n\t\t\t\r\n\t\t\tfor(int t=1; t<threads.length; t++) {\r\n\t\t\t\tlong score = solutions[t].getTotalBaconDistance();\r\n\t\t\t\tif(score < bestScore) {\r\n\t\t\t\t\tbestScore = score;\r\n\t\t\t\t\tbestBoard = solutions[t];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bestBoard;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDo random restarts to produce the best solution for board\r\n\t\t * \r\n\t\t * \tThis function is reentrant\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param numBaconDispensaries\r\n\t\t * @param numRounds\r\n\t\t * @param random\r\n\t\t * @return best board solution\r\n\t\t */\r\n\t\tprivate static BaconBoard solveThread(\r\n\t\t\t\tBaconBoard board,\r\n\t\t\t\tint numBaconDispensaries, \r\n\t\t\t\tint numRounds,\r\n\t\t\t\tRandom random) {\r\n\t\t\t\r\n\t\t\tlong bestSoFar = Long.MAX_VALUE;\r\n\t\t\tBaconBoard bestBoardSoFar = null;\r\n\t\t\tlong bestFoundTime = System.nanoTime();\r\n\t\t\t\r\n\t\t\tlong startTime = System.nanoTime();\r\n\t\t\t\r\n\t\t\t//each loop of this for is a random restart\r\n\t\t\tfor(int round=0; round<numRounds; round++) {\r\n\t\t\t\tBaconBoard myBoard = new BaconBoard(board);\r\n\t\t\t\t\r\n\t\t\t\tlong newValue = climbFromRandomStart(myBoard, numBaconDispensaries, random);\r\n\t\t\t\t\r\n\t\t\t\tif(newValue < bestSoFar) {\r\n\t\t\t\t\tbestBoardSoFar = myBoard;\r\n\t\t\t\t\tbestSoFar = newValue;\r\n\t\t\t\t\tbestFoundTime = System.nanoTime();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint printRound = (int)((float)numRounds/20) + 1;\r\n\t\t\t\tif(DEBUG && (round == 0 || round % printRound == 0)) {\r\n\t\t\t\t\tString string = Thread.currentThread().getName() + \"\\t\";\r\n\t\t\t\t\tstring = string + \"At:\" + round + \"/\" + (numRounds-1) + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Current solution:\" + bestSoFar + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Elapsed (ms):\" + (System.nanoTime()-startTime)/1000/1000 + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Best Found (ms):\" + (bestFoundTime-startTime)/1000/1000;\r\n\t\t\t\t\tSystem.out.println(string);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bestBoardSoFar;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDo one greedy hill climb of board\r\n\t\t * \r\n\t\t * @param board will be modified to the best solution\r\n\t\t * @param numBaconDispensaries\r\n\t\t * @param random\r\n\t\t * @return score of best solution\r\n\t\t */\r\n\t\tprivate static long climbFromRandomStart(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tint numBaconDispensaries, \r\n\t\t\t\tRandom random) {\r\n\t\t\t\r\n\t\t\t//1: place bacon randomly\r\n\t\t\tList<Point> baconLocations = new ArrayList<Point>();\r\n\t\t\tfor(int count=0; count<numBaconDispensaries; count++) {\r\n\t\t\t\tint x,y;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tx = random.nextInt(board.getRows());\r\n\t\t\t\t\ty = random.nextInt(board.getCols());\r\n\t\t\t\t\t\r\n\t\t\t\t} while(!BaconBit.OPEN.equals(board.get(y, x)));\r\n\t\t\t\t\r\n\t\t\t\tboard.set(y, x, BaconBit.BACON);\r\n\t\t\t\t\r\n\t\t\t\tbaconLocations.add(new Point(x,y));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong lastOuterScore;\r\n\t\t\tlong thisOuterScore = board.getTotalBaconDistance();\r\n\t\t\tint lastUnusedBaconCount = baconLocations.size();\r\n\t\t\t\r\n\t\t\tdo {\r\n\t\t\t\tlastOuterScore = thisOuterScore;\r\n\t\t\t\t\r\n\t\t\t\t//2: Greedy Optimize\r\n\t\t\t\tthisOuterScore = greedyOptimizeBacons(board, baconLocations, lastOuterScore);\r\n\t\t\t\t\r\n\t\t\t\t//3: Redistribute unused bacon, \r\n\t\t\t\t//getting to this state is the boo part of greedy optimization...\r\n\t\t\t\tList<Point> unusedBacons = getUnusedBacons(board, baconLocations);\r\n\t\t\t\tif(unusedBacons.size() < lastUnusedBaconCount) {\r\n\t\t\t\t\tlastUnusedBaconCount = unusedBacons.size();\r\n\t\t\t\t\tthisOuterScore = placeUnusedBaconsInGlobalBestSpot(\tboard, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbaconLocations, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunusedBacons,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthisOuterScore);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} while (thisOuterScore < lastOuterScore);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn board.getTotalBaconDistance();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tKeep moving each bacon locally until none can be moved to increase the score\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param baconLocations\r\n\t\t * @param thisOuterScore\r\n\t\t * @return the resulting score, or thisOuterScore if no improvement\r\n\t\t */\r\n\t\tprivate static long greedyOptimizeBacons(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tList<Point> baconLocations,\r\n\t\t\t\tlong thisOuterScore) {\r\n\t\t\t\r\n\t\t\tlong lastGreedyScore;\r\n\t\t\tlong thisGreedyScore = thisOuterScore;\r\n\t\t\tdo {\r\n\t\t\t\tlastGreedyScore = thisGreedyScore;\r\n\t\t\t\tfor(Point p : baconLocations) {\r\n\t\t\t\t\tthisGreedyScore = greedyOptimizeBacon(board, p, lastGreedyScore);\r\n\t\t\t\t}\r\n\t\t\t} while(thisGreedyScore < lastGreedyScore);\r\n\t\t\t\r\n\t\t\treturn thisGreedyScore;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tMove the bacon at p, stepping by the elements in the moves[]\r\n\t\t * \r\n\t\t * \tStop when p can't be moved locally to increase the score\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param p\r\n\t\t * @param thisOuterScore\r\n\t\t * @return the resulting score, or thisOuterScore if no improvement\r\n\t\t */\r\n\t\tprivate static long greedyOptimizeBacon(BaconBoard board, Point p, long thisOuterScore) {\r\n\t\t\tlong lastScore;\r\n\t\t\tlong thisScore = thisOuterScore;\r\n\t\t\t\r\n\t\t\tdo {\r\n//\t\t\t\tSystem.out.println(board.toString());\r\n//\t\t\t\tSystem.out.println();\r\n//\t\t\t\tSystem.out.println(thisScore + \"\\t\" + p);\r\n//\t\t\t\tSystem.out.println();\r\n\t\t\t\t\r\n\t\t\t\tlastScore = thisScore;\r\n\t\t\t\t\r\n\t\t\t\tboard.set(p.y, p.x, BaconBit.OPEN);\r\n\t\t\t\t\r\n\t\t\t\tlong[] scores = new long[moves.length];\r\n\t\t\t\tlong bestMoveScore = lastScore;\r\n\t\t\t\tint bestJ = p.y;\r\n\t\t\t\tint bestI = p.x;\r\n\t\t\t\t\r\n\t\t\t\tmoveFor: for(int m=0; m<scores.length; m++) {\r\n\t\t\t\t\tint tryJ = p.y + moves[m].y;\r\n\t\t\t\t\tint tryI = p.x + moves[m].x;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(board.isOnBoard(tryJ, tryI)) {\r\n\t\t\t\t\t\twhile(!BaconBit.OPEN.equals(board.get(tryJ, tryI))) {\r\n\t\t\t\t\t\t\t//some fancy logic here, this allows us to make a local step\r\n\t\t\t\t\t\t\t//*over* something(s)... not sure how much help it is though\r\n\t\t\t\t\t\t\ttryJ += moves[m].y;\r\n\t\t\t\t\t\t\ttryI += moves[m].x;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!board.isOnBoard(tryJ, tryI)) {\r\n\t\t\t\t\t\t\t\tcontinue moveFor;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tboard.set(tryJ, tryI, BaconBit.BACON);\r\n\t\t\t\t\t\tscores[m] = board.getTotalBaconDistance();\r\n\t\t\t\t\t\tboard.set(tryJ, tryI, BaconBit.OPEN);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(scores[m] < bestMoveScore) {\r\n\t\t\t\t\t\t\tbestMoveScore = scores[m];\r\n\t\t\t\t\t\t\tbestJ = tryJ;\r\n\t\t\t\t\t\t\tbestI = tryI;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(bestMoveScore < lastScore) {\r\n\t\t\t\t\tp.y = bestJ;\r\n\t\t\t\t\tp.x = bestI;\r\n\t\t\t\t\tthisScore = bestMoveScore;\r\n\t\t\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} while(thisScore < lastScore);\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\t//this could be done much smarter; wanna see how fast it is for now\r\n\t\t/**\r\n\t\t * \tGo through each bacon in unusedBacons, and place them in the globally optimal spot\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param baconLocations\r\n\t\t * @param unusedBacons\r\n\t\t * @param startScore\r\n\t\t * @return the updated score if better, else startScore\r\n\t\t */\r\n\t\tprivate static long placeUnusedBaconsInGlobalBestSpot(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tList<Point> baconLocations,\r\n\t\t\t\tList<Point> unusedBacons,\r\n\t\t\t\tlong startScore) {\r\n\t\t\t\r\n\t\t\tlong thisScore = startScore;\r\n\t\t\t\r\n\t\t\tfor(Point p : unusedBacons) {\r\n\t\t\t\tthisScore = placeUnusedBacon(board, p, startScore);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tMove the bacon at p to the globally optimal spot\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param p\r\n\t\t * @param startScore\r\n\t\t * @return the resulting score if better, else startScore\r\n\t\t */\r\n\t\tprivate static long placeUnusedBacon(BaconBoard board, Point p, long startScore) {\r\n\t\t\tlong thisScore = startScore;\r\n\t\t\t\r\n\t\t\tboard.set(p.y, p.x, BaconBit.OPEN);\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.getRows(); j++) {\r\n\t\t\t\tfor(int i=0; i<board.getCols(); i++) {\r\n\t\t\t\t\tif(BaconBit.OPEN.equals(board.get(j, i))) {\r\n\t\t\t\t\t\tboard.set(j, i, BaconBit.BACON);\r\n\t\t\t\t\t\tlong test = board.getTotalBaconDistance();\r\n\t\t\t\t\t\tboard.set(j, i, BaconBit.OPEN);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(test < thisScore) {\r\n\t\t\t\t\t\t\tthisScore = test;\r\n\t\t\t\t\t\t\tp.y = j;\r\n\t\t\t\t\t\t\tp.x = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t//isn't needed, since it's only purpose would be to recache things\r\n\t\t\t//thisScore = board.getTotalBaconDistance();\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\tprivate static List<Point> getUnusedBacons(BaconBoard board, List<Point> baconLocations) {\r\n\t\t\tList<Point> rv = new ArrayList<Point>();\r\n\t\t\t\r\n\t\t\tfor(Point p : baconLocations) {\r\n\t\t\t\tif(!board.isBaconAndUsed(p.y, p.x)) {\r\n\t\t\t\t\trv.add(p);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static Point[] moves = new Point[] {\r\n\t\tnew Point(-1,-1),\r\n\t\tnew Point(0,-1),\r\n\t\tnew Point(1,-1),\r\n\t\t\r\n\t\tnew Point(-1,0),\r\n\t\tnew Point(1,0),\r\n\t\t\r\n\t\tnew Point(-1,1),\r\n\t\tnew Point(0,1),\r\n\t\tnew Point(1,1),\r\n\t};\r\n\t\r\n\tpublic static int numThreads() {\r\n\t\t//I think we want HyperThreading, because the thread local state is kind of small?\r\n\t\t//maybe not when the boards are huge...\r\n\t\treturn Runtime.getRuntime().availableProcessors();\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tString filename = \"\";\r\n\t\tint numRestarts = 0;\r\n\t\ttry {\r\n\t\t\tfilename = args[0];\r\n\t\t\tnumRestarts = Integer.valueOf(args[1]);\r\n\t\t} catch(Throwable t) {\r\n\t\t\tSystem.out.println(\"Usage: java ProggitQuizBaconChallenge FILENAME NUMBEROFRESTARTS\");\r\n\t\t\tSystem.exit(1);\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(filename));\r\n\t\t\tString boardString = \"\";\r\n\t\t\tString line = \"\";\r\n\t\t\t\r\n\t\t\twhile(line != null) {\r\n\t\t\t\tif(!\"\".equals(line)) {\r\n\t\t\t\t\tboardString += line + \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString line0 = boardString.split(\"\\n\")[0];\r\n\t\t\tline0 = boardString.split(\"\\n\")[0];\r\n\t\t\tString[] pieces = line0.split(\" \");\r\n\t\t\tint numBaconDispensaries = Integer.valueOf(pieces[pieces.length-1]);\r\n\t\t\t\r\n\t\t\tBaconBoard board = new BaconBoard(boardString);\r\n\t\t\t\r\n\t\t\tblockInvalidSpots(board);\r\n\t\t\t\r\n\t\t\tRandomRestartHillClimbingSolver solver;\r\n\t\t\tsolver = new RandomRestartHillClimbingSolver(numRestarts);\r\n\t\t\tBaconBoard solution = solver.solve(board, numBaconDispensaries);\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.println(\"Distance:\" + solution.getTotalBaconDistance());\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.println(\"Bacon at (row,col):\");\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<solution.getRows(); j++) {\r\n\t\t\t\tfor(int i=0; i<solution.getCols(); i++) {\r\n\t\t\t\t\tif(solution.isBacon(j, i)) {\r\n\t\t\t\t\t\tSystem.out.println(j + \"\\t\" + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(DEBUG) {\r\n\t\t\t\tSystem.out.println(solution.toString());\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n\r\n\t/**\r\n\t * \tOnly spots adjacent to bacon or at the intersection of straight lines\r\n\t * \tcoming out from two cities (4 lines per city) are possible solutions\r\n\t * \r\n\t * \tAdditionally, they must be inside the orthagonal convex hull (wiki it)\r\n\t * \t\r\n\t * \r\n\t * @param inputBoard\r\n\t * @return\r\n\t */\r\n\tprivate static int blockInvalidSpots(BaconBoard inputBoard) {\r\n\t\tBaconBoard board = new BaconBoard(inputBoard);\r\n\t\tint numInvalid = 0;\r\n\t\tfor(BaconBoardSquare city : board.citySquares) {\r\n\t\t\t//these maxDistToAnyFedCity are just placeholders, they will be cleared later\r\n\t\t\t//they represent the potential spots for bacon\r\n\t\t\tfor(int j=0; j<board.getRows(); j++) {\r\n\t\t\t\tif(BaconBit.OPEN.equals(board.get(j, city.x))) {\r\n\t\t\t\t\tboard.board[j][city.x].maxDistToAnyFedCity++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor(int i=0; i<board.getCols(); i++) {\r\n\t\t\t\tif(BaconBit.OPEN.equals(board.get(city.y, i))) {\r\n\t\t\t\t\tboard.board[city.y][i].maxDistToAnyFedCity++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(city.x > 0) {\r\n\t\t\t\tboard.board[city.y][city.x-1].maxDistToAnyFedCity++;\r\n\t\t\t}\r\n\t\t\tif(city.y > 0) {\r\n\t\t\t\tboard.board[city.y-1][city.x].maxDistToAnyFedCity++;\r\n\t\t\t}\r\n\t\t\tif(city.x < board.getCols()-1) {\r\n\t\t\t\tboard.board[city.y][city.x+1].maxDistToAnyFedCity++;\r\n\t\t\t}\r\n\t\t\tif(city.y < board.getRows()-1) {\r\n\t\t\t\tboard.board[city.y+1][city.x].maxDistToAnyFedCity++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tPoint[] corners = new Point[] {\r\n\t\t\t\tnew Point(0,0),\r\n\t\t\t\tnew Point(board.getCols(),0),\r\n\t\t\t\tnew Point(0,board.getRows()),\r\n\t\t\t\tnew Point(board.getCols(),board.getRows()),\r\n\t\t};\r\n\t\t\r\n\t\t//prune everything outside the orthagonal convex hull\r\n\t\tfor(Point corner : corners) {\r\n\t\t\tint xMove;\r\n\t\t\tint xExtentMax;\t//inclusive\r\n\t\t\tint xStart;\t\t//inclusive\r\n\t\t\tif(corner.x == 0) {\r\n\t\t\t\txMove = 1;\r\n\t\t\t\txExtentMax = board.getCols()-1;\r\n\t\t\t\txStart = 0;\r\n\t\t\t} else {\r\n\t\t\t\txMove = -1;\r\n\t\t\t\txExtentMax = 0;\r\n\t\t\t\txStart = board.getCols()-1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint yMove;\r\n\t\t\tint yExtentMax;\t//inclusive\r\n\t\t\tint yStart;\t\t//inclusive\r\n\t\t\tif(corner.y == 0) {\r\n\t\t\t\tyMove = 1;\r\n\t\t\t\tyStart = 0;\r\n\t\t\t\tyExtentMax = board.getRows()-1;\r\n\t\t\t} else {\r\n\t\t\t\tyMove = -1;\r\n\t\t\t\tyStart = board.getRows()-1;\r\n\t\t\t\tyExtentMax = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int j=yStart; (yExtentMax-j)*yMove > 0; j+=yMove) {\r\n\t\t\t\tfor(int i=xStart; (xExtentMax-i)*xMove > 0; i+=xMove) {\r\n\t\t\t\t\tif(BaconBit.OPEN.equals(board.get(j, i))) {\r\n\t\t\t\t\t\tboard.board[j][i].maxDistToAnyFedCity = -1;\r\n\t\t\t\t\t} else if(BaconBit.CITY.equals(board.get(j, i))) {\r\n\t\t\t\t\t\txExtentMax = i;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor(int j=0; j<board.getRows(); j++) {\r\n\t\t\tfor(int i=0; i<board.getCols(); i++) {\r\n\t\t\t\tif(board.board[j][i].maxDistToAnyFedCity < 1) {\r\n\t\t\t\t\tif(BaconBit.OPEN.equals(board.get(j, i))) {\r\n\t\t\t\t\t\tinputBoard.set(j, i, BaconBit.INVALID);\r\n\t\t\t\t\t\tnumInvalid++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn numInvalid;\r\n\t}\r\n}\r\n", "problem": 4}}, {"pk": 46, "model": "challenges.solution", "fields": {"language": 15, "title": "Slower than real annealing", "author": 47, "submitted": "2010-07-16", "source": "--\r\n-- Copyright (c) 2010 johnny_ozone\r\n--\r\n-- Permission is hereby granted, free of charge, to any person obtaining a copy\r\n-- of this software and associated documentation files (the \"Software\"), to deal\r\n-- in the Software without restriction, including without limitation the rights\r\n-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n-- copies of the Software, and to permit persons to whom the Software is\r\n-- furnished to do so, subject to the following conditions:\r\n--\r\n-- The above copyright notice and this permission notice shall be included in\r\n-- all copies or substantial portions of the Software.\r\n--\r\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n-- THE SOFTWARE.\r\n--\r\n--\r\n-- proggitquiz 4 -- Bacon Graph\r\n--\r\n--  This is an application of simulated annealing to proggitquiz challenge\r\n--  #4, Bacon Graph.\r\n--\r\n--  I wasn't going to submit this at first, because of how slow it is. However,\r\n--  I decided to submit it, anyway, because hell, why not? I also built a\r\n--  version which used the vector package, but the performance was less\r\n--  predictable (and didn't improve it enough to make it worthwhile).\r\n--\r\n--  Simulated annealing (en.wikipedia.org/wiki/Simulated_annealing) is a\r\n--  probabilistic algorithm for optimization. This means two things: it is\r\n--  not guaranteed to find the optimal solution, but it can be run\r\n--  successively to generate better and better approximations.\r\n--\r\n--  This implementation:\r\n--   - uses a temperature function -log (k/kmax)\r\n--   - restarts the anneal if e > (2-k/kmax) * ebest\r\n--   - randomly moves a bacon center from one place on the map\r\n--     to any other\r\n--\r\n--  To compile, you should have the Haskell platform installed, or at least,\r\n--  the associated libraries. You will also need the MonadRandom package\r\n--  from Hackage:\r\n--    $ cabal install monadrandom\r\n--  Then, simply:\r\n--    $ ghc --make -O3 bacon.hs -o bacon\r\n--\r\n--  bacon -h will give you options:\r\n--    $ bacon -h\r\n--    Usage: bacon [-kiter] [file]\r\n--     -k Double  --kmax=Double       Set number of steps in anneal (default 50000)\r\n--     -i Int     --iterations=Int    Number of times to anneal (default 20)\r\n--     -t Double  --temp=Double       Scale annealing temperature (default 0.01)\r\n--     -e Double  --maxenergy=Double  Maximum energy to try and achieve\r\n--     -r File    --resume=File       Resume from starting conditions in file\r\n--\r\n--  file is the bacon input file. The stdout output of a run of this program\r\n--  can be saved as state to continue from. You can resume from this state\r\n--  using the -r option. The other options are (hopefully) already well\r\n--  enough documented above.\r\n--\r\n--  Picking good values:\r\n--\r\n--  The default values are overkill for most of the maps. For example,\r\n--  sufficient solutions are found with the below values and times:\r\n--\r\n--    small  - k = 300,   i = 1, t < 0.01s\r\n--    medium - k = 5000,  i = 1, t < 0.1s\r\n--    large  - k = 30000, i = 1, t < 1s\r\n--\r\n--  For the ryan maps, a little more experimentation is needed. For example,\r\n--\r\n--    ryan-01 - distance = 128, k = 10000, i = 15, t = 51s\r\n--    ryan-01 - distance = 128, k = 50000, i = 10, t = 73s\r\n--\r\n--  Picking good k and i values can be tricky; good luck.\r\n--\r\n--  Best scores:\r\n--\r\n--    ryan-01 - 128,  36s (k =  20000, i = 10)\r\n--    ryan-02 - 389, 763s (k = 100000, i = 20)\r\n--    ryan-03 - ...\r\n--\r\n--  (N.B. - This is my first \"big\" Haskell program, having started learning\r\n--   Haskell this summer. Please forgive any major mistakes -- it's my first\r\n--   time! Comments/flames are welcome to johnny_ozone on reddit)\r\n--\r\n\r\n{-# LANGUAGE BangPatterns, FlexibleContexts #-}\r\n\r\nimport Prelude hiding(elem)\r\nimport Control.Applicative\r\nimport Control.Monad(liftM)\r\nimport Control.Monad.Random\r\nimport Control.Monad.Reader\r\nimport Control.Monad.State.Class(get, put, MonadState)\r\nimport Control.Monad.State.Lazy(evalStateT, StateT)\r\nimport Control.Monad.Trans(lift)\r\nimport Control.Parallel\r\nimport Control.Parallel.Strategies\r\nimport Data.Char(isDigit, isAlphaNum)\r\nimport Data.Foldable(foldl', elem, Foldable, minimumBy, foldMap)\r\nimport Data.Function(on)\r\nimport Data.List(groupBy, sort, delete, nub)\r\nimport Data.Monoid\r\nimport Data.Ord(comparing)\r\nimport System.Console.GetOpt\r\nimport System.Environment(getArgs)\r\nimport System.Exit\r\nimport System.IO\r\nimport System.Random(mkStdGen, RandomGen, StdGen, randomR, randomRs)\r\n\r\n-- Boring. Parse args, set up initial state, and print out the final results\r\nmain = do\r\n    args <- getArgs\r\n    conf <- parse args defaultConfig\r\n    let (config, leftoverArgs) = conf\r\n    startState <- case startFrom config of\r\n        Just f -> liftM read $ readFile f\r\n        Nothing -> do\r\n            cityStr <- liftM lines $ readFile $ head leftoverArgs\r\n            let (x,y) = getCitySize $ head cityStr\r\n                popCenters = mkPopCenters cityStr\r\n                cityMap = filter (not . (`elem` popCenters)) $ mkCityMap cityStr\r\n                bacons = getNumBacons cityStr\r\n                xstart = randomRs (0, x) (mkStdGen 1234)\r\n                ystart = randomRs (0, y) (mkStdGen 12345)\r\n                start = take bacons $ filter (`notElem` popCenters) $ nub (zip xstart ystart)\r\n                startDistance = distance start popCenters\r\n            return (BaconCity startDistance bacons (x,y) start popCenters)\r\n    print $ annealLoop (iterations config) (mkStdGen 4321) config startState\r\n    where defaultConfig = AnnealConfig {\r\n                            kmax = 50000.0\r\n                          , iterations = 20\r\n                          , tempScale = 0.01\r\n                          , maxEnergy = 0\r\n                          , startFrom = Nothing\r\n                          }\r\n\r\n-- Just run the anneal in a loop, giving it a new random generator and the\r\n-- state of the previous run.\r\nannealLoop 0 g c s = s\r\nannealLoop n g c s = do\r\n    let (g', g'') = split g\r\n    let s' = simAnneal g' c s\r\n    annealLoop (n-1) g'' c s'\r\n\r\n-- Parse args.\r\nparse argv config = parse' (getOpt Permute flags argv) config\r\n\r\n-- As seen below, flags returns lambdas, which we then apply to our config\r\n-- in order to add in the things we've parsed. Error out if we get any unknowns\r\nparse' (actions, fs, []) config = return $ (foldr ($) config actions, fs)\r\nparse' (_, _, errs) _ = hPutStrLn stderr (usageInfo header flags) >> exitWith (ExitFailure 1)\r\n    where header = \"Usage: bacon [-kiter] [file]\"\r\n\r\nflags =\r\n    [ Option ['k'] [\"kmax\"] (ReqArg (\\x s -> s { kmax = read x }) \"Double\")\r\n      \"Set number of steps in anneal (default 50000)\"\r\n    , Option ['i'] [\"iterations\"] (ReqArg (\\x s -> s { iterations = read x}) \"Int\")\r\n      \"Number of times to anneal (default 20)\"\r\n    , Option ['t'] [\"temp\"] (ReqArg (\\x s -> s { tempScale = read x }) \"Double\")\r\n      \"Scale annealing temperature (default 0.01)\"\r\n    , Option ['e'] [\"maxenergy\"] (ReqArg (\\x s -> s { maxEnergy = read x }) \"Double\")\r\n      \"Maximum energy to try and achieve\"\r\n    , Option ['r'] [\"resume\"] (ReqArg (\\x s -> s { startFrom = Just x }) \"File\")\r\n      \"Resume from starting conditions in file\"\r\n    ]\r\n\r\n-- Annealable class. Theoretically, you could re-use the simulated annealing\r\n-- code for another problem, just by implementing Annealable for the datatype.\r\n-- Theoretically.\r\nclass (Eq a, Ord a) => Annealable a where\r\n    randNeighbor :: RandomGen g => g -> a -> a\r\n    energy :: a -> Double\r\n\r\n-- Configuration parameters\r\ndata AnnealConfig = AnnealConfig\r\n    { kmax :: Double\r\n    , iterations :: Integer\r\n    , tempScale :: Double\r\n    , maxEnergy :: Double\r\n    , startFrom :: Maybe String\r\n    } deriving (Show, Read)\r\n\r\n-- State storing the best anneal\r\ndata AnnealState a = AnnealState\r\n    { sbest :: !a\r\n    , ebest :: !Double\r\n    , kbest :: !Double\r\n    } deriving (Eq, Ord, Show, Read)\r\n\r\ntype Point = (Int, Int)\r\n\r\n-- The data that we're annealing\r\ndata BaconCity = BaconCity {\r\n    -- total distance of all population centers to their bacons\r\n      baconDistance     :: !Int\r\n    -- number of bacons on the board\r\n    , numBacons         :: !Int\r\n    -- (x,y) size of the map\r\n    , citySize          :: !(Int, Int) \r\n    -- a list of locations of all of the bacons\r\n    , baconLocations    :: ![Point]\r\n    -- a list of locations of all of the populaion centers\r\n    , populationCenters :: ![Point]\r\n    } deriving (Eq, Ord, Show, Read)\r\n\r\n-- Implementation of aforementioned class for aforementioned datatype.\r\ninstance Annealable BaconCity where\r\n    -- Pick a random point on the map, making sure it isn't occupied\r\n    -- then update and return our state. We pick a random space anywhere\r\n    -- on the map, rather than just shifting the bacon center over one\r\n    -- space, because it helps us escape local minima faster.\r\n    randNeighbor g a = moveBacon a $ (newCoords, oldCoords)\r\n        where newCoords = head $ validNeighbors a randCoords\r\n              oldCoords = randomL g (baconLocations a)\r\n              randCoords = zip xs ys\r\n              (g', g'') = split g\r\n              xs = randomRs (0, xsize) g'\r\n              ys = randomRs (0, ysize) g''\r\n              (xsize, ysize) = citySize a\r\n    -- Simply return the distance. Actual distance calculation is below.\r\n    energy = fromIntegral . baconDistance\r\n\r\n-- Filters out invalid points in b.\r\n-- Note that above it relies on laziness, because it gets in an infinite list\r\n-- of random coordinates.\r\nvalidNeighbors b = filter (\\xy ->\r\n    xy `notElem` populationCenters b && xy `notElem` baconLocations b)\r\n\r\n-- Updates our data by removing the old coordinate and replacing it with\r\n-- the new one.\r\nmoveBacon b@(BaconCity d _ _ l p) (to, from) = b { baconDistance = newDistance\r\n                                                 , baconLocations = newBacon }\r\n    where newBacon = to : delete from l\r\n          newDistance = distance newBacon p\r\n\r\n-- Manhattan distance calculation.\r\ndist :: (Int, Int) -> (Int, Int) -> Int\r\ndist (x1, y1) (x2, y2) = (abs (x1 - x2)) + (abs (y1 - y2))\r\n\r\n-- Finds the smallest distance to the population center from all bacons\r\nclosest :: [(Int, Int)] -> (Int, Int) -> Int\r\nclosest bacons point = foldl' (min' point) maxBound bacons\r\n    where min' p1 s p2 = let d = dist p1 p2 in min d s\r\n\r\n-- Finds the total distance from all population centers to their closest bacon\r\ndistance bacons points = foldl' (flip ((+) . (closest bacons))) 0 points\r\n\r\n-- Gets a random item from a list. Note that it does not return a new random\r\n-- generator.\r\nrandomL g l = head $ drop (fst $ randomR (0, (length l) - 1) g) l\r\n\r\n-- The springboard function for our simulated anneal. Initializes a couple of\r\n-- monads and sets up our initial state.\r\nsimAnneal :: (RandomGen g, Annealable a) => g -> AnnealConfig -> a -> a\r\nsimAnneal g c s =\r\n    evalRand (runReaderT (evalStateT (anneal s e 0) (AnnealState s e 0)) c) g\r\n    where e = energy s\r\n\r\n-- The actual anneal function. The monad Rand is used as a source of random\r\n-- numbers. ReaderT is applied on top of that, storing our configuration\r\n-- parameters. Finally, StateT is at the top of the totem, storing our best\r\n-- anneals.\r\n--\r\n-- Function will continue to anneal until k reaches kmax, or the energy\r\n-- drops down to emax. emax is not set by default (well, it's set to 0).\r\n--\r\n-- Type annotation is left to the reader.\r\nanneal s e k = do\r\n    state <- get\r\n    rand <- getRandomR (0,1.0)\r\n    g <- liftM mkStdGen getRandom\r\n    c <- asks tempScale\r\n    kmax <- asks kmax\r\n    emax <- asks maxEnergy\r\n    let !snew = randNeighbor g s\r\n        !enew = energy snew\r\n        (!s', !e') = if (probability e enew (temp c (k/kmax))) > rand\r\n                         then (snew, enew)\r\n                         else (s, e)\r\n    if enew < ebest state\r\n        then put (AnnealState snew enew k)\r\n        else return ()\r\n    if k < kmax && ebest state > emax\r\n        then if e' > (2-k/kmax) * ebest state\r\n                then anneal (sbest state) (ebest state) (kbest state)\r\n                else anneal s' e' (k+1)\r\n        else return $ sbest state\r\n\r\n-- Temperature function. Empirical tweaking has arrived at this as the\r\n-- best candidate. c is a scale factor -- tweak it up to turn up the heat.\r\ntemp c k = sqrt ((-c) * log k)\r\n\r\n-- \"Standard\" probability function.\r\nprobability e enew t\r\n    | enew < e = 1\r\n    | otherwise = exp ((e - enew) / t)\r\n\r\n-- Generate city map\r\nmkCityMap :: [String] -> [Point]\r\nmkCityMap (cityStr:_) = uncurry generateGraph $ getCitySize cityStr\r\n\r\ngenerateGraph x y = [(x, y) | x <- [0..(x-1)], y <- [0..(y-1)]]\r\n\r\ngetCitySize :: [Char] -> (Int, Int)\r\ngetCitySize cityStr = (x, y)\r\n    where x = read $ (takeWhile isDigit) cityStr\r\n          y = (read $ (takeWhile isDigit) $ tail $ (dropWhile isDigit) cityStr)\r\n\r\n-- Get population centers\r\nmkPopCenters :: (Monoid (f Point), Applicative f) => [String] -> f Point\r\nmkPopCenters (_:cityStr) = let (_,cs) = foldl' step (0,mempty) cityStr in cs\r\n    where step (y,cities) line = (y+1, (procLine line y) `mappend` cities)\r\n\r\nprocLine str = procLineRec str mempty 0\r\n\r\nprocLineRec (c:str) cities x y\r\n    | c == 'P'  = procLineRec str ((pure (x, y)) `mappend` cities) (x+1) y\r\n    | otherwise = procLineRec str cities (x+1) y\r\nprocLineRec [] cities _ _ = cities\r\n\r\n-- Get number of bacons\r\ngetNumBacons :: [String] -> Int\r\ngetNumBacons (cityStr:_) = read $ (drop 1) $ dropWhile isAlphaNum $ cityStr\r\n", "problem": 4}}, {"pk": 4, "model": "challenges.solution", "fields": {"language": 24, "title": "Excedrin`", "author": 1, "submitted": "2010-06-09", "source": "#!/usr/bin/perl\r\nuse Data::Dumper;\r\nuse strict;\r\n\r\nopen IF, \"/usr/share/cracklib/cracklib-small\" or die $!;\r\nmy %bylength = ();\r\nfor (<IF>) {\r\n    chomp($_); \r\n    next if /[^a-z]/;\r\n    push @{$bylength{length $_}}, uc($_);\r\n}\r\nclose IF;\r\n\r\nsub decodeword {\r\n    my $cipher = shift;\r\n    my $code = shift;\r\n    join '', map { /[A-Z]/ ? ($cipher->{$_} or '.') : $_ } split //, $code;\r\n}\r\n\r\nsub decodetest {\r\n    my $cipher = shift;\r\n    my $code = shift;\r\n    scalar map { !/[A-Z]/ || $cipher->{$_} || return undef } split //, $code;\r\n}\r\n\r\nsub makefilter {\r\n    my ($cipher, $code) = @_;\r\n    my $filter = join '', map { $cipher->{$_} or lc($_) } split //, $code;\r\n    # build backreferences for characters not in the cipher\r\n    $filter =~ s/([a-z])(.*?)\\1/(.)$2\\\\1/ && $filter =~ s/$1/\\\\1/g;\r\n    $filter =~ s/([a-z])(.*?)\\1/(.)$2\\\\2/ && $filter =~ s/$1/\\\\2/g;\r\n    $filter =~ s/([a-z])(.*?)\\1/(.)$2\\\\3/ && $filter =~ s/$1/\\\\3/g;\r\n    $filter = join '', map { /[a-z]/ && '.' || $_ } split //, $filter;\r\n\r\n#    print \"filterhax: $filter\\n\";\r\n}\r\n\r\nsub wordsearch {\r\n    my $cipher = shift;\r\n    my $message = shift;\r\n    my $skip = shift;\r\n    my $word = shift;\r\n    my @words = @_;\r\n\r\n    if (decodetest($cipher, $word)) {\r\n        # got a complete decode, don't need to search this one, so check next word\r\n        return wordsearch($cipher, $message, $skip, @words);\r\n    }\r\n\r\n    if (! exists $bylength{length $word}) {\r\n#        print \"no dictionary words for $word\\n\";\r\n        return undef;\r\n    }\r\n\r\n    my $filter = makefilter($cipher, $word);\r\n\r\n    my $wlen = length $word;\r\n\r\n    my @wordchars = split //, $word;\r\n    my $failct = 0;\r\n    WORD: for my $tryword (@{$bylength{$wlen}}) {\r\n        if ($tryword !~ /$filter/) {\r\n#            print \"filtered $tryword\\n\";\r\n            next WORD;\r\n        }\r\n\r\n#        print \"tryword: $tryword $word $filter\\n\";\r\n        my %trycipher = %$cipher;\r\n\r\n        # assume that $tryword is the correct decoding of $word\r\n        # try to add tryword's letters to the subst cipher\r\n        my @trychars = split //, $tryword;\r\n        for (@wordchars) {\r\n            if (exists $trycipher{$_} && $trychars[0] ne $trycipher{$_}) {\r\n                next WORD;\r\n            }\r\n            $trycipher{$_} = shift @trychars;\r\n        }\r\n\r\n        # ensure 1-to-1 mapping\r\n        my %revcipher = map { $trycipher{$_} => $_ } keys %trycipher;\r\n        if (scalar keys(%trycipher) == scalar keys(%revcipher)) {\r\n#            my $partial = decodeword(\\%trycipher, $message, 1);\r\n#            print \"partial $partial\\n\";\r\n\r\n            if (decodetest(\\%trycipher, $message)) {\r\n#                print \"returning complete\\n\";\r\n                return \\%trycipher;\r\n            }\r\n\r\n            my $good = wordsearch(\\%trycipher, $message, $skip, @words);\r\n            return $good if $good;\r\n\r\n            $failct++;\r\n        }\r\n    }\r\n\r\n    # couldn't find a word in the dictionary, try to skip this word and\r\n    # forge ahead anyway\r\n    if (keys(%$cipher)) {\r\n        # only skip from lower levels, not from top level\r\n#        print \"skipping word $skip $word\\n\";\r\n        $skip++;\r\n    }\r\n    if ($skip > 4) {\r\n        # if we had to skip N words in a row then we probably need to backtrack\r\n        #print \"depth cut $skip\\n\";\r\n        return undef;\r\n    }\r\n    return wordsearch($cipher, $message, $skip, @words);\r\n}\r\n\r\nfor (<>) {\r\n    my $message = $_;\r\n    chomp($message);\r\n\r\n    my @sortedwords = grep { $_ } sort { length($b) <=> length($a) } split /\\W/, $message;\r\n\r\n    my $cipher = wordsearch({}, $message, 0, @sortedwords);\r\n    #for (1 .. 10) {\r\n    #    $cipher = wordsearch({}, $message, 0, @sortedwords);\r\n    #}\r\n    print Dumper $cipher;\r\n    my $sln = decodeword($cipher, $message);\r\n    print \"solution: $sln\\n\";\r\n}", "problem": 2}}, {"pk": 5, "model": "challenges.solution", "fields": {"language": 4, "title": "", "author": 6, "submitted": "2010-06-17", "source": "// dice.l ---------------------------------------------------------\r\n\r\n%{\r\n#include \"dice.tab.h\"\r\nextern int yylval;\r\n%}\r\n%%\r\n[ \\t]\t\t/*consume*/;\r\n\\n\t\treturn tNew;\r\n\\+\t\treturn tPlus;\r\n\\-\t\treturn tMinus;\r\n\\*\t\treturn tMult;\r\n\\\\\t\treturn tDiv;\r\n\\(\t\treturn tLParen;\r\n\\)\t\treturn tRParen;\r\nd\t\treturn tD;\r\nk\t\treturn tK;\r\n[1-9][0-9]*\tyylval=atoi(yytext); return tNUM;\r\n.\t\tyylval=(int)yytext; return tErr;\r\n\r\n\r\n// dice.y ---------------------------------------------------------\r\n\r\n%{\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint lineno=1;\r\nextern char* yytext;\r\n\r\nint compare_rolls(const void* a, const void* b) {\r\n\tif(*(int*)a<*(int*)b) return 1;\r\n\tif(*(int*)a>*(int*)b) return -1;\r\n\treturn 0;\r\n}\r\n\r\nint dice(int n, int d, int k) {\r\n\tif(n==1) return ((rand() % d) + 1);\r\n\tint i;\r\n\tint sum = 0;\r\n\tif(k==n) {\r\n\t\tfor(i=0;i<n;i++) sum+=((rand() % d) + 1);\r\n\t\treturn sum;\r\n\t}\r\n\tint rolls[n];\r\n\tfor(i=0;i<n;i++) rolls[i]=((rand() % d) + 1);\r\n\tqsort(rolls,d,sizeof(int),compare_rolls);\r\n\tfor(i=0;i<k;i++) sum+=rolls[i];\r\n\treturn sum;\r\n}\r\n\r\n%}\r\n\r\n%token tPlus tMinus tMult tDiv tD tK tNUM tLParen tRParen tNew tErr\r\n%%\r\n\r\nstart:\tstart input tNew\t{printf(\"\\t%d\\n\",$2); ++lineno;}\r\n\t| input\ttNew\t\t{printf(\"\\t%d\\n\",$1); ++lineno;}\r\n\t;\r\n\r\ninput:\tinput tPlus am\t\t{$$ = $1 + $3;}\r\n\t| input tMinus am\t{$$ = $1 - $3;}\r\n\t| am\r\n\t;\r\n\r\nam:\tam tMult exp\t\t{$$ = $1 * $3;}\r\n\t| am tDiv exp\t\t{$$ = $1 / $3;}\r\n\t| exp\r\n\t;\r\n\r\nexp:\tterm\r\n\t| tD term\t\t{$$ = dice(1,$2,1);}\r\n\t| term tD term\t\t{$$ = dice($1,$3,$1);}\r\n\t| term tD term tK term\t{$$ = dice($1,$3,$5);}\r\n\t;\r\n\r\nterm:\tpexp\r\n\t| tNUM\t\t\t{$$ = yylval;}\r\n\t;\r\n\r\npexp:\ttLParen input tRParen\t{$$ = $2;}\r\n\t;\r\n\r\n%%\r\nint yyerror(char* s) {\r\n\tif (yytext[0]==10) fprintf(stderr, \"!!SYNTAX ERROR!! on line %d. Token read was NEWLINE.\\n\", lineno);\r\n\telse fprintf(stderr, \"!!SYNTAX ERROR!! on line %d. Token read was \\\"%s\\\".\\n\", lineno, yytext);\r\n}\r\n\r\nint main() {\r\n\tsrand((unsigned int)time(NULL));\r\n\treturn yyparse();\r\n}\r\n \r\n\r\n\r\n// Makefile -------------------------------------------------------\r\n\r\nP=dice\r\n\r\n${P}:\t\t${P}.tab.o lex.yy.o\r\n\t\tgcc -o $@ $^ -lfl\r\n\r\n%.o:\t\t%.c ${P}.tab.h\r\n\t\tgcc -c $^\r\n\r\n${P}.tab.h:\t${P}.y\r\n\t\tbison -d ${P}.y\r\n\r\nlex.yy.c:\t${P}.l\r\n\t\tflex ${P}.l\r\n\r\n${P}.tab.c:\t${P}.y\r\n\t\tbison ${P}.y\r\n\r\nclean:\r\n\t\trm *.tab.* *.yy.* ${P}\r\n", "problem": 1}}, {"pk": 40, "model": "challenges.solution", "fields": {"language": 5, "title": "Another GA (improved)", "author": 44, "submitted": "2010-07-15", "source": "// \r\n// My first GA attempt ever. Might be inaccurate, but seems to work pretty well :). \r\n// No tricky decisions, I hope :).\r\n// As an output it displays the average fitness of each generation and \r\n// the solution in the end.\r\n//\r\n// g++ -O3 -o baconz ./baconz.cpp\r\n// ./baconz <input file name>\r\n//\r\n// Some measurements:\r\n//\r\n//  tournament_size was 4 until I found out it gives much better result if bigger.\r\n//\r\n//  Problem\t\t\tDistance\tIterations\tSearch space\ttime\r\n//  med-01\t\t\t16\t\t\t100\t\t\t64\t\t\t\t0.02s\r\n//  large-01\t\t43\t\t\t100\t\t\t128\t\t\t\t0.05s\r\n//  ryan-01\t\t\t135\t\t\t200\t\t\t512\t\t\t\t1.21s\r\n//  ryan-02\t\t\t454\t\t\t400\t\t\t512\t\t\t\t6.82s\r\n//\t\t\t\t\t450\t\t\t200\t\t\t64\t\t\t\t3.95s // tournament_size = 64\r\n//\t\t\t\t\t441\t\t\t200\t\t\t256\t\t\t\t2.29s // tournament_size = 128\r\n//  ryan-03\t\t\t3270\t\t400\t\t\t512\t\t\t\t73.33s\r\n//\t\t\t\t\t3222\t\t400\t\t\t1024\t\t\t144.25s\r\n//\t\t\t\t\t3095\t\t4000\t\t64\t\t\t\t94.15s\r\n//\t\t\t\t\t3130\t\t400\t\t\t64\t\t\t\t10.26s // tournament_size = 8\r\n//\t\t\t\t\t2808\t\t200\t\t\t256\t\t\t\t20.72s // tournament_size = 128\r\n//\r\n//\r\n// Made by Tam\u00e1s Szelei (sztomi) \r\n// 2010\r\n//\r\n// BTW, thanks, it was a real fun learning genetic algorithms :).\r\n//\r\n#include <cstdio>\r\n#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n#include <climits>\r\n#include <ctime>\r\n#include <cstdlib>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <istream>\r\n\r\nusing namespace std;\r\n\r\n// params to tweak\r\nconst float mutation_prob = 0.05f; // larger probability gave worse results \r\nconst int search_space = 256; // might be a good idea to make larger for larger maps\r\nconst int num_iterations = 200;\r\nconst int tournament_size = 128;\r\n\r\nstruct Point {\r\n\tint x, y;\r\n\r\n\tPoint() : x(0), y(0)  {}\r\n\tPoint(int xx, int yy) : x(xx), y(yy) {}\r\n\r\n\t// Taxi-cab distance\r\n\tint operator-(Point& other) { return abs( x - other.x ) + abs( y - other.y ); }\r\n\tbool operator==(Point& other) { return x == other.x && y == other.y; }\r\n};\r\n\r\n// the creature\r\nclass Solution {\r\n\tvector<Point>* pcenters;\r\n\tbool fcached;\r\n\tfloat cache_fitness;\r\n\tint k, n, m;\r\n\r\npublic:\r\n\tvector<Point> bacons; // the genom\r\n\r\n\tSolution( const Solution& other ) {\r\n\t\tk = other.k; n = other.n; m = other.m;\r\n\t\tpcenters = other.pcenters;\r\n\t\tfcached = false;\r\n\t\tfor ( int i = 0; i < other.bacons.size(); ++i ) {\r\n\t\t\tbacons.push_back( other.bacons[i] );\r\n\t\t}\r\n\t}\r\n\r\n\tSolution* fight( Solution* other ) {\r\n\t\tif ( other->fitness() > this->fitness() ) {\r\n\t\t\treturn other;\r\n\t\t} else {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t// k: no. of bacons\r\n\t// n, m: size of city\r\n\tSolution( vector<Point>* centers, int kk, int nn, int mm ) : k(kk), n(nn), m(mm) {\r\n\t\tpcenters = centers;\r\n\t\tfcached = false;\r\n\t\tvector<Point>::iterator it, p_it;\r\n\t\t// generate random bacons\r\n\t\tfor ( int i = 0; i < k; ++i ) {\r\n\t\t\tbool goback = false;\r\n\t\t\tint nn = rand() % n;\r\n\t\t\tint mm = rand() % m;\r\n\r\n\t\t\tfor ( it = bacons.begin(); it != bacons.end(); ++it ) {\r\n\t\t\t\tif ( n == it->x && m == it->y ) {\r\n\t\t\t\t\tnn = rand() % n;\r\n\t\t\t\t\tmm = rand() % m;\r\n\t\t\t\t\tit = bacons.begin();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tPoint p( nn, mm );\r\n\r\n\t\t\tfor ( p_it = pcenters->begin(); p_it != pcenters->end(); ++p_it ) {\r\n\t\t\t\tif ( *p_it == p ) {\r\n\t\t\t\t\tgoback = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( goback ) {\r\n\t\t\t\t--i;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tbacons.push_back( Point( nn, mm ) );\r\n\t\t}\r\n\t}\r\n\r\n\tvoid uncache() { fcached = false; }\r\n\r\n\tfloat fitness() {\r\n\t\tif ( fcached ) {\r\n\t\t\treturn cache_fitness;\r\n\t\t}\r\n\r\n\t\tvector<Point>::iterator p_it;\r\n\t\tvector<Point>::iterator p_end = pcenters->end();\r\n\t\tvector<Point>::iterator b_it;\r\n\t\tvector<Point>::iterator b_end = bacons.end();\r\n\r\n\t\tint sum_dist = 0; // sum of distances\r\n\r\n\t\tfor ( p_it = pcenters->begin(); p_it != p_end; ++p_it ) {\r\n\t\t\t// find closest bacon distance for every P\r\n\t\t\tint min_dist = INT_MAX;\r\n\t\t\tfor ( b_it = bacons.begin(); b_it != b_end; ++b_it ) {\r\n\t\t\t\tif ( *b_it - *p_it < min_dist ) {\r\n\t\t\t\t\tmin_dist = *b_it - *p_it;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsum_dist += min_dist;\r\n\t\t}\r\n\t\tcache_fitness = 1.0f / (float)sum_dist; fcached = true; // I didn't set this flag first :)\r\n\t\treturn cache_fitness;\r\n\t}\r\n\r\n\t// crossover function.\r\n\tSolution* breed( Solution* other ) {\r\n\r\n\t\tSolution* child = new Solution( *this );\r\n\r\n\t\tchild->uncache();\r\n\r\n\t\tint cross_start = rand() % bacons.size();\r\n\t\tint cross_len = rand() % (bacons.size() - cross_start);\r\n\r\n\t\tfor ( int i = cross_start; i < cross_start + cross_len; ++i ) {\r\n\t\t\tchild->bacons[i] = other->bacons[i];\r\n\t\t}\r\n\t\t\r\n\t\tchild->mutate(); // chance to mutate\r\n\r\n\t\treturn child;\r\n\t}\r\n\r\nprivate:\r\n\tvoid mutate() { // change bacons at random ...\r\n\t\tvector<Point>::iterator it;\r\n\r\n\t\tvector<Point> c = *pcenters;\r\n\r\n\t\tfor ( it = bacons.begin(); it != bacons.end(); ++it ) {\r\n\t\t\tfloat rnd = (float)rand() / (float)RAND_MAX;\r\n\t\t\tif ( rnd <= mutation_prob ) {\r\n\t\t\t\tint chx = (rand() % (n/8)) * ( !(rand() % 2 - 1) ? 1 : -1 );\r\n\t\t\t\tint chy = (rand() % (m/8)) * ( !(rand() % 2 - 1) ? 1 : -1 );\r\n\t\t\t\t\r\n\t\t\t\tbool sucks = false; // ... but check if they aren't placed on P's\r\n\t\t\t\tfor ( int i = 0; i < c.size(); ++i ) {\r\n\t\t\t\t\tif ( it->x + chx == c[i].x && it->y + chy == c[i].y ) {\r\n\t\t\t\t\t\tsucks = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !sucks ) {\r\n\t\t\t\t\tit->x += chx;\r\n\t\t\t\t\tit->y += chy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nclass City {\r\n\tint n, m, k;\r\n\tvector<Point> centers;\r\n\tvector<Solution*> solutions;\r\n\tint generation;\r\n\tfloat prev_avg;\r\n\tSolution* elite;\r\n\tbool hasFound;\r\n\r\npublic:\r\n\tint getSolutionsCount() { return solutions.size(); }\r\n\r\n\tvoid load( char* filename ) {\r\n\t\tprev_avg = 0; hasFound = false;\r\n\t\tifstream f;\r\n\t\tstring line;\r\n\t\tf.open( filename );\r\n\r\n\t\tif ( f.is_open() ) {\r\n\t\t\tgetline( f, line );\r\n\t\t\tsscanf( line.c_str(), \"%dx%d %d\", &n, &m, &k );\r\n\r\n\t\t\tfor ( int i = 0; i < n; ++i ) {\r\n\t\t\t\tgetline( f, line );\r\n\t\t\t\tfor ( int j = 0; j < line.size(); ++j ) {\r\n\t\t\t\t\tif ( line[j] == 'P' ) {\r\n\t\t\t\t\t\tcenters.push_back( Point(i, j) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tf.close();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcout << \"I/O error\" << endl;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid firstGeneration(int num) {\r\n\t\tgeneration = 0;\r\n\t\tfor ( int i = 0; i < num; ++i ) {\r\n\t\t\tSolution* s = new Solution( &centers, k, n, m );\t\r\n\t\t\tsolutions.push_back( s );\r\n\t\t}\r\n\t}\r\n\r\n\tvoid selection() {\r\n\t\tfloat sum_fitness = 0;\r\n\t\tconst float EPSILON = 0.0008;\r\n\r\n\t\tvector<Solution*>::iterator it;\r\n\t\tfor ( it = solutions.begin(); it != solutions.end(); ++it ) {\r\n\t\t\tSolution* s = *it;\r\n\t\t\tsum_fitness += s->fitness();\r\n\t\t}\r\n\r\n\t\tprintf(\"%g\\n\", sum_fitness / (float)solutions.size() );\r\n\t\t\r\n\t\tvector<Solution*> children, candidates;\r\n\r\n\t\telite = solutions[0];\r\n\r\n\t\tfor ( int i = 1; i < solutions.size(); ++i ) {\r\n\t\t\tif ( solutions[i]->fitness() > elite->fitness() ) {\r\n\t\t\t\telite = solutions[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tchildren.push_back( new Solution(*elite) );\r\n\r\n\t\tfor ( int gens = 0; gens < solutions.size() - 1; ++gens ) {\r\n\t\t\tSolution* father = solutions[rand() % solutions.size()];\r\n\r\n\t\t\tfor ( int i = 0; i < tournament_size; ++i ) {\r\n\t\t\t\tSolution* candidate = solutions[rand() % solutions.size()];\r\n\t\t\t\tfather = father->fight( candidate ); // father will equal to the one with better fitness\r\n\t\t\t}\r\n\r\n\t\t\tSolution* mother = solutions[rand() % solutions.size()];\r\n\t\r\n\t\t\tfor ( int i = 0; i < tournament_size; i += 2 ) {\r\n\t\t\t\tSolution* candidate = NULL;\r\n\t\t\t\tdo { candidate = solutions[rand() % solutions.size()]; } while ( candidate == father );\r\n\t\t\t\tmother = mother->fight( candidate ); // mother will equal to the one with better fitness\r\n\t\t\t}\r\n\r\n\t\t\tchildren.push_back( father->breed( mother ) );\r\n\t\t}\r\n\r\n\t\tcleanup();\r\n\r\n\t\tsolutions.clear();\r\n\t\t\r\n\t\tfor ( it = children.begin(); it != children.end(); ++it ) { solutions.push_back(*it); }\r\n\r\n\t\t++generation;\r\n\t}\r\n\r\n\tvoid displaySolution() {\r\n\t\tSolution* solution = elite;\r\n\t\tfor ( int i = 0; i < n; ++i ) {\r\n\t\t\tfor ( int j = 0; j < m; ++j ) {\r\n\t\t\t\tbool hasB = false;\r\n\t\t\t\tfor ( vector<Point>::iterator it = solution->bacons.begin(); it != solution->bacons.end(); ++it ) {\r\n\t\t\t\t\tif ( it->x == i && it->y == j ) {\r\n\t\t\t\t\t\thasB = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasB ) {\r\n\t\t\t\t\tprintf(\"B\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbool hasP = false;\r\n\t\t\t\tfor ( vector<Point>::iterator it = centers.begin(); it != centers.end(); ++it ) {\r\n\t\t\t\t\tif ( it->x == i && it->y == j ) {\r\n\t\t\t\t\t\thasP = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasP ) {\r\n\t\t\t\t\tprintf(\"P\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tprintf(\".\");\r\n\t\t\t}\r\n\t\t\tprintf(\"\\n\");\r\n\t\t}\r\n\r\n\t\tprintf(\"Dist: %d\\n\", (int)(1.0f/elite->fitness()));\r\n\t}\r\n\r\n\tvoid cleanup() {\r\n\t\tfor ( vector<Solution*>::iterator it = solutions.begin(); it != solutions.end(); ++it ) {\r\n\t\t\tdelete *it;\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\nint main( int argc, char* argv[] ) {\r\n\tsrand( time(NULL) );\r\n\tCity city;\r\n\tcity.load( argv[1] );\r\n\tcity.firstGeneration( search_space );\r\n\r\n\tfor ( int i = 0; i < num_iterations; ++i ) {\r\n\t\tprintf(\"%d \", i);\r\n\t\tcity.selection();\r\n\t}\r\n\r\n\tprintf(\"\\n\");\r\n\r\n\tcity.displaySolution();\r\n\tcity.cleanup();\r\n\r\n\treturn 0;\r\n}\r\n\r\n\r\n", "problem": 4}}, {"pk": 45, "model": "challenges.solution", "fields": {"language": 27, "title": "Works, but not fast", "author": 49, "submitted": "2010-07-16", "source": "#!/usr/bin/env ruby\r\n\r\nclass Graph\r\n\tattr_accessor :width, :height, :num_bds, :data\r\n\t\r\n\t# performs a deep clone of this object\r\n\tdef clone\r\n\t\tg = Graph.new\r\n\t\tg.width = width\r\n\t\tg.height = height\r\n\t\tg.num_bds = num_bds\r\n\t\t\r\n\t\tg.data = Array.new\r\n\t\tdata.each_with_index do |row, i|\r\n\t\t\tg.data[i] = Array.new\r\n\t\t\tdata[i].each_with_index do |cell, j|\r\n\t\t\t\tg.data[i][j] = data[i][j].clone\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\treturn g\r\n\tend\r\n\t\r\n\t# prints a human readable representation of the graph to stdout\r\n\tdef print_graph\r\n\t\tdata.each do |row|\r\n\t\t\trow.each do |cell|\r\n\t\t\t\tprint cell\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tprint \"\\n\"\r\n\t\tend\r\n\tend\r\n\t\r\n\t# prints the location of all bacon dispensers to stdout\r\n\tdef print_dispensers\r\n\t\tct = 1\r\n\t\tdata.each_with_index do |row, y|\r\n\t\t\trow.each_with_index do |cell, x|\r\n\t\t\t\tif cell == \"B\"\r\n\t\t\t\t\tputs \"#{ct}. (#{(x+1)}, #{(y+1)})\"\r\n\t\t\t\t\tct += 1\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\t# given a string representation of the graph, parse the contents and populate the \r\n\t# data array\r\n\tdef parse input\r\n\t\tinput.split(\"\\n\").each_with_index do |line, i|\r\n\t\t\tif i == 0 \r\n\t\t\t\t\t\t\r\n\t\t\t\tgraphSizeStr = line.split(\" \")[0]\r\n\t\t\t\t@width = graphSizeStr.split(\"x\")[0].to_i\r\n\t\t\t\t@height = graphSizeStr.split(\"x\")[1].to_i\r\n\t\t\t\t\r\n\t\t\t\t@num_bds = line.split(\" \")[1].to_i\r\n\t\t\t\t\r\n\t\t\t\t@data = Array.new(height)\r\n\t\t\t\t\t\t\t\r\n\t\t\telse\r\n\t\t\t\t@data[i-1] = Array.new(@width)\t\r\n\t\t\t\trow = 0\r\n\t\t\t\tline.each_char do |char|\r\n\t\t\t\t\t@data[i-1] [row] = char\r\n\t\t\t\t\trow += 1\r\n\t\t\t\tend\r\n\t\t   end\r\n\t\t   \r\n\r\n\t\tend\t\r\n\tend\r\n\t\r\n\t# returns the score of the graph\r\n\tdef calculate_score\r\n\t\treturn calculate_score(0)\t\r\n\tend\r\n\t\r\n\t# returns the score of the graph, if it's less then max.\r\n\tdef calculate_score_if_less_than max\r\n\t\tscore = 0\r\n\t\tdata.each_with_index do |row, y|\r\n\t\t\trow.each_with_index do |cell, x|\r\n\t\t\t\tif cell == 'P'\r\n\t\t\t\t\tscore += closest_dispenser_distance(x, y)\r\n\t\t\t\t\tif max > 0 && score > max\r\n\t\t\t\t\t\treturn score\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\treturn score\r\n\tend\r\n\t\r\n\t# returns the distance from (p_x, p_y) to the closest dispenser\r\n\tdef closest_dispenser_distance p_x, p_y\r\n\t\tdistance = 0\r\n\t\t\r\n\t\tdata.each_with_index do |row, y|\r\n\t\t\trow.each_with_index do |cell, x|\r\n\t\t\t\tif cell == 'B'\r\n\t\t\t\t\tcell_distance = (p_x - x).abs + (p_y - y).abs\r\n\t\t\t\t\tif distance == 0 || cell_distance < distance\r\n\t\t\t\t\t\tdistance = cell_distance\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\treturn distance\r\n\tend\r\n\t\r\n\t# returns true if (p_x, p_y) is in the same row or column as a population center, \r\n\t# false otherwise\r\n\tdef intersects_population_center p_x, p_y\r\n\t\theight.times do |y|\r\n\t\t\tif data[y][p_x] == \"P\"\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\twidth.times do |x|\r\n\t\t\tif data[p_y][x] == \"P\"\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\treturn false\r\n\tend\r\n\t\r\n\t# randomly places num_bds dispensers in the graph\r\n\tdef randomly_place_bds\r\n\t\tnum_bds.times do |i|\r\n\t\t\tok = false\r\n\t\t\twhile !ok\r\n\t\t\t\tx = rand(width)\r\n\t\t\t\ty = rand(height)\r\n\t\t\t\t\r\n\t\t\t\tif data[x][y] == \".\"\r\n\t\t\t\t\tdata[x][y] = \"B\"\r\n\t\t\t\t\tok = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\nend\r\n\r\n\r\n\r\n\r\n# recurse once for each allowed bacon dispenser.  when we've placed all of them in a valid \r\n# location (i.e. a cell in the same row or column as a population center) then we can\r\n# check the score to see if we have the lowest.\r\ndef find_solution graph, p_x, p_y, recursion_level \r\n\tfor y in p_y...graph.height\r\n\t\tfor x in p_x...graph.width\r\n\t\t\t\r\n\t\t\t# if it's a free cell...\r\n\t\t\tif graph.data[y][x] == \".\"\r\n\t\t\t\r\n\t\t\t\t# in a valid location...\r\n\t\t\t\tif graph.intersects_population_center(x, y)\r\n\t\t\t\t\r\n\t\t\t\t\t# put a bacon depenser there.\r\n\t\t\t\t\tgraph.data[y][x] = \"B\"\r\n\t\t\t\t\t\r\n\t\t\t\t\t# if we've placed all dispensers...\r\n\t\t\t\t\tif recursion_level == graph.num_bds\r\n\t\t\t\t\t\t# store a copy of the solution\r\n\t\t\t\t\t\t#puts \"++++++++\"\r\n\t\t\t\t\t\t#graph.print_graph\r\n\r\n\t\t\t\t\t\tscore = graph.calculate_score_if_less_than(@@lowest_score)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t@@total_checked += 1\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif @@lowest_score == 0 || score < @@lowest_score\r\n\t\t\t\t\t\t\t@@lowest = graph.clone\r\n\t\t\t\t\t\t\t@@lowest_score = score\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#puts \"\"\r\n\t\t\t\t\t\t\t#@@lowest.print_graph\r\n\t\t\t\t\t\t\t#puts @@lowest_score\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tend\t\t\t\t\t\t\r\n\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnext_x = x + 1\r\n\t\t\t\t\t\tnext_y = y\r\n\t\t\t\t\t\tif x >= graph.width\r\n\t\t\t\t\t\t\tnext_x = 0\r\n\t\t\t\t\t\t\tnext_y += 1\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif next_y < graph.height\r\n\t\t\t\t\t\t\tfind_solution(graph, next_x, next_y, recursion_level+1)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\t# make the cell free again\r\n\t\t\t\t\tgraph.data[y][x] = \".\"\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\n\r\n\r\n# entry point\r\n\r\ninput = Graph.new\r\ninput.parse(STDIN.read)\r\n#puts \"Graph #{input.width}x#{input.height}\"\r\n#puts \"Dispensers #{input.num_bds}\"\r\n\r\n#input.randomly_place_bds\r\n\r\nputs \"Input graph\"\r\ninput.print_graph\r\n\r\n\r\nputs \"\"\r\n\r\n\r\n# find the lowest\r\n@@lowest = nil\r\n@@lowest_score = 0\r\n@@total_checked = 0\r\n\r\n\r\n\r\n\r\n# find all possible solutions\r\nfind_solution(input, 0, 0, 1)\r\n\r\nputs \"checked \" + @@total_checked.to_s + \" possible solutions\"\r\nputs \"\"\r\n\r\nputs \"-- Solution --\"\r\n@@lowest.print_graph\r\nputs \"--------------\"\r\nputs \"Score: \" + @@lowest_score.to_s\r\nputs \"\"\r\nputs \"Dispensers \"\r\n@@lowest.print_dispensers\r\nputs \"--------------\"\r\n\r\n\r\n\r\n", "problem": 4}}, {"pk": 6, "model": "challenges.solution", "fields": {"language": 23, "title": "This is the best solution ever.", "author": 10, "submitted": "2010-07-10", "source": "#WARNING: THE FOLLOWING CODE WAS WRITTEN WHILE BEING SLEEPY AND TIRED\r\n#THEREFORE IT SUCKS. DONT LISTEN TO ANYTHING IN HERE\r\n\r\nimport sys\r\n\r\nentry = file(str(sys.argv[1])).read()\r\n\r\nclass CitySet:\r\n  def __init__(self, x, y):\r\n    self.the_set = set()\r\n    self.the_set.add((x,y))\r\n    self.hix = x\r\n    self.lox = x\r\n    self.hiy = y\r\n    self.loy = y\r\n\r\n  def join(self, anotherSet):\r\n    self.the_set = self.the_set.union(anotherSet.the_set)\r\n    if self.hix < anotherSet.hix:\r\n      self.hix = anotherSet.hix\r\n    if self.lox > anotherSet.lox:\r\n      self.lox = anotherSet.lox\r\n    if self.hiy < anotherSet.hiy:\r\n      self.hiy = anotherSet.hiy\r\n    if self.loy > anotherSet.loy:\r\n      self.loy = anotherSet.loy\r\n\r\n  def size(self):\r\n    return len(self.the_set)\r\n\r\ndef build_entries(entry):\r\n  \"\"\"\"takes only the map text\"\"\"\r\n  disjoint_set_list = list()\r\n  alist = entry.split('\\n')[1:]\r\n  for i in xrange(0, len(alist)):\r\n    for j in xrange(0, len(alist[i])):\r\n      if alist[i][j] == \"P\":\r\n        disjoint_set_list.append(CitySet(i,j))\r\n  return disjoint_set_list\r\n\r\ndef get_distance(a,b):\r\n  \"\"\"given a set of pairs, find the closest distance\"\"\"\r\n  d = 0\r\n  if a.hix <= b.lox or b.hix <= a.lox:\r\n    d += max(abs(a.lox-b.hix), abs(a.hix-b.lox))    \r\n  if a.hiy <= b.loy or b.hiy <= a.loy:\r\n    d += max(abs(a.loy-b.hiy), abs(a.hiy-b.loy))\r\n  return d\r\n  \r\n\r\ndef find_closest(disjoint_set_list):\r\n  \"\"\"returns the indices of the cities that are the closest\"\"\"\r\n  r = None\r\n  m = sys.maxint\r\n  for i in xrange(0, len(disjoint_set_list)):\r\n    for j in xrange(0, len(disjoint_set_list)):\r\n      d = get_distance(disjoint_set_list[i], disjoint_set_list[j])\r\n      if d < m and d != 0:\r\n        m = d\r\n        r = [i,j]\r\n  return r\r\n\r\ndef rebuild_list(disjoint_set_list, closest_index):\r\n  a = disjoint_set_list[closest_index[0]]\r\n  b = disjoint_set_list[closest_index[1]]\r\n  disjoint_set_list.remove(a)\r\n  disjoint_set_list.remove(b)\r\n  a.join(b)\r\n  disjoint_set_list.append(a)\r\n  return disjoint_set_list\r\n\r\ndef get_num_distribution(entry):\r\n  specs = entry.split('\\n')[0]\r\n  specs = specs.split(' ')[1]  \r\n  return int(specs)\r\n\r\nnum_distribution = get_num_distribution(entry)\r\ndisjoint_list = build_entries(entry)\r\n\r\nwhile (num_distribution < len(disjoint_list)):\r\n  closest_index = find_closest(disjoint_list)\r\n  disjoint_list = rebuild_list(disjoint_list, closest_index)\r\n\r\ndef build_final_map(entry):\r\n  \"\"\"values don't matter tbh\"\"\"\r\n  r = entry.split('\\n')[1:]  \r\n  t = []\r\n  for i in xrange(0, len(r)):\r\n    t2 = []\r\n    for j in xrange(0, len(r[i])):\r\n      if r[i][j] != 'P':\r\n        t2.append(-sys.maxint)\r\n      else:\r\n        t2.append(0)\r\n    t.append(t2)\r\n  return t\r\n  \r\n\r\ndef replace_with(final_map, i, j, ch):\r\n  s = final_map[i]\r\n  t = s[:j] + [ch] + s[j+1:]\r\n  final_map[i] = t\r\n  return final_map\r\n\r\ndef replace_with_str(final_map, i, j, ch):\r\n  s = final_map[i]\r\n  t = s[:j] + ch + s[j+1:]\r\n  final_map[i] = t\r\n  return final_map\r\n\r\ndef print_map(entry):\r\n  r = entry.split('\\n')[1:]\r\n  #for i in r:\r\n  #  print i\r\n  #print \"--\"\r\n  return r\r\n\r\nomg_score = 0\r\ndef determine_placement(entry, final_map, city_set):\r\n  \"\"\"adds only one B location to the map\r\n     final_map is just the string list; we'll modify it and return it\r\n     city_set contains all of the cities :O\"\"\"\r\n  x = -1\r\n  y = -1\r\n  minimum = sys.maxint\r\n  global omg_score\r\n  for i in xrange(0, len(final_map)):\r\n    for j in xrange(0, len(final_map[i])):\r\n      for k in city_set.the_set:\r\n        t = CitySet(i,j)\r\n        d = get_distance(t, CitySet(k[0], k[1]))\r\n        z = final_map[i][j]\r\n        q = sys.maxint\r\n        if (z < 0):\r\n          q = d\r\n        elif (z > 0):\r\n          q = d+z\r\n        if (q < minimum):\r\n          x = i\r\n          y = j\r\n          minimum = q\r\n        final_map = replace_with(final_map, i, j, q)\r\n        \r\n  for k in city_set.the_set:\r\n    t = CitySet(k[0],k[1])\r\n    d = get_distance(t, CitySet(x, y))\r\n    omg_score += d\r\n        \r\n  final_map = replace_with_str(entry, x, y, 'B')\r\n  return final_map\r\n\r\nr = print_map(entry)\r\nf = entry.split('\\n')[1:]\r\nfor i in disjoint_list:\r\n  final_map = build_final_map(entry)\r\n  f = determine_placement(f, final_map, i)\r\n\r\n\r\nfor z in f:\r\n  print z\r\n\r\nprint \"Score: \" + str(omg_score)\r\n", "problem": 4}}, {"pk": 70, "model": "challenges.solution", "fields": {"language": 35, "title": "flex solution for the first part", "author": 80, "submitted": "2011-08-05", "source": "%{\r\n// roman.l by lzm\r\n// flex roman.l && gcc lex.yy.c && echo \"MCMXLIV\" | ./a.out\r\nint num = 0;\r\n%}\r\n\r\n%option noyywrap\r\n\r\n%%\r\nM+      num += yyleng*1000;\r\nCM      num += 900;\r\nD       num += 500;\r\nCD      num += 400;\r\nC+      num += yyleng*100;\r\nXC      num += 90;\r\nL       num += 50;\r\nXL      num += 40;\r\nX+      num += yyleng*10;\r\nIX      num += 9;\r\nV       num += 5;\r\nIV      num += 4;\r\nI+      num += yyleng;\r\n%%\r\n\r\nint main()\r\n{\r\n        yylex();\r\n        printf(\"%d\\n\", num);\r\n        return 0;\r\n}\r\n", "problem": 7}}, {"pk": 71, "model": "challenges.solution", "fields": {"language": 23, "title": "python solution for the second part", "author": 80, "submitted": "2011-08-05", "source": "def convert(num):\r\n        arabic = \"0123456789\"\r\n\r\n        roman = [\r\n                'Z M MM MMM',\r\n                'Z C CC CCC CD D DC DCC DCCC CM',\r\n                'Z X XX XXX XL L LX LXX LXXX XC',\r\n                'Z I II III IV V VI VII VIII IX'\r\n        ]\r\n\r\n        tbl = [dict(zip(arabic, ln.split())) for ln in roman]\r\n\r\n        num = [m[d] for m,d in zip(tbl, \"%04d\" % num)]\r\n\r\n        return \"\".join(num).replace('Z', '')\r\n\r\n\r\nimport sys\r\nprint convert(int(sys.argv[1]))\r\n", "problem": 7}}, {"pk": 7, "model": "challenges.solution", "fields": {"language": 23, "title": "evolutionary", "author": 17, "submitted": "2010-07-10", "source": "#!/usr/bin/env python\r\n\r\n# isn't bacon a hilarious topic\r\n# seriously who doesn't get sick of hearing about bacon\r\n# it'll be funny forever\r\n# ha ha ha no seriously\r\n\r\n# not guaranteed to converge on global optimum for some grids\r\n# impractical for very large grids\r\n\r\nimport sys, random, copy\r\n\r\nclass BaconCity:\r\n\tdef __init__ ( self ):\r\n\t\tself.homes = []\r\n\t\tself.baconlimit = 0\r\n\t\tself.width = 0\r\n\t\tself.height = 0\r\n\t\r\n\tdef loadfile ( self, f ):\r\n\t\tspecline = f.readline().strip()\r\n\t\tsize, count = specline.split(' ')\r\n\t\tself.baconlimit = int( count )\r\n\t\tsize = size.split('x')\r\n\t\tself.width = int( size[0] )\r\n\t\tself.height = int( size[1] )\r\n\t\tif self.baconlimit < 1 or self.width < 1 or self.height < 1:\r\n\t\t\treturn False\r\n\t\tfor y in xrange( self.height ):\r\n\t\t\trow = f.readline().strip()\r\n\t\t\tif len(row) != self.width:\r\n\t\t\t\treturn False\r\n\t\t\tx = 0\r\n\t\t\tfor c in row:\r\n\t\t\t\tif c == 'P':\r\n\t\t\t\t\tself.homes.append( (x,y) )\r\n\t\t\t\tx += 1\r\n\t\treturn True\r\n\t\r\n\tdef sumdist ( self, bacons = [] ):\r\n\t\tif len(bacons) != self.baconlimit:\r\n\t\t\traise \r\n\t\td = 0\r\n\t\tfor h in self.homes:\r\n\t\t\tmind = min([ abs(h[0]-b[0])+abs(h[1]-b[1]) for b in bacons ])\r\n\t\t\td += mind if mind > 0 else self.width + self.height\r\n\t\treturn d\r\n\t\r\n\tdef str ( self, bacons = [] ):\r\n\t\ts = '{0}x{1} {2}\\n'.format( self.width, self.height, self.baconlimit )\r\n\t\tfor y in xrange( self.height ):\r\n\t\t\tfor x in xrange( self.width ):\r\n\t\t\t\tif (x,y) in self.homes:\r\n\t\t\t\t\ts += 'P'\r\n\t\t\t\telif (x,y) in bacons:\r\n\t\t\t\t\ts += 'b'\r\n\t\t\t\telse:\r\n\t\t\t\t\ts += '.'\r\n\t\t\ts += '\\n'\r\n\t\treturn s\r\n\r\n\r\nclass Solution:\r\n\tdef __init__ ( self, city ):\r\n\t\tself.city = city\r\n\t\tself.bacons = [ (0,0) ] * city.baconlimit\r\n\t\tself.fitness = 0\r\n\t\tself.scramble()\r\n\t\tself.updatefitness()\r\n\t\r\n\tdef updatefitness ( self ):\r\n\t\tself.fitness = -self.city.sumdist( self.bacons )\r\n\t\r\n\tdef scramble ( self ):\r\n\t\tfor i in xrange( len(self.bacons) ):\r\n\t\t\tx = random.randint( 0, self.city.width - 1 )\r\n\t\t\ty = random.randint( 0, self.city.height - 1 )\r\n\t\t\tself.bacons[ i ] = (x,y)\r\n\t\r\n\tdef mutate ( self ):\r\n\t\ti = random.randint( 0, len(self.bacons) - 1 )\r\n\t\tself.bacons[ i ] = (\r\n\t\t\t( self.bacons[ i ][0] + random.randint(-1,1) ) % self.city.width,\r\n\t\t\t( self.bacons[ i ][1] + random.randint(-1,1) ) % self.city.height )\r\n\t\r\n\tdef crossover ( self, other ):\r\n\t\tfor i in xrange( len(self.bacons) ):\r\n\t\t\tif random.random() < 0.5:\r\n\t\t\t\tself.bacons[ i ] = other.bacons[ i ]\r\n\r\n\r\nclass Population:\r\n\tdef __init__ ( self, city, size = 100 ):\r\n\t\tself.city = city\r\n\t\tself.pop = [ Solution( self.city ) for i in xrange( size ) ]\r\n\t\r\n\tdef breed ( self, count = 50 ):\r\n\t\tparents = [ random.choice(self.pop) for i in xrange( count * 2 ) ]\r\n\t\tfor i in xrange( count ):\r\n\t\t\tc = copy.deepcopy( parents[ 2 * i ] )\r\n\t\t\tc.crossover( parents[ 2 * i + 1 ] )\r\n\t\t\tfor m in xrange( 5 ):\r\n\t\t\t\tc.mutate()\r\n\t\t\tc.updatefitness()\r\n\t\t\tself.pop.append( c )\r\n\t\tself.pop.sort( key = lambda x: x.fitness )\r\n\t\tself.pop = self.pop[ count : ]\r\n\t\r\n\tdef best ( self ):\r\n\t\tbest = self.pop[0]\r\n\t\tfor s in self.pop:\r\n\t\t\tif s.fitness > best.fitness:\r\n\t\t\t\tbest = s\r\n\t\treturn best\r\n\r\n\r\ndef main():\r\n\tif len(sys.argv) != 2:\r\n\t\tprint 'usage: {0} inputfilename'.format( sys.argv[0] )\r\n\t\tsys.exit(2)\r\n\tf = open( sys.argv[1] )\r\n\tif not f:\r\n\t\tprint 'the hell is {0}'.format( sys.argv[1] )\r\n\t\tsys.exit(2)\r\n\tcity = BaconCity()\r\n\tif not city.loadfile( f ):\r\n\t\tprint 'file ain\\'t normal'\r\n\t\tsys.exit(2)\r\n\tf.close()\r\n\t\r\n\t#print city.str()\r\n\t\r\n\tp = Population( city )\r\n\tlastbest = 0\r\n\tfor i in xrange( 500 ):\r\n\t\tp.breed()\r\n\t\tif p.best().fitness != lastbest:\r\n\t\t\tlastbest = p.best().fitness\r\n\t\t\tprint abs(lastbest)\r\n\tprint p.best().bacons\r\n\tprint city.str( p.best().bacons )\r\n\t\r\n\treturn 0\r\n\r\nif __name__ == '__main__': main()\r\n", "problem": 4}}, {"pk": 8, "model": "challenges.solution", "fields": {"language": 16, "title": "Simulated Annealing", "author": 20, "submitted": "2010-07-10", "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\n// This file should be named BaconChallenge.java.\r\n// To compile: javac BaconChallenge.java\r\n// To run: java BaconChallenge [filename]\r\n\r\n/**\r\n * This class is used to find a solution (but not optimal solution)\r\n * for the Bacon Center Distribution problem mentioned here:\r\n * http://proggitquiz.com/challenge/4/\r\n *\r\n * My solution is a simulated annealing approach, similar to\r\n * how someone might solve the traveling salesman problem.\r\n *\r\n * @author jcchurch\r\n * @version 1\r\n */ \r\nclass PopulationGraph {\r\n    private final int EMPTY = 0;\r\n    private final int POPULATION = 1;\r\n    private final int BACON = 2;\r\n\r\n    private int height;\r\n    private int width;\r\n    private int bacon_centers_count;\r\n    private int[][] graph;\r\n    private int[][] bacon_centers;\r\n\r\n    /**\r\n     * Constructor builds a graph based on the contents of a file.\r\n     * @param filename Filename of a file containing the original graph.\r\n     */\r\n    PopulationGraph(String filename) {\r\n        // Open the file.\r\n        Scanner scan = null;\r\n        try {\r\n            scan = new Scanner(new File(filename));\r\n        }\r\n        catch (FileNotFoundException e) {\r\n            System.out.println(\"File not found.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        // Parse the two parts of the width and height marker.\r\n        String[] wh = scan.next().split(\"x\");\r\n        try {\r\n            width = Integer.parseInt(wh[0]);\r\n            height = Integer.parseInt(wh[1]);\r\n        }\r\n        catch (NumberFormatException e) {\r\n            System.out.println(\"The first token is not in the form of nxm.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        // Read bacon center value\r\n        bacon_centers_count = scan.nextInt();\r\n        scan.nextLine(); // Move buffer to the start of the next line.\r\n\r\n        graph = new int[height][width];\r\n        bacon_centers = new int[bacon_centers_count][2];\r\n\r\n        // Populate the graph\r\n        for (int i = 0; i < height; i++) {\r\n            String line = scan.nextLine();\r\n            for (int j = 0; j < width; j++) {\r\n                if (line.charAt(j) == 'P') {\r\n                    graph[i][j] = POPULATION;\r\n                }\r\n                else {\r\n                    graph[i][j] = EMPTY;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Solves a graph using a Simulated Annealing approach.\r\n     * First, it places bacon centers in random locations.\r\n     * Then a shifting algorithm pushes each bacon center into a better position.\r\n     * But this will sometimes leave bacon centers stranded, so a third phase\r\n     * of the algorithm will pick up those stranded bacon centers and give them\r\n     * new starting locations. The shifting algorithm then takes over again until\r\n     * there are no more stranded bacon centers. The result is good, but not optimal.\r\n     * @return the overall score of the final graph.\r\n     */\r\n    public int solve() {\r\n        // First, we will place bacon centers randomly on the graph.\r\n        // We will call these \"BACON BITS\", because we are sprinkling bacon.\r\n        Random rng = new Random();\r\n        for (int i = 0; i < bacon_centers_count; i++) {\r\n            while (true) {\r\n                int x = rng.nextInt(height);\r\n                int y = rng.nextInt(width);\r\n                if (graph[x][y] == EMPTY) {\r\n                    bacon_centers[i][0] = x;\r\n                    bacon_centers[i][1] = y;\r\n                    graph[x][y] = BACON;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        while (true) {\r\n            // Second, we start the shifting process.\r\n            // This creates a layout that is nearly optimal.\r\n            int current_score = score();\r\n            while (true) {\r\n                int shifted_bacon = 0; // Counts how many times we had to shift a bacon location.\r\n                for (int i = 0; i < bacon_centers_count; i++) {\r\n                    int[] newcoords = pickBetterDirection(bacon_centers[i][0], bacon_centers[i][1], current_score);\r\n                    if (newcoords[2] < current_score) {\r\n                        graph[bacon_centers[i][0]][bacon_centers[i][1]] = EMPTY;\r\n                        bacon_centers[i][0] = newcoords[0];\r\n                        bacon_centers[i][1] = newcoords[1];\r\n                        graph[bacon_centers[i][0]][bacon_centers[i][1]] = BACON;\r\n                        current_score = newcoords[2];\r\n                        shifted_bacon++;\r\n                    }\r\n                }\r\n\r\n                // If none of the bacon centers can progress any further, let's stop shifting.\r\n                if (shifted_bacon == 0) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Third, find the unused Bacon centers,\r\n            // given them new random homes and start the process over.\r\n            int[] used_bacon = new int[bacon_centers_count];\r\n            for (int i = 0; i < height; i++) {\r\n                for (int j = 0; j < width; j++) {\r\n                    if (graph[i][j] == POPULATION) {\r\n                        int[] coords = neartestBacon(i,j);\r\n                        for (int k = 0; k < bacon_centers_count; k++) {\r\n                            if (bacon_centers[k][0] == coords[0] && bacon_centers[k][1] == coords[1]) {\r\n                                used_bacon[k] = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Here's were we give the unused bacon centers new homes.\r\n            int unused_bacon_count = 0;\r\n            for (int i = 0; i < bacon_centers_count; i++) {\r\n                if (used_bacon[i] == 0) {\r\n                    unused_bacon_count++;\r\n                    while (true) {\r\n                        int x = rng.nextInt(height);\r\n                        int y = rng.nextInt(width);\r\n                        if (graph[x][y] == EMPTY) {\r\n                            graph[bacon_centers[i][0]][bacon_centers[i][1]] = EMPTY;\r\n                            bacon_centers[i][0] = x;\r\n                            bacon_centers[i][1] = y;\r\n                            graph[bacon_centers[i][0]][bacon_centers[i][1]] = BACON;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If all of the bacon centers are associated with at least one population\r\n            // center, then we quit.\r\n            if (unused_bacon_count == 0) {\r\n                break;\r\n            }\r\n        }\r\n        return score();\r\n    }\r\n\r\n    /**\r\n     * Prints the graph to the screen.\r\n     */\r\n    public void printGraph() {\r\n        for (int i = 0; i < height; i++) {\r\n            for (int j = 0; j < width; j++) {\r\n                if (graph[i][j] == POPULATION) {\r\n                    System.out.print(\"P\");\r\n                }\r\n                else if (graph[i][j] == BACON) {\r\n                    System.out.print(\"B\");\r\n                }\r\n                else {\r\n                    System.out.print(\".\");\r\n                }\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prints the bacon center locations and the final score to the screen.\r\n     */\r\n    public void printBaconAndScore() {\r\n        System.out.println(\"Here's the location of the Bacon Centers:\");\r\n        for (int i = 0; i < bacon_centers_count; i++) {\r\n            System.out.println((bacon_centers[i][1]+1)+\",\"+(bacon_centers[i][0]+1));\r\n        }\r\n        System.out.println(\"Shortest Distance: \"+score());\r\n    }\r\n\r\n    /**\r\n     * Computes the overall score the the current graph.\r\n     * @return overall score of the current graph.\r\n     */\r\n    private int score() {\r\n        int min_distance = 0;\r\n        for (int i = 0; i < height; i++) {\r\n            for (int j = 0; j < width; j++) {\r\n                if (graph[i][j] == POPULATION) {\r\n                    int[] coords = neartestBacon(i,j);\r\n                    min_distance += coords[2]; \r\n                }\r\n            }\r\n        }\r\n        return min_distance;\r\n    }\r\n\r\n    /**\r\n     * Attempts to find a better location for a bacon center based\r\n     * on the maximum of 8 possible directions.\r\n     * @param p verticle coordinate of bacon center\r\n     * @param q horizontal coordinate of bacon center\r\n     * @param best_score the current score of the graph. (This is an optimization.)\r\n     * @return an array of three values: new verticle location, horizontal location, and score.\r\n     */\r\n    private int[] pickBetterDirection(int p, int q, int best_score) {\r\n        int besti = 0;\r\n        int bestj = 0;\r\n\r\n        graph[p][q] = EMPTY;\r\n        for (int i = p-1; i <= p+1; i++) {\r\n            for (int j = q-1; j <= q+1; j++) {\r\n                if (i != p || j != q) {\r\n                    if (i != -1 && j != -1 && i != height && j != width && graph[i][j] == EMPTY) {\r\n                        graph[i][j] = BACON;\r\n                        int this_score = score(); \r\n                        if (this_score < best_score) {\r\n                            besti = i;\r\n                            bestj = j;\r\n                            best_score = this_score;\r\n                        }\r\n                        graph[i][j] = EMPTY;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        graph[p][q] = BACON;\r\n\r\n        int[] coords = new int[3];\r\n        coords[0] = besti;\r\n        coords[1] = bestj;\r\n        coords[2] = best_score;\r\n        return coords;\r\n    }\r\n\r\n    /**\r\n     * Finds the nearest Bacon Center to a coordinate.\r\n     * @param p verticle coordinate\r\n     * @param q horizontal coordinate\r\n     * @return an array of three values: verticle location, horizontal location, and distance from Bacon Center\r\n     */\r\n    private int[] neartestBacon(int p, int q) {\r\n        int nearx = -1;\r\n        int neary = -1;\r\n        int min_distance = height*width;\r\n\r\n        for (int i = 0; i < height; i++) {\r\n            for (int j = 0; j < width; j++) {\r\n                if (graph[i][j] == BACON) {\r\n                    int this_distance = taxicabDistance(p, q, i, j);\r\n                    if (this_distance < min_distance) {\r\n                        nearx = i;\r\n                        neary = j;\r\n                        min_distance = this_distance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        int[] coords = new int[3];\r\n        coords[0] = nearx;\r\n        coords[1] = neary;\r\n        coords[2] = min_distance;\r\n        return coords;\r\n    }\r\n\r\n    /**\r\n     * Computes the taxicab distance between two locations.\r\n     * @param y1 first vertical coordinate\r\n     * @param x1 first horizontal coordinate\r\n     * @param y2 second vertical coordinate\r\n     * @param x2 second horizontal coordinate\r\n     * @return the distance between the two coordinates.\r\n     */\r\n    private int taxicabDistance(int y1, int x1, int y2, int x2) {\r\n        int x = x1 - x2;\r\n        int y = y1 - y2;\r\n\r\n        if (x < 0) x *= -1;\r\n        if (y < 0) y *= -1;\r\n\r\n        return x + y;\r\n    }\r\n}\r\n\r\npublic class BaconChallenge {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.out.println(\"USAGE: java BaconChallenge [filename]\");\r\n            return;\r\n        }\r\n\r\n        // To get better results, try setting this number higher. Say, 3.\r\n        // For very large graphs, this is probably a bad idea.\r\n        final int REPEATS = 1;\r\n\r\n        PopulationGraph p = new PopulationGraph(args[0]);\r\n        int min = p.solve();\r\n        int lowscores = 1;\r\n\r\n        // Because the solution provided is nearly optimal, we're going\r\n        // to cheat and run it until we get a score that's nice and low.\r\n        // We will run until we get the same low score REPEATS times.\r\n        while (lowscores < REPEATS) {\r\n            p = new PopulationGraph(args[0]);\r\n            int this_score = p.solve();\r\n            if (this_score < min) {\r\n                lowscores = 1;\r\n                min = this_score;\r\n            }\r\n            else if (this_score == min) {\r\n                lowscores++;\r\n            }\r\n        }\r\n\r\n        p.printGraph();\r\n        p.printBaconAndScore();\r\n    }\r\n}", "problem": 4}}, {"pk": 9, "model": "challenges.solution", "fields": {"language": 28, "title": "I hope this works", "author": 22, "submitted": "2010-07-11", "source": "/*\r\n  how to compile and run: scalac Bacon.scala && scala Bacon ryan-03\r\n  warning: I am not an expert in Scala\r\n  It might help to read this file from the bottom up.\r\n  The main algorithm is to just calculate the total distance for every single empty spot,\r\n    and pick the n shortest ones.\r\n  It's brute forcing it.\r\n  I think I could skip any outer row or cols that have no population centers in them.\r\n*/\r\nobject Bacon\r\n{\r\n\r\n  // These store data in a safer, easier way than using plain old tuples\r\n  case class CoordLoc(x: Int, y: Int, loc: Char)\r\n  case class CoordLocDist(loc: CoordLoc, dist: Int)\r\n\r\n  def main(args: Array[String]) \r\n  {\r\n    val lineIter = scala.io.Source.fromFile(args(0)).getLines\r\n    val inputLines = lineIter.toList.map(_.stripLineEnd)\r\n    val headerLine :: mapLines = inputLines\r\n    // println (headerLine)\r\n\r\n    val xLoc = headerLine indexOf (\"x\")\r\n    val spaceLoc = headerLine indexOf (\" \");\r\n    val width = headerLine substring (0, xLoc) toInt;\r\n    val height = headerLine substring (xLoc + 1, spaceLoc) toInt;\r\n    val numBacons = headerLine substring (spaceLoc + 1) toInt;\r\n    // println ((width, height, numBacons))\r\n    \r\n    val (popCenters, empties) = partitionCentersAndEmpties (mapLines);\r\n    // println (\"Population centers: \" + popCenters)\r\n    \r\n    val nShortest = nShortestBaconLocations (empties, popCenters, numBacons)\r\n    // println (\"Shortest bacon locations: \" + nShortest)\r\n    println (\"Bacon locations total distance: \" + totalDist (nShortest))\r\n    println (\"Bacon location coords: \" + toCoords (nShortest))\r\n  }\r\n  \r\n  /*\r\n    These 2 functions convert the list of best bacon locations into a total distance or a list of x,y coords.\r\n  */\r\n  \r\n  // Strips out the x and y from the bacon locations\r\n  def toCoords (baconLocs: List[CoordLocDist]): List[(Int, Int)] = baconLocs.map { case CoordLocDist(loc, dist) => (loc.x, loc.y) }\r\n  \r\n  // Just totals the distance for the bacon locations\r\n  def totalDist (baconLocs: List[CoordLocDist]): Int = baconLocs.map (_.dist).reduceLeft (_+_)\r\n  \r\n  /*\r\n    Generates all potential bacon sites, sorts from least dist to greatest, then takes only the number needed.\r\n  */\r\n  def nShortestBaconLocations (empties: List[CoordLoc], popCenters: List[CoordLoc], numBacons: Int) = \r\n  {\r\n    allPotentialBaconDistanceTotals (empties, popCenters) sort ((a, b) => a.dist < b.dist || (a.dist == b.dist && a.loc.y < b.loc.y)) take numBacons\r\n  }\r\n\r\n  /*\r\n    Makes a list of all possible bacon locations and the total distance from each all population centers.\r\n    The map just converts from a CoordLoc and the distance into a CoordLocDist.\r\n  */\r\n  def allPotentialBaconDistanceTotals (empties: List[CoordLoc], centers: List[CoordLoc]): List[CoordLocDist] = \r\n  {\r\n    empties.zip (empties map (sumOfDistToAllCenters (_, centers))).map { case (loc: CoordLoc, dist: Int) => CoordLocDist(loc, dist) }\r\n  }\r\n\r\n  /*\r\n    Calculates the total distance from a potential bacon location to all population centers.\r\n    First the list of centers is mapped into a list of the distance from itself to the potential bacon location.\r\n    Then reduceLeft sums up the distances.\r\n  */\r\n  def sumOfDistToAllCenters (potentialBaconLoc: CoordLoc, centers: List[CoordLoc]): Int = \r\n  {\r\n    centers map { centerLoc => dist (potentialBaconLoc, centerLoc) } reduceLeft (_+_)\r\n  }\r\n  \r\n  // plain old non-diagonal distance function\r\n  def dist (loc1: CoordLoc, loc2: CoordLoc): Int = (loc1.x - loc2.x).abs + (loc1.y - loc2.y).abs\r\n\r\n  /*\r\n    Generates the list of CoordLocs an then splits it into 2 lists, the population centers (p's) and the empty locations (.'s)\r\n  */\r\n  def partitionCentersAndEmpties (mapStrings: List[String]) = toFlatListWithCoords (mapStrings) partition ({case CoordLoc(x, y, loc) => loc == 'P'})\r\n  \r\n  /*\r\n    Input: \r\n      mapStrings: List of the lines in the input file, the location rows from the map\r\n    Algorithm:\r\n      Convert the List of Strings into a List of rows, where each row is a List of Chars,\r\n        numbering the rows with their y coord and each Char with its x coord.\r\n      The chars (. or p) in a row are each converted into a CoordLoc and \r\n        flatMap combines the list of CoordLocs for each row into 1 big, '1-D' list.\r\n  */\r\n  def toFlatListWithCoords (mapStrings: List[String]): List[CoordLoc] =\r\n  {\r\n    val mapLines: List[List[Char]] = mapStrings map { _.toList }\r\n    toNumberedList (mapLines) flatMap { \r\n      case (y: Int, row: List[Char]) => { \r\n        toNumberedList (row) map { case (x: Int, loc: Char) => CoordLoc(x, y, loc) }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /* \r\n    zip up a list with its 1-based index number, so we know the row a string was in\r\n    or the column a char is in\r\n    List(a, b, c, d) becomes List((1, a), (2, b), (3, c), (d, 4))\r\n  */\r\n  def toNumberedList[X] (ls: List[X]): List[(Int, X)] =\r\n  {\r\n    /*\r\n      `to` returns an Inclusive, which extends Range, \r\n      so we need to convert it to a List before zipping it\r\n    */\r\n    val indicies = (1 to ls.length) toList;\r\n    indicies zip (ls)\r\n  }\r\n}", "problem": 4}}, {"pk": 11, "model": "challenges.solution", "fields": {"language": 25, "title": "BaconizeMe (GA)", "author": 15, "submitted": "2010-07-11", "source": "#!/usr/bin/php\r\n<?php \r\n//online example at http://173.203.59.108/baconater/baconizeMe\r\nif($argc < 2){\r\n\tprint \"\\nUsage: ./baconize.php <file> \\n\";\r\n\texit;\r\n}\r\nset_time_limit(1200);\r\n$fname = $argv[1];\r\nif(isset($argv[2])) $maxEvolutions = $argv[2];\r\nelse $maxEvolutions = 2000;\r\n$stopTolerance = 2000;\r\n$maxVerifies = 1;\r\n$pops = file_get_contents($fname);\r\nbaconizeMe(trim($pops), $maxEvolutions, $stopTolerance, $maxVerifies);\r\nfunction baconizeMe($popCenters, $maxEvolutions, $stopTolerance, $maxVerifies){\r\n\tif($popCenters){\r\n\t\t$resultDist1 = 100000000000000;\r\n\t\t$resultDist2 = false;\r\n\t\t\r\n\t\twhile($maxVerifies){ \r\n\t\t\t$results2 = calcInput($popCenters, $maxEvolutions, $stopTolerance);\r\n\t\t\t$resultDist2 = $results2[\"dist\"];\r\n\t\t\tif($resultDist2 < $resultDist1){\r\n\t\t\t\t$results1 = $results2;\r\n\t\t\t\t$resultDist1 = $resultDist2;\t\r\n\t\t\t}\r\n\t\t\t$maxVerifies--;\r\n\t\t}\r\n\t\t$finalStr = \"\";\r\n\t\tfor($i = 0; $i < $results1[\"n\"]; $i++){\r\n\t\t\tfor($j = 0; $j < $results1[\"m\"]; $j++){\r\n\t\t\t\t$str = $i . \",\" . $j;\r\n\t\t\t\tif(in_array($str,$results1[\"bacon\"])) $finalStr .= \"B\";\r\n\t\t\t\telse if(in_array($str, $results1[\"popCenter\"])) $finalStr .= \"P\";\r\n\t\t\t\telse $finalStr .= \".\";\r\n\t\t\t}\r\n\t\t\t$finalStr .= \"\\n\";\r\n\t\t}\r\n\r\n\t} \r\n\tprint \"Your input has gone through the ringer. It has produced a result.\\n\\n\";\r\n\tprint \"It has found an Optimal Distance of: $resultDist1\\n\\n\";\r\n\tforeach($results1['bacon'] as $b){\r\n\t\tprint \"$b\\n\";\r\n\t}\r\n\tprint \"\\n\\nYour graph looks like:\\n$finalStr\\n\";\r\n\t\r\n}\r\n\r\nfunction validateInput($in){\r\n\t$in = trim($in);\r\n\t$in = explode(\"\\n\", $in);\r\n\tif(preg_match(\"/([0-9]+)x([0-9]+) ([0-9]+)/\", $in[0]) != 1) {return false;}\r\n\t$n = strlen(trim($in[1]));\r\n\tfor($i = 2; $i < count($in); $i++){\r\n\t\tif(strlen($n != strlen(trim($in[$i])))) return false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nfunction calcInput($in, $max, $stop){\r\n\t$in = trim($in);\r\n\t$in = explode(\"\\n\", $in);\r\n\tpreg_match(\"/^([0-9]+)x([0-9]+) ([0-9]+)/\", $in[0], $matches);\r\n\t$city = array();\r\n\tfor($k = 1; $k < count($in); $k++){\r\n\t\t$city[] = str_split( trim($in[$k]));\r\n\t}\r\n\t$no_bacon = array();\r\n\tforeach($city as $i => $row){\r\n\t\tforeach($row as $j => $block){\r\n\t\t\tif($block == \"P\"){\r\n\t\t\t\t$no_bacon[] = $i . \",\" . $j;\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t$bacon_array = get_bacon_array($no_bacon, $matches[1], $matches[2], $matches[3]);\r\n\t$optimal = $bacon_array;\r\n\t$bestDist = calcDist($optimal, $no_bacon);\r\n\t$changed = 0;\r\n\tfor($tests = 0; $tests < $max; $tests++){\r\n\t\t$children = array($bacon_array);\r\n\t\tfor($spawn = 0; $spawn < 10; $spawn++){\r\n\t\t\tif($spawn % 5)\t$children[] = permute($optimal, $no_bacon, $matches[1], $matches[2],0);\r\n\t\t\telse $children[] = permute($optimal, $no_bacon, $matches[1], $matches[2],1);\r\n\t\t}\r\n\t\tforeach($children as $child){\r\n\t\t\t$thisChildDist = calcDist($child, $no_bacon);\r\n\t\t\tif($thisChildDist < $bestDist){\r\n\t\t\t\t$optimal = $child;\r\n\t\t\t\t$bestDist = $thisChildDist;\r\n\t\t\t\t$changed = 0;\t\r\n\t\t\t\tprint $bestDist . \"\\n\";\r\n\t\t\t} else {\r\n\t\t\t\t$changed++;\r\n\t\t\t}\r\n\t\t\tif($changed > $stop) break 2;\r\n\t\t}\r\n\t}\r\n\t$results = array();\r\n\t$results[\"dist\"] = $bestDist;\r\n\t$results[\"bacon\"] = $optimal;\r\n\t$results[\"n\"] = $matches[1];\r\n\t$results[\"m\"] = $matches[2];\r\n\t$results[\"num\"] = $matches[3]; \r\n\t//for simplicity sake\r\n\t$results[\"popCenter\"] = $no_bacon;\r\n\treturn $results;\r\n}\r\n\r\nfunction calcDist($bacon, $popCenter){\r\n\t$Dist = 0;\r\n\tforeach($popCenter as $p){\r\n\t\t$pSplit = explode(\",\",$p);\r\n\t\tforeach($bacon as $b){\r\n\t\t\t$bSplit = explode(\",\",$b);\r\n\t\t\t$d = abs($bSplit[0] - $pSplit[0]) + abs($bSplit[1] - $pSplit[1]);\r\n\t\t\tif(!isset($best) || $d < $best) $best = $d;  \r\n\t\t}\r\n\t\t$Dist += $best;\r\n\t\tunset($best);\r\n\t}\r\n\treturn $Dist;\r\n}\r\n\r\nfunction permute($bacon_array, $no_bacon, $n, $m, $mutate){\r\n\tshuffle($bacon_array);\r\n\tif(!$mutate){\r\n\t\t$changerI = range(-1,1);\r\n\t\t$changerJ = range(-1,1);\r\n\t} else {\r\n\t\t$changerI = range(-1 * floor($n / 2), floor($n / 2));\r\n\t\t$changerJ = range(-1 * floor($m / 2), floor($m / 2));\r\n\t}\r\n\t$pickOn = $bacon_array[0];\r\n\t$pickOn = explode(\",\", $pickOn);\r\n\t$pickOnI = $pickOn[0];\r\n\t$pickOnJ = $pickOn[1];\r\n\tshuffle($changerI);\r\n\tshuffle($changerJ);\r\n\t$changed = false;\r\n\tforeach($changerI as $i){\r\n\t\tforeach($changerJ as $j){\r\n\t\t\tif(($i + $pickOnI) > -1 && ($i + $pickOnI) < $n){\r\n\t\t\t\t$pickedI = ($i + $pickOnI);\r\n\t\t\t} else if(($i + $pickOnI) >= $n){\r\n\t\t\t\t$pickedI = $n - 1;\t\r\n\t\t\t} else if(($i + $pickOnI) <= -1){\r\n\t\t\t\t$pickedI = 0;\r\n\t\t\t}\r\n\t\t\tif(($j + $pickOnJ) > -1 && ($j + $pickOnJ) < $m){\r\n\t\t\t\t$pickedJ = ($j + $pickOnJ);\r\n\t\t\t} else if(($j + $pickOnJ) >= $m){\r\n\t\t\t\t$pickedJ = $m - 1;\t\r\n\t\t\t} else if(($j + $pickOnJ) <= -1){\r\n\t\t\t\t$pickedJ = 0;\r\n\t\t\t}\r\n\t\t\t$item = $pickedI . \",\" . $pickedJ;\r\n\t\t\tif(!in_array($item, $bacon_array) && !in_array($item, $no_bacon)){\r\n\t\t\t\t$changed = true;\r\n\t\t\t\t//shut up, I can break if I wanna\r\n\t\t\t\tbreak 2;\r\n\t\t\t}\t\r\n\t\t}\t\r\n\t}\r\n\tif($changed){\r\n\t\t$bacon_array[0] = $item;\r\n\t\treturn $bacon_array;\r\n\t} else {\r\n\t\t//return $this->permute($bacon_array, $no_bacon);\t\r\n\t}\r\n}\r\n\r\nfunction get_bacon_array($no_bacon, $n, $m, $num){\r\n\t$i = 0;\r\n\t$bacon_array = array();\r\n\twhile($i < $num){\r\n\t\t$new_coord = rand_coord($n, $m);\r\n\t\tif(!in_array($new_coord, $no_bacon) && !in_array($new_coord, $bacon_array)){\r\n\t\t\t$i++;\r\n\t\t\t$bacon_array[] = $new_coord;\r\n\t\t}\r\n\t}\r\n\treturn $bacon_array;\r\n}\r\n\r\nfunction rand_coord($n,$m) {\r\n\t//array indexed coordinates, starts at 0\r\n    $num1 = rand(0,($n - 1));\r\n    $num2 = rand(0,($m - 1));\r\n    $new_coord = $num1 . \",\" . $num2;\r\n\treturn $new_coord;\r\n} \r\n\r\n?>", "problem": 4}}, {"pk": 12, "model": "challenges.solution", "fields": {"language": 5, "title": "K-means clustering", "author": 25, "submitted": "2010-07-11", "source": "/*******************************************************\r\n * (c) 2010 Samuel F. Overton\r\n * http://oftenmarvelous.blogspot.com/\r\n *\r\n * compile: g++ -o bacon bacon.cpp\r\n * run: ./bacon file.txt\r\n *      ./bacon < file.txt\r\n *******************************************************/\r\n#include <iostream>\r\n#include <fstream>\r\n#include <iomanip>\r\n\r\n#include <string>\r\n#include <sstream>\r\n\r\n#include <vector>\r\n\r\n#include <algorithm>\r\n#include <functional>\r\n#include <numeric>\r\n#include <limits>\r\n\r\n#include <stdexcept>\r\n\r\n#include <cstdlib>\r\n#include <cassert>\r\n#include <ctime>\r\n#include <cctype>\r\n\r\nusing namespace std;\r\n\r\ntemplate <typename Point, typename Distance >\r\nclass KMeans\r\n{\r\npublic:\r\n    typedef vector<Point> Points;\r\n\r\n    KMeans( int num_clusters = 5, int num_trials = 5, int num_iterations = 10 ) :\r\n        num_clusters(num_clusters),\r\n        num_trials(num_trials),\r\n        num_iterations( num_iterations ),\r\n        best_centroid_fitness( 0.0 )\r\n    {\r\n        srand( time( 0 ) );\r\n    }\r\n\r\n    Points cluster( const Points& data_points )\r\n    {\r\n        if( data_points.size() < num_clusters )\r\n            throw runtime_error( \"data_points should be larger than num_clusters\" );\r\n\r\n        \r\n        for( int trial = 0; trial < num_trials; ++trial )\r\n        {\r\n            Points centroids = sample( data_points, num_clusters );\r\n            Points last_centroids( centroids.size() );\r\n            vector<Points> clusters( num_clusters );\r\n            int iterations = 0;\r\n            do\r\n            {\r\n                clusters.clear();\r\n                clusters.resize( num_clusters );\r\n\r\n                // classify all the points\r\n                for( typename Points::const_iterator data_point = data_points.begin();\r\n                    data_point != data_points.end();\r\n                    ++data_point )\r\n                {\r\n                    int cluster = classify( *data_point, centroids );\r\n                    clusters[ cluster ].push_back( *data_point );\r\n                }\r\n\r\n                // put centroid in empty clusters\r\n                for( int i = 0; i < clusters.size(); ++i )\r\n                {\r\n                    if( clusters[i].empty() )\r\n                        clusters[i].push_back( centroids[i] );\r\n                }\r\n\r\n                // recalculate centroids\r\n                swap( centroids, last_centroids );\r\n                transform( clusters.begin(), clusters.end(), centroids.begin(), &KMeans::calc_centroid );\r\n\r\n                // test for convergence\r\n            } while( !equal( centroids, last_centroids ) && ++iterations < num_iterations );\r\n\r\n            double fitness = centroid_fitness( centroids, clusters );\r\n\r\n            // compare quality of centroids to best so far\r\n            if( trial == 0 || fitness < best_centroid_fitness )\r\n            {\r\n                best_centroid_fitness = fitness; \r\n                swap( centroids, best_centroids );\r\n                swap( clusters, best_clusters );\r\n            }\r\n        }\r\n  \r\n        return best_centroids;\r\n    }\r\n\r\n    int classify( Point p )\r\n    {\r\n        return classify( p, best_centroids );\r\n    }\r\n\r\n    int classify( Point p, const Points& centroids )\r\n    {\r\n        assert( centroids.size() );\r\n        vector<double> distances( centroids.size() );\r\n        transform( centroids.begin(), centroids.end(), distances.begin(), bind1st( distance_fun(), p ) );\r\n        vector<double>::iterator min_dist = min_element( distances.begin(), distances.end() );\r\n        return &*min_dist - &distances[0];\r\n    }\r\n\r\n    double centroid_fitness( const Points& centroids, const vector<Points>& clusters )\r\n    {\r\n        double result;\r\n        for( int i = 0; i < centroids.size(); ++i )\r\n        {\r\n            // accumulate the distance between centroid and each vector in the cluster\r\n            result += accumulate( clusters[i].begin(), clusters[i].end(), 0.0, distance_accumulator( centroids[i] ) );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    double fitness() { return best_centroid_fitness; }\r\n\r\n    const vector<Points>& clusters() { return best_clusters; }\r\n\r\nprotected:\r\n    Points sample( Points points, int num )\r\n    {\r\n        random_shuffle( points.begin(), points.end() );\r\n        points.resize( num );\r\n        return points;\r\n    }\r\n\r\n    struct distance_accumulator : binary_function<double, Point, double>\r\n    {\r\n        distance_accumulator( Point p1 ) : p1( p1 ) { }\r\n\r\n        double operator()( double d, Point p2 )\r\n        {\r\n            return d + Distance()( p1, p2 );\r\n        }\r\n\r\n        Point p1;\r\n    };\r\n    \r\n    struct distance_fun : binary_function<Point, Point, double>\r\n    {\r\n        double operator()( Point p1, Point p2 ) const\r\n        {\r\n            return Distance()( p1, p2 );\r\n        }\r\n    };\r\n\r\n    static Point calc_centroid( const Points& points )\r\n    {\r\n        Point sum = accumulate( points.begin(), points.end(), Point() );\r\n        return sum / points.size();\r\n    }\r\n\r\n    bool equal( Points points1, Points points2 )\r\n    {\r\n        assert( points1.size() == points2.size() );\r\n        sort( points1.begin(), points1.end() );\r\n        sort( points2.begin(), points2.end() );\r\n        return std::equal( points1.begin(), points1.end(), points2.begin() );\r\n    }\r\n\r\n    int num_clusters;\r\n    int num_trials;\r\n    int num_iterations;\r\n    Points best_centroids;\r\n    double best_centroid_fitness;\r\n    vector<Points> best_clusters;\r\n};\r\n\r\n\r\nclass IntVector\r\n{\r\npublic:\r\n    IntVector() : x(0), y(0) { }\r\n\r\n    IntVector( int x, int y ) : x(x), y(y) { }\r\n\r\n    IntVector operator+( const IntVector& rhs ) const { return IntVector( x + rhs.x, y + rhs.y ); }\r\n\r\n    IntVector operator/( int n ) const { return IntVector( x / n, y / n ); }\r\n\r\n    bool operator<( const IntVector& p ) const { return x == p.x ? y < p.y : x < p.x; }\r\n\r\n    bool operator==( const IntVector& p ) const { return x == p.x && y == p.y; }\r\n\r\n    int x;\r\n    int y;\r\n};\r\n\r\nostream& operator<<( ostream& os, const IntVector& vec )\r\n{\r\n    os << \"(\" << vec.x << \",\" << vec.y << \")\";\r\n    return os;\r\n}\r\n\r\nstruct VectorDistance\r\n{\r\n    // manhattan distance\r\n    double operator()( const IntVector& v1, const IntVector& v2 )\r\n    {\r\n        return abs( v2.x - v1.x ) + abs( v2.y - v1.y );\r\n    } \r\n};\r\n\r\ntypedef KMeans<IntVector, VectorDistance> VectorKMeans;\r\ntypedef VectorKMeans::Points Points;\r\n\r\nstruct BaconProblem\r\n{\r\n    int x;\r\n    int y;\r\n    int num_baconhouses;\r\n    Points population_centres;\r\n};\r\n\r\nBaconProblem parseInput( int argc, char* argv[] )\r\n{\r\n    istream* pIn = 0;\r\n    ifstream infile;\r\n    if( argc <= 1 )\r\n        pIn = &cin;\r\n    else\r\n    {\r\n        infile.open( argv[1] );\r\n        pIn = &infile;\r\n    }\r\n    istream& in = *pIn;\r\n\r\n    BaconProblem b = {0};\r\n\r\n    // read header\r\n    char c = 0;\r\n    in >> b.x >> c >> b.y;\r\n    assert( c == 'x' );\r\n    in >> b.num_baconhouses;\r\n\r\n    do { in >> c; } while( isspace( c ) );\r\n\r\n    // read points\r\n    for( int y = 0; y < b.y; ++y )\r\n    {\r\n        for( int x = 0; x < b.x; ++x )\r\n        {\r\n            if( c == 'P' )\r\n                b.population_centres.push_back( IntVector( x, y ) );\r\n\r\n            in >> c;\r\n        }\r\n    }\r\n\r\n    return b;\r\n}\r\n\r\nIntVector adjust( const IntVector& centroid, const Points& cluster, VectorKMeans& kmeans, const BaconProblem& b )\r\n{\r\n    int directions[][2] = { {-1,-1}, {-1,0}, {-1, 1},\r\n                           {0,-1},          {0,1}, \r\n                           {1,-1},  {1,0},  {1,1} };\r\n    if( find( cluster.begin(), cluster.end(), centroid ) != cluster.end() )\r\n    {\r\n        vector<double> distances;\r\n        for( int i = 0; i < sizeof(directions)/sizeof(*directions); ++i )\r\n        {\r\n            IntVector new_centroid = centroid + IntVector( directions[i][0], directions[i][1] );\r\n            if( find( cluster.begin(), cluster.end(), new_centroid ) == cluster.end() \r\n                && 0 <= new_centroid.x && new_centroid.x < b.x && 0 <= new_centroid.y && new_centroid.y < b.y  )\r\n                distances.push_back( kmeans.centroid_fitness( Points( 1, new_centroid ), vector<Points>( 1, cluster ) ) );\r\n            else\r\n                distances.push_back( numeric_limits<double>::max() );\r\n        }\r\n        vector<double>::iterator min = min_element( distances.begin(), distances.end() );\r\n        int n = &*min - &distances[0];\r\n        return centroid + IntVector( directions[n][0], directions[n][1] );\r\n    }\r\n    else\r\n        return centroid;\r\n}\r\n\r\nint main( int argc, char* argv[] )\r\n{\r\n    BaconProblem b( parseInput( argc, argv ) );\r\n\r\n    VectorKMeans kmeans( b.num_baconhouses, 1000, 100 );\r\n\r\n    Points centroids = kmeans.cluster( b.population_centres );\r\n    const vector<Points>& clusters = kmeans.clusters();\r\n\r\n    // adjust the centroids so they dont land on the population centres\r\n    for( int i = 0; i < centroids.size(); ++i )\r\n    {\r\n        centroids[i] = adjust( centroids[i], clusters[i], kmeans, b );\r\n    }\r\n\r\n    cout << \"Clusters: \" << endl;\r\n    for( int i = 0; i < centroids.size(); ++i )\r\n    {\r\n        cout << centroids[i] << endl;          \r\n    }\r\n\r\n    cout << \"Fitness: \" << kmeans.centroid_fitness( centroids, clusters ) << endl;\r\n\r\n    return 0;\r\n}\r\n", "problem": 4}}, {"pk": 15, "model": "challenges.solution", "fields": {"language": 25, "title": "idevelop's solution v2", "author": 23, "submitted": "2010-07-11", "source": "<?php\r\n\t/*\r\n\t\tWritten by Andrei Gheorghe - idevelop.ro\r\n\t\tResults:\r\n\t\t* ryan-01: 133 (1 second)\r\n\t\t* ryan-02: 419 (4 seconds)\r\n\t\t* ryan-03: 1519 (3 minutes)\r\n\t*/\r\n\r\n\tfunction d($x1, $y1, $x2, $y2) {\r\n\t\treturn abs($x2-$x1)+abs($y2-$y1);\r\n\t}\r\n\t\r\n\tfunction qpush(&$queue, $value) {\r\n\t\tarray_push($queue, $value);\r\n\t}\r\n\t\r\n\tfunction qpop(&$queue) {\r\n\t\tif (count($queue)>0) return array_shift($queue); else return false;\r\n\t}\r\n\t\r\n\tfunction qprint(&$queue) {\r\n\t\techo \"\\n\".implode(\", \", $queue).\"\\n\";\r\n\t}\r\n\t\r\n\tfunction joined_rectangles_area($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\t\t\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\t\t\r\n\t\t//echo \"$x1 $y1 -> $x2 $y2\";\r\n\t\t\r\n\t\treturn (abs($x1-$x2)+1)+(abs($y1-$y2)+1);\r\n\t}\r\n\t\r\n\tfunction rectangle_area($r) {\r\n\t\treturn (abs($r[0][0]-$r[1][0])+1)*(abs($r[0][1]-$r[1][1])+1);\r\n\t}\r\n\t\r\n\tfunction join_rectangles($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\r\n\t\t$result=array(\r\n\t\t\tarray($x1, $y1),\r\n\t\t\tarray($x2, $y2),\r\n\t\t\tarray_merge($rectangles[$r1][2], $rectangles[$r2][2])\r\n\t\t);\r\n\t\t\r\n\t\t//echo \"join $r1 + $r2 => result: \".print_r($result, 1);\r\n\t\t\r\n\t\t$rectangles[$r1]=$result;\r\n\t\tunset($rectangles[$r2]);\t\r\n\t}\r\n\r\n\tif($argc < 2){\r\n\t\tprint \"\\nUsage: php.exe idevelop.php <file> \\n\";\r\n\t\texit;\r\n\t}\r\n\tset_time_limit(3000);\r\n\t$fname = $argv[1];\r\n\t\r\n\t//$fname=\"large-01\";\r\n\r\n\t$data=explode(\"\\n\",file_get_contents($fname));\r\n\t$l=explode(\" \", $data[0]);\r\n\t\r\n\t$bacons=intval($l[1]);\r\n\t$size=explode(\"x\", $l[0]);\r\n\t$height=intval($size[0]);\r\n\t$width=intval($size[1]);\r\n\t\r\n\t$points=array();\r\n\t\r\n\t\r\n\tfor ($i=1; $i<=$height; $i++) {\r\n\t\tfor ($j=0; $j<$width; $j++) {\r\n\t\t\tif ($data[$i][$j]==\"P\") $points[]=array($i, $j+1);\r\n\t\t\r\n\t\t\t$matrix[$i][$j+1]=$data[$i][$j];\r\n\t\t}\r\n\t}\r\n\t\r\n\t$rectangles=array();\r\n\tforeach ($points as $pid => $p) $rectangles[]=array(\r\n\t\tarray($p[0], $p[1]), \r\n\t\tarray($p[0], $p[1]),\r\n\t\tarray($pid => $p)\r\n\t);\r\n\t\r\n\tfor ($k=1; $k<=count($points)-$bacons; $k++) {\r\n\t\t$min=100000000000;\r\n\t\t\r\n\t\tforeach ($rectangles as $r1 => $r1coords) {\r\n\t\t\tforeach ($rectangles as $r2 => $r2coords) {\r\n\t\t\t\tif ($r1<>$r2) {\r\n\t\t\t\t\t$joined_area=joined_rectangles_area($r1, $r2);\r\n\t\t\t\t\tif ($joined_area<$min) {\r\n\t\t\t\t\t\t$min=$joined_area;\r\n\t\t\t\t\t\t$minr1=$r1;\r\n\t\t\t\t\t\t$minr2=$r2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tjoin_rectangles($minr1, $minr2);\r\n\t}\r\n\t\r\n\t$total_distance=0;\r\n\t\r\n\tforeach ($rectangles as $r) {\r\n\t\t//echo \"R: (\".$r[0][0].\",\".$r[0][1].\") -> (\".$r[1][0].\",\".$r[1][1].\") = \";\r\n\t\t$area=rectangle_area($r);\r\n\t\tif ($area==count($r[2])) {\r\n\t\t\t// special case, no empty spaces, bacon goes outside the box\r\n\r\n\t\t\t$queue=array();\r\n\t\t\t\r\n\t\t\tforeach ($r[2] as $xy) {\r\n\t\t\t\tqpush($queue, $xy);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (($xy = qpop($queue))!==false) {\r\n\t\t\t\tif ($matrix[$xy[0]][$xy[1]]==\".\") {\r\n\t\t\t\t\t$minx=$xy[0];\r\n\t\t\t\t\t$miny=$xy[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\t$min = 0;\r\n\t\t\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t\t\t$min+=d($minx, $miny, $p[0], $p[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (($xy[0]>1) and ($matrix[$xy[0]-1][$xy[1]]=='.')) qpush($queue, array($xy[0]-1, $xy[1]));\r\n\t\t\t\tif (($xy[0]<$height) and ($matrix[$xy[0]+1][$xy[1]]=='.')) qpush($queue, array($xy[0]+1, $xy[1]));\r\n\t\t\t\tif (($xy[1]>1) and ($matrix[$xy[0]][$xy[1]-1]=='.')) qpush($queue, array($xy[0], $xy[1]-1));\r\n\t\t\t\tif (($xy[1]<$width) and ($matrix[$xy[0]][$xy[1]+1]=='.')) qpush($queue, array($xy[0], $xy[1]+1));\t\t\t\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t$submatrix=array();\r\n\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t$submatrix[$p[0]][$p[1]]=\"*\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (!isset($submatrix[$x][$y])) {\r\n\t\t\t\tforeach ($r[2] as $p) $submatrix[$x][$y]+=d($p[0], $p[1], $x, $y);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$min=1000000000;\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (($submatrix[$x][$y]!=\"*\") and ($min>$submatrix[$x][$y])) {\r\n\t\t\t\t$min=$submatrix[$x][$y];\r\n\t\t\t\t$minx=$x;\r\n\t\t\t\t$miny=$y;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\t\r\n\r\n\t\t$matrix[$minx][$miny]=\"D\";\r\n\t\t$dispensers[]=array($minx, $miny, $min);\t\t\t\r\n\t\t\r\n\t\t$total_distance+=$min;\r\n\t}\r\n\t\r\n\techo $total_distance.\"\\n\";\r\n\tforeach ($dispensers as $d) echo $d[0].\" \".$d[1].\"\\n\";\r\n?>", "problem": 4}}, {"pk": 16, "model": "challenges.solution", "fields": {"language": 4, "title": "Stupidest thing that could possibly work.", "author": 30, "submitted": "2010-07-11", "source": "/*\r\n    ATTENTION: It is incomplete and mostly proof-of-concept.\r\n    With any luck, it will be improved in the future.\r\n*/\r\n\r\n#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n#include<assert.h>\r\n\r\n/*\r\n    TODO: more asserts and boundary checks for input data.\r\n*/\r\n\r\n/*\r\nStart with K (random)solutions.\r\nAt each step:\r\nTry to improve those K into K * L new solutions.\r\nAdd M new random solutions.\r\nUse the K best from last generation.\r\n*/\r\n\r\nconst int MAX_STEP_SIZE = 3;\r\nint num_generations = 500;\r\nint generation_size = 50;\r\nint num_children = 10;\r\nint random_mutations = 100;\r\nchar input_filename[128] = {0};\r\n\r\nconst int max_n = 100;\r\nconst int max_m = 100;\r\nconst int max_b = 100;\r\n\r\nint n,m,b;\r\n\r\nint best_score;\r\nstruct pos * best_solution;\r\nstruct pos ** solutions;\r\n\r\nstruct pos ** candidates;\r\nint* scores;\r\n\r\n\r\nstruct pos {\r\n    int x;\r\n    int y;\r\n};\r\n\r\nint p;\r\nstruct pos * cities;\r\nint free_index;\r\nstruct pos * free_positions;\r\n\r\nvoid read()\r\n{\r\n    FILE *f = fopen(input_filename,\"rt\");\r\n    int tmp;\r\n\r\n    assert(fscanf(f,\"%dx%d %d\", &n, &m, &b) > 0);\r\n    assert(n <= max_n);\r\n    assert(m <= max_m);\r\n\r\n    free_index = 0;\r\n    free_positions = calloc(n*m, sizeof(struct pos));\r\n\r\n    cities = (struct pos *)calloc(max_m*max_n, sizeof(struct pos));\r\n    int x,y;\r\n    char c;\r\n    for(x=0;x<n;++x)\r\n    {\r\n        assert(fscanf(f, \"%c\", &c) >= 0);\r\n        for(y=0;y<m;++y)\r\n        {\r\n            assert(fscanf(f, \"%c\", &c) >= 0);\r\n\r\n            if(c == 'P')\r\n            {\r\n                cities[p].x = x;\r\n                cities[p].y = y;\r\n                ++p;\r\n            }\r\n            else\r\n            {\r\n                free_positions[free_index].x = x;\r\n                free_positions[free_index].y = y;\r\n                free_index++;\r\n            }\r\n        }\r\n    }\r\n    best_score = (n+m)*p;\r\n}\r\n\r\nint min(int a, int b)\r\n{\r\n    return (a<b?a:b);\r\n}\r\n\r\nstruct pos * create_empty_solution()\r\n{\r\n    return (struct pos *)calloc(b, sizeof(struct pos));\r\n}\r\n\r\nstruct pos * create_random_solution()\r\n{\r\n    struct pos * sol = create_empty_solution();\r\n\r\n    int i;\r\n    int random_index = rand() % free_index;\r\n\r\n    for(i=0;i<b;++i)\r\n    {\r\n        sol[i].x = free_positions[random_index].x;\r\n        sol[i].y = free_positions[random_index].y;\r\n    }\r\n\r\n    return sol;\r\n}\r\n\r\nint dist(struct pos* a, struct pos* b)\r\n{\r\n    return abs(a->x - b->x) + abs(a->y - b->y);\r\n}\r\n\r\nint calculate_score(struct pos * solution)\r\n{\r\n    int i,j;\r\n    int res = 0;\r\n    int min_dist;\r\n    for(i=0;i<p;++i)\r\n    {\r\n        min_dist = dist(&solution[0], &cities[i]);\r\n        \r\n        for(j=1;j<b;++j)\r\n        {\r\n            \r\n            min_dist = min(min_dist, dist(&solution[j], &cities[i]));\r\n        }\r\n        res += min_dist;\r\n    }\r\n    return res;\r\n}\r\n\r\nstruct pos deltas[] = {\r\n    {1,0},\r\n    {-1,0},\r\n    {0,1},\r\n    {0,-1},\r\n};\r\n\r\nint is_valid_pos(struct pos a_pos)\r\n{\r\n    int i;\r\n    if(!(a_pos.x >= 0 && a_pos.x < n))\r\n        return 0;\r\n    if(!(a_pos.y >= 0 && a_pos.y < m))\r\n        return 0;\r\n    for(i=0;i<p;++i)\r\n    {\r\n        if(a_pos.x == cities[i].x && a_pos.y == cities[i].y)\r\n            return 0;\r\n    }\r\n    return 1;\r\n}\r\n\r\nstruct pos * clone_solution(struct pos * solution)\r\n{\r\n    struct pos * sol = create_empty_solution();\r\n    memcpy(sol, solution, b*sizeof(struct pos));\r\n    return sol;\r\n}\r\n\r\nstruct pos * evolve_solution(struct pos * solution)\r\n{\r\n    struct pos * sol = create_empty_solution();\r\n    int i;\r\n    int step_size;\r\n    int direction;\r\n    struct pos new_pos;\r\n    memcpy(sol, solution, b*sizeof(struct pos));\r\n    for(i=0;i<b;++i)\r\n    {\r\n        step_size = rand() % MAX_STEP_SIZE;\r\n        direction = rand() % 4;\r\n\r\n        new_pos.x = sol[i].x + deltas[direction].x*step_size;\r\n        new_pos.y = sol[i].y + deltas[direction].y*step_size;\r\n        if(is_valid_pos(new_pos))\r\n            sol[i] = new_pos;\r\n    }\r\n    \r\n    return sol;\r\n}\r\n\r\nint cmp(const void *a, const void *b)\r\n{\r\n    return scores[*(int *)a] - scores[*(int *)b];\r\n}\r\n\r\nvoid compute_next_generation()\r\n{\r\n    int i,j;\r\n    int solution_size = b*sizeof(struct pos);\r\n    int candidates_size = generation_size * num_children + random_mutations;\r\n\r\n    int * score_index = (int *)calloc(candidates_size, sizeof(int));;\r\n\r\n    for(i=0;i<generation_size;++i)\r\n    {\r\n        //candidates[i*num_children] = clone_solution(solutions[i]);\r\n        for(j=0; j<num_children; ++j)\r\n        {\r\n            candidates[i*num_children + j] = evolve_solution(solutions[i]);\r\n        }\r\n    }\r\n\r\n    for(i=0;i<random_mutations;++i)\r\n    {\r\n        candidates[generation_size * num_children + i] = create_random_solution();\r\n    }\r\n\r\n    for(i=0;i<candidates_size;++i)\r\n    {\r\n        score_index[i] = i;\r\n        scores[i] = calculate_score(candidates[i]);\r\n    }\r\n\r\n    qsort(score_index, candidates_size, sizeof(int), cmp);\r\n\r\n    for(i=0;i<generation_size;++i)\r\n    {\r\n        free(solutions[i]);\r\n        solutions[i] = candidates[score_index[i]];\r\n    }\r\n\r\n    for(i=generation_size;i<candidates_size;++i)\r\n    {\r\n        free(candidates[score_index[i]]);\r\n    }\r\n\r\n    free(score_index);\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int i;\r\n\r\n    int candidates_size = generation_size * num_children + random_mutations;\r\n    scores = (int *)calloc(candidates_size, sizeof(int));\r\n    candidates = (struct pos **)calloc(candidates_size, sizeof(struct pos *));\r\n    solutions = calloc(generation_size, sizeof(struct pos *));\r\n\r\n    for(i=0;i<generation_size;++i)\r\n    {\r\n        solutions[i] = create_random_solution();\r\n    }\r\n\r\n    for(i=0;i<num_generations;++i)\r\n    {\r\n        compute_next_generation();\r\n        int score = calculate_score(solutions[0]);\r\n        if(score < best_score)\r\n        {\r\n            printf(\"Score improved from %d to %d on generation %d\\n\", best_score, score, i);\r\n            best_solution = clone_solution(solutions[0]);\r\n            best_score = score;\r\n        }\r\n    }\r\n\r\n\r\n    for(i=1;i<generation_size;++i)\r\n    {\r\n        free(solutions[i]);\r\n    }\r\n}\r\n\r\nvoid print()\r\n{\r\n    int i;\r\n    int x;\r\n    int y;\r\n    char ** masiv = alloca(sizeof(char*)*n);\r\n    for(i=0;i<n;++i)\r\n        masiv[i] = alloca(sizeof(char)*m);\r\n\r\n    for(x=0;x<n;++x)\r\n    {\r\n        for(y=0;y<m;++y)\r\n        {\r\n            masiv[x][y] = '.';\r\n        }\r\n        masiv[x][m] = 0;\r\n    }\r\n\r\n    for(i=0;i<b;++i)\r\n    {\r\n        printf(\"(%d:%d) \", best_solution[i].x, best_solution[i].y);\r\n        masiv[best_solution[i].x][best_solution[i].y] = 'B';\r\n    }\r\n\r\n    for(i=0;i<p;++i)\r\n        masiv[cities[i].x][cities[i].y] = 'P';\r\n    printf(\"\\n\");\r\n    for(x=0;x<n;++x)\r\n        printf(\"%s\\n\", masiv[x]);\r\n    printf(\"\\n\");\r\n    printf(\"Best score: %d\\n\", best_score);\r\n\r\n    free(best_solution);\r\n}\r\n\r\nint main(int argc, char ** argv)\r\n{\r\n    if(argc >= 2)\r\n        strcpy(input_filename, argv[1]);\r\n    else\r\n        strcpy(input_filename, \"input.txt\");\r\n    if(argc >= 3)\r\n        num_generations=atoi(argv[2]);\r\n    if(argc >= 4)\r\n        generation_size=atoi(argv[3]);\r\n    if(argc >= 5)\r\n        num_children=atoi(argv[4]);\r\n    if(argc >= 6)\r\n        random_mutations=atoi(argv[5]);\r\n\r\n    read();\r\n    solve();\r\n    print();\r\n    return 0;\r\n}\r\n", "problem": 4}}, {"pk": 18, "model": "challenges.solution", "fields": {"language": 25, "title": "idevelop+Rafajafar (Greedy + GA)", "author": 15, "submitted": "2010-07-12", "source": "#!/usr/bin/php\r\n<?php\r\nset_time_limit(3600);\r\nif($argc < 2){\r\n\tprint \"\\nUsage: ./idevelop_rafajafar.php <file> \\n\";\r\n\texit;\r\n}\r\nini_set('memory_limit', '128M');\r\nprint \"Pre-calculating using idevelop's greedy partitioning...\\n\";\r\nprint \"Could take a few minutes for large graphs.\\n\";\r\n$fname = $argv[1];\r\n\t/*\r\n\t\tWritten by Andrei Gheorghe - idevelop.ro\r\n\t\tResults:\r\n\t\t* ryan-01: 133 (1 second)\r\n\t\t* ryan-02: 419 (4 seconds)\r\n\t\t* ryan-03: 1519 (3 minutes)\r\n\t*/\r\n\r\n\tfunction d($x1, $y1, $x2, $y2) {\r\n\t\treturn abs($x2-$x1)+abs($y2-$y1);\r\n\t}\r\n\t\r\n\tfunction qpush(&$queue, $value) {\r\n\t\tarray_push($queue, $value);\r\n\t}\r\n\t\r\n\tfunction qpop(&$queue) {\r\n\t\tif (count($queue)>0) return array_shift($queue); else return false;\r\n\t}\r\n\t\r\n\tfunction qprint(&$queue) {\r\n\t\techo \"\\n\".implode(\", \", $queue).\"\\n\";\r\n\t}\r\n\t\r\n\tfunction joined_rectangles_area($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\t\t\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\t\t\r\n\t\t//echo \"$x1 $y1 -> $x2 $y2\";\r\n\t\t\r\n\t\treturn (abs($x1-$x2)+1)+(abs($y1-$y2)+1);\r\n\t}\r\n\t\r\n\tfunction rectangle_area($r) {\r\n\t\treturn (abs($r[0][0]-$r[1][0])+1)*(abs($r[0][1]-$r[1][1])+1);\r\n\t}\r\n\t\r\n\tfunction join_rectangles($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\r\n\t\t$result=array(\r\n\t\t\tarray($x1, $y1),\r\n\t\t\tarray($x2, $y2),\r\n\t\t\tarray_merge($rectangles[$r1][2], $rectangles[$r2][2])\r\n\t\t);\r\n\t\t\r\n\t\t//echo \"join $r1 + $r2 => result: \".print_r($result, 1);\r\n\t\t\r\n\t\t$rectangles[$r1]=$result;\r\n\t\tunset($rectangles[$r2]);\t\r\n\t}\r\n\t\r\n\t//$fname=\"large-01\";\r\n\r\n\t$data=explode(\"\\n\",file_get_contents($fname));\r\n\t$l=explode(\" \", $data[0]);\r\n\t$bacons=intval($l[1]);\r\n\t$size=explode(\"x\", $l[0]);\r\n\t$height=intval($size[0]);\r\n\t$width=intval($size[1]);\r\n\t\r\n\t$points=array();\r\n\tfor ($i=1; $i<=$height; $i++) {\r\n\t\tfor ($j=0; $j<$width; $j++) {\r\n\t\t\tif ($data[$i][$j]==\"P\") $points[]=array($i, $j+1);\r\n\t\t\r\n\t\t\t$matrix[$i][$j+1]=$data[$i][$j];\r\n\t\t}\r\n\t}\r\n\t\r\n\t$rectangles=array();\r\n\tforeach ($points as $pid => $p) $rectangles[]=array(\r\n\t\tarray($p[0], $p[1]), \r\n\t\tarray($p[0], $p[1]),\r\n\t\tarray($pid => $p)\r\n\t);\r\n\t\r\n\tfor ($k=1; $k<=count($points)-$bacons; $k++) {\r\n\t\t$min=100000000000;\r\n\t\t\r\n\t\tforeach ($rectangles as $r1 => $r1coords) {\r\n\t\t\tforeach ($rectangles as $r2 => $r2coords) {\r\n\t\t\t\tif ($r1<>$r2) {\r\n\t\t\t\t\t$joined_area=joined_rectangles_area($r1, $r2);\r\n\t\t\t\t\tif ($joined_area<$min) {\r\n\t\t\t\t\t\t$min=$joined_area;\r\n\t\t\t\t\t\t$minr1=$r1;\r\n\t\t\t\t\t\t$minr2=$r2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tjoin_rectangles($minr1, $minr2);\r\n\t}\r\n\t\r\n\t$total_distance=0;\r\n\t\r\n\tforeach ($rectangles as $r) {\r\n\t\t//echo \"R: (\".$r[0][0].\",\".$r[0][1].\") -> (\".$r[1][0].\",\".$r[1][1].\") = \";\r\n\t\t$area=rectangle_area($r);\r\n\t\tif ($area==count($r[2])) {\r\n\t\t\t// special case, no empty spaces, bacon goes outside the box\r\n\r\n\t\t\t$queue=array();\r\n\t\t\t\r\n\t\t\tforeach ($r[2] as $xy) {\r\n\t\t\t\tqpush($queue, $xy);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (($xy = qpop($queue))!==false) {\r\n\t\t\t\tif ($matrix[$xy[0]][$xy[1]]==\".\") {\r\n\t\t\t\t\t$minx=$xy[0];\r\n\t\t\t\t\t$miny=$xy[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\t$min = 0;\r\n\t\t\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t\t\t$min+=d($minx, $miny, $p[0], $p[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (($xy[0]>1) and ($matrix[$xy[0]-1][$xy[1]]=='.')) qpush($queue, array($xy[0]-1, $xy[1]));\r\n\t\t\t\tif (($xy[0]<$height) and ($matrix[$xy[0]+1][$xy[1]]=='.')) qpush($queue, array($xy[0]+1, $xy[1]));\r\n\t\t\t\tif (($xy[1]>1) and ($matrix[$xy[0]][$xy[1]-1]=='.')) qpush($queue, array($xy[0], $xy[1]-1));\r\n\t\t\t\tif (($xy[1]<$width) and ($matrix[$xy[0]][$xy[1]+1]=='.')) qpush($queue, array($xy[0], $xy[1]+1));\t\t\t\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t$submatrix=array();\r\n\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t$submatrix[$p[0]][$p[1]]=\"*\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (!isset($submatrix[$x][$y])) {\r\n\t\t\t\tforeach ($r[2] as $p) $submatrix[$x][$y]+=d($p[0], $p[1], $x, $y);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$min=1000000000;\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (($submatrix[$x][$y]!=\"*\") and ($min>$submatrix[$x][$y])) {\r\n\t\t\t\t$min=$submatrix[$x][$y];\r\n\t\t\t\t$minx=$x;\r\n\t\t\t\t$miny=$y;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\t\r\n\r\n\t\t$matrix[$minx][$miny]=\"D\";\r\n\t\t$dispensers[]=array($minx, $miny, $min);\t\t\t\r\n\t\t$total_distance+=$min;\r\n\t}\r\n\t\r\n\t//echo $total_distance.\"\\n\";\r\n\t//foreach ($dispensers as $d) echo $d[0].\" \".$d[1].\"\\n\";\r\n\r\n\t/*\r\n\tWritten by Collin Cusce - humanerr.com\r\n\t*/\r\n\r\n\t$maxEvolutions = 2000;\r\n\t$stopTolerance = 2000;\r\n\t$maxVerifies = 1;\r\n\t$pops = file_get_contents($fname);\r\n\tprint \"Optimal Distance from Greedy Partitioning: $total_distance\\n\\n\";\r\n\tprint \"Begining evolutionary optimization:\\n\";\r\n\tbaconizeMe(trim($pops), $dispensers, $maxEvolutions, $stopTolerance, $maxVerifies);\r\n\tfunction baconizeMe($popCenters, $dispensers, $maxEvolutions, $stopTolerance, $maxVerifies){\r\n\t\tif($popCenters){\r\n\t\t\t$resultDist1 = 100000000000000;\r\n\t\t\t$resultDist2 = false;\r\n\t\t\t\r\n\t\t\twhile($maxVerifies){ \r\n\t\t\t\t$results2 = calcInput($popCenters, $dispensers, $maxEvolutions, $stopTolerance);\r\n\t\t\t\t$resultDist2 = $results2[\"dist\"];\r\n\t\t\t\tif($resultDist2 < $resultDist1){\r\n\t\t\t\t\t$results1 = $results2;\r\n\t\t\t\t\t$resultDist1 = $resultDist2;\t\r\n\t\t\t\t}\r\n\t\t\t\t$maxVerifies--;\r\n\t\t\t}\r\n\t\t\t$finalStr = \"\";\r\n\t\t\tfor($i = 0; $i < $results1[\"n\"]; $i++){\r\n\t\t\t\tfor($j = 0; $j < $results1[\"m\"]; $j++){\r\n\t\t\t\t\t$str = $i . \",\" . $j;\r\n\t\t\t\t\tif(in_array($str,$results1[\"bacon\"])) $finalStr .= \"B\";\r\n\t\t\t\t\telse if(in_array($str, $results1[\"popCenter\"])) $finalStr .= \"P\";\r\n\t\t\t\t\telse $finalStr .= \".\";\r\n\t\t\t\t}\r\n\t\t\t\t$finalStr .= \"\\n\";\r\n\t\t\t}\r\n\t\r\n\t\t} \r\n\t\tprint \"Your input has gone through the ringer. It has produced a result.\\n\\n\";\r\n\t\tprint \"It has found an Optimal Distance of: $resultDist1\\n\\n\";\r\n\t\tforeach($results1['bacon'] as $b){\r\n\t\t\tprint \"$b\\n\";\r\n\t\t}\r\n\t\tprint \"\\n\\nYour graph looks like:\\n$finalStr\\n\";\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction validateInput($in){\r\n\t\t$in = trim($in);\r\n\t\t$in = explode(\"\\n\", $in);\r\n\t\tif(preg_match(\"/([0-9]+)x([0-9]+) ([0-9]+)/\", $in[0]) != 1) {return false;}\r\n\t\t$n = strlen(trim($in[1]));\r\n\t\tfor($i = 2; $i < count($in); $i++){\r\n\t\t\tif(strlen($n != strlen(trim($in[$i])))) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction calcInput($in, $dispensers, $max, $stop){\r\n\t\t$in = trim($in);\r\n\t\t$in = explode(\"\\n\", $in);\r\n\t\tpreg_match(\"/^([0-9]+)x([0-9]+) ([0-9]+)/\", $in[0], $matches);\r\n\t\t$city = array();\r\n\t\tfor($k = 1; $k < count($in); $k++){\r\n\t\t\t$city[] = str_split( trim($in[$k]));\r\n\t\t}\r\n\t\t$no_bacon = array();\r\n\t\tforeach($city as $i => $row){\r\n\t\t\tforeach($row as $j => $block){\r\n\t\t\t\tif($block == \"P\"){\r\n\t\t\t\t\t$no_bacon[] = $i . \",\" . $j;\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//$bacon_array = get_bacon_array($no_bacon, $matches[1], $matches[2], $matches[3]);\r\n\t\t$bacon_array = array();\r\n\t\tforeach($dispensers as $d){\r\n\t\t\t//idevelops indexing starts at 1 for some reason....\r\n\t\t\t$bacon_array[] = ($d[0] - 1) . \",\" . ($d[1] - 1);\r\n\t\t}\r\n\t\t$optimal = $bacon_array;\r\n\t\t$bestDist = calcDist($optimal, $no_bacon);\r\n\t\t$changed = 0;\r\n\t\tfor($tests = 0; $tests < $max; $tests++){\r\n\t\t\t$children = array($bacon_array);\r\n\t\t\tfor($spawn = 0; $spawn < 11; $spawn++){\r\n\t\t\t\tif($spawn % 3)\t$children[] = permute($optimal, $no_bacon, $matches[1], $matches[2],1);\r\n\t\t\t\telse $children[] = permute($optimal, $no_bacon, $matches[1], $matches[2],0);\r\n\t\t\t}\r\n\t\t\tforeach($children as $child){\r\n\t\t\t\t$thisChildDist = calcDist($child, $no_bacon);\r\n\t\t\t\tif($thisChildDist < $bestDist){\r\n\t\t\t\t\t$optimal = $child;\r\n\t\t\t\t\t$bestDist = $thisChildDist;\r\n\t\t\t\t\t$changed = 0;\t\r\n\t\t\t\t\tprint $bestDist . \"\\n\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$changed++;\r\n\t\t\t\t}\r\n\t\t\t\tif($changed > $stop) break 2;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$results = array();\r\n\t\t$results[\"dist\"] = $bestDist;\r\n\t\t$results[\"bacon\"] = $optimal;\r\n\t\t$results[\"n\"] = $matches[1];\r\n\t\t$results[\"m\"] = $matches[2];\r\n\t\t$results[\"num\"] = $matches[3]; \r\n\t\t//for simplicity sake\r\n\t\t$results[\"popCenter\"] = $no_bacon;\r\n\t\treturn $results;\r\n\t}\r\n\t\r\n\tfunction calcDist($bacon, $popCenter){\r\n\t\t$Dist = 0;\r\n\t\tforeach($popCenter as $p){\r\n\t\t\t$pSplit = explode(\",\",$p);\r\n\t\t\tforeach($bacon as $b){\r\n\t\t\t\t$bSplit = explode(\",\",$b);\r\n\t\t\t\t$d = abs($bSplit[0] - $pSplit[0]) + abs($bSplit[1] - $pSplit[1]);\r\n\t\t\t\tif(!isset($best) || $d < $best) $best = $d;  \r\n\t\t\t}\r\n\t\t\t$Dist += $best;\r\n\t\t\tunset($best);\r\n\t\t}\r\n\t\treturn $Dist;\r\n\t}\r\n\t\r\n\tfunction permute($bacon_array, $no_bacon, $n, $m, $mutate){\r\n\t\tshuffle($bacon_array);\r\n\t\tif(!$mutate){\r\n\t\t\t$changerI = range(-2,2);\r\n\t\t\t$changerJ = range(-2,2);\r\n\t\t} else {\r\n\t\t\t$changerI = range(-1 * floor($n / 2), floor($n / 2));\r\n\t\t\t$changerJ = range(-1 * floor($m / 2), floor($m / 2));\r\n\t\t}\r\n\t\t$pickOn = $bacon_array[0];\r\n\t\t$pickOn = explode(\",\", $pickOn);\r\n\t\t$pickOnI = $pickOn[0];\r\n\t\t$pickOnJ = $pickOn[1];\r\n\t\tshuffle($changerI);\r\n\t\tshuffle($changerJ);\r\n\t\t$changed = false;\r\n\t\tforeach($changerI as $i){\r\n\t\t\tforeach($changerJ as $j){\r\n\t\t\t\t$pickedI = check_coord($pickOnI, $i, $n);\r\n\t\t\t\t$pickedJ = check_coord($pickOnJ, $j, $m);\r\n\t\t\t\t$item = $pickedI . \",\" . $pickedJ;\r\n\t\t\t\tif(!in_array($item, $bacon_array) && !in_array($item, $no_bacon)){\r\n\t\t\t\t\t$changed = true;\r\n\t\t\t\t\t//shut up, I can break if I wanna\r\n\t\t\t\t\tbreak 2;\r\n\t\t\t\t}\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tif($changed){\r\n\t\t\t$bacon_array[0] = $item;\r\n\t\t\treturn $bacon_array;\r\n\t\t} else {\r\n\t\t\t//return $this->permute($bacon_array, $no_bacon);\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction check_coord($pickOnI, $i, $n){\r\n\t\t\t\tif(($i + $pickOnI) > -1 && ($i + $pickOnI) < $n){\r\n\t\t\t\t\t$pickedI = ($i + $pickOnI);\r\n\t\t\t\t} else if(($i + $pickOnI) >= $n){\r\n\t\t\t\t\t$pickedI = $n - 1;\t\r\n\t\t\t\t} else if(($i + $pickOnI) <= -1){\r\n\t\t\t\t\t$pickedI = 0;\r\n\t\t\t\t}\t\r\n\t\t\t\treturn $pickedI;\r\n\t}\r\n\t\r\n\r\n\t/*function get_bacon_array($no_bacon, $n, $m, $num){\r\n\t\t$bacon_array = array();\r\n\t\t\r\n\t\t$addI = array(-1,0,1);\r\n\t\t$addJ = array(-1,0,1);\r\n\t\t$k = 0;\r\n\t\t\r\n\t\twhile($k < $num){\r\n\t\t\t$placed = false;\r\n\t\t\tshuffle($no_bacon);\r\n\t\t\t$pop = explode(\",\",$no_bacon[0]);\t\r\n\t\t\tforeach($addI as $i){\r\n\t\t\t\tforeach($addJ as $j){\r\n\t\t\t\t\tif($i != 0 || $j != 0){\r\n\t\t\t\t\t\t$newI = check_coord($pop[0], $i, $n);\r\n\t\t\t\t\t\t$newJ = check_coord($pop[1], $j, $m);\r\n\t\t\t\t\t\t$item = $newI . \",\" . $newJ;\r\n\t\t\t\t\t\tif(!in_array($item, $bacon_array) && !in_array($item, $no_bacon)){\r\n\t\t\t\t\t\t\t$bacon_array[] = $item;\r\n\t\t\t\t\t\t\t$placed = true;\r\n\t\t\t\t\t\t\tbreak 2;\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!$placed){\r\n\t\t\t\t\t$new_coord = $no_bacon[0];\r\n\t\t\t\t\twhile(in_array($new_coord, $no_bacon) || in_array($new_coord, $bacon_array)){\r\n\t\t\t\t\t\t$new_coord = rand_coord($n, $m);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$bacon_array[] = $new_coord;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$k++;\r\n\t\t}\r\n\t\t\r\n\t\treturn $bacon_array;\r\n\t}*/\r\n\t\r\n\tfunction rand_coord($n,$m) {\r\n\t\t//array indexed coordinates, starts at 0\r\n\t    $num1 = rand(0,($n - 1));\r\n\t    $num2 = rand(0,($m - 1));\r\n\t    $new_coord = $num1 . \",\" . $num2;\r\n\t\treturn $new_coord;\r\n\t} \r\n\r\n\t\r\n?> ", "problem": 4}}, {"pk": 19, "model": "challenges.solution", "fields": {"language": 16, "title": "RandomRestartHillClimbing (threaded, optimized)", "author": 29, "submitted": "2010-07-12", "source": "package com.yoden;\r\n\r\nimport java.awt.Point;\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class ProggitQuizBaconChallenge {\r\n\tpublic static final boolean DEBUG = true;\r\n\t\r\n\tpublic static enum BaconBit {\r\n\t\tOPEN,\r\n\t\tCITY,\r\n\t\tBACON;\t//a bacon dispensary\r\n\t\t\r\n\t\tpublic String toString() {\r\n\t\t\tswitch(this) {\r\n\t\t\tcase OPEN:\r\n\t\t\t\treturn \".\";\r\n\t\t\tcase CITY:\r\n\t\t\t\treturn \"P\";\r\n\t\t\tcase BACON:\r\n\t\t\t\treturn \"B\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn OPEN.toString();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static BaconBit toBacon(String s) {\r\n\t\t\tif(BaconBit.OPEN.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.OPEN;\r\n\t\t\t} else if(BaconBit.CITY.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.CITY;\r\n\t\t\t} else if(BaconBit.BACON.toString().equals(s)) {\r\n\t\t\t\treturn BaconBit.BACON;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid board character:\" + s);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static class BaconBoard {\r\n\t\tpublic static class BaconBoardSquare {\r\n\t\t\tBaconBit bit;\r\n\t\t\tfinal int x,y;\t//some duplicated state; for speed\r\n\r\n\t\t\t//BACON - how far is the furthest city using this BACON?\r\n\t\t\tint maxDistToAnyFedCity = -1;\r\n\t\t\t\r\n\t\t\t//CITY - cached last bacon dispensary\r\n\t\t\tBaconBoardSquare bacon = null;\r\n\t\t\t\r\n\t\t\tpublic BaconBoardSquare(int x, int y) {\r\n\t\t\t\tthis.x = x;\r\n\t\t\t\tthis.y = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//these squares are mutable, and their references will not change\r\n\t\tfinal BaconBoardSquare[][] board;\r\n\t\t\r\n\t\t//cache\r\n\t\t//TODO: pro optimization: spatially hash this\r\n\t\tprivate List<BaconBoardSquare> baconSquares = new ArrayList<BaconBoardSquare>();\t\r\n\t\t//cache, do not mutate this one\r\n\t\tprivate List<BaconBoardSquare> citySquares = new ArrayList<BaconBoardSquare>();\t\r\n\t\t\r\n\t\tpublic BaconBoard(String s) {\r\n\t\t\tString[] allLines = s.split(\"\\n\");\r\n\t\t\tString[] lines = new String[allLines.length-1];\r\n\t\t\t//just ignoring the first line of metadata\r\n\t\t\tfor(int i=0; i<lines.length; i++) {\t\r\n\t\t\t\tlines[i] = allLines[i+1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboard = new BaconBoardSquare[lines.length][];\r\n\t\t\t\r\n\t\t\tfor(int j=0, lineLength=-1; j<lines.length; j++) {\r\n\t\t\t\tString ss = lines[j];\r\n\t\t\t\t\r\n\t\t\t\tif(lineLength < 0) {\r\n\t\t\t\t\tlineLength = ss.length();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(ss.length() != lineLength) {\r\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid board\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tboard[j] = new BaconBoardSquare[lineLength];\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<ss.length(); i++) {\r\n\t\t\t\t\tboard[j][i] = new BaconBoardSquare(i, j);\r\n\t\t\t\t\tBaconBit bit = BaconBit.toBacon(ss.substring(i, i+1));\r\n\t\t\t\t\tset(j, i, bit);\r\n\t\t\t\t\tif(BaconBit.CITY.equals(bit)) {\r\n\t\t\t\t\t\tcitySquares.add(board[j][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//a copy constructor, we'll want a copy of the board per thread\r\n\t\tpublic BaconBoard(BaconBoard toCopy) {\r\n\t\t\tboard = new BaconBoardSquare[toCopy.board.length][];\r\n\t\t\tfor(int j=0; j<toCopy.board.length; j++) {\r\n\t\t\t\tboard[j] = new BaconBoardSquare[toCopy.board[j].length];\r\n\t\t\t\tfor(int i=0; i<toCopy.board[j].length; i++) {\r\n\t\t\t\t\tboard[j][i] = new BaconBoardSquare(i, j);\r\n\t\t\t\t\tBaconBit bit = toCopy.get(j, i);\r\n\t\t\t\t\tset(j, i, bit);\r\n\t\t\t\t\tif(BaconBit.CITY.equals(bit)) {\r\n\t\t\t\t\t\tcitySquares.add(board[j][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t \r\n\t\tpublic BaconBit get(int row, int col) {\r\n\t\t\treturn board[row][col].bit;\r\n\t\t}\r\n\t\t\r\n\t\tpublic boolean isBacon(int row, int col) {\r\n\t\t\treturn BaconBit.BACON.equals(board[row][col].bit);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * \tMust call getTotalBaconDistance first to generate cache\r\n\t\t * \r\n\t\t * @param row\r\n\t\t * @param col\r\n\t\t * @return\r\n\t\t */\r\n\t\tpublic boolean isBaconAndUsed(int row, int col) {\r\n\t\t\tBaconBoardSquare square = board[row][col];\r\n\t\t\treturn BaconBit.BACON.equals(square.bit) && square.maxDistToAnyFedCity > 0;\r\n\t\t}\r\n\t\t\r\n\t\tpublic BaconBoard set(int row, int col, BaconBit b) {\r\n\t\t\tBaconBoardSquare square = board[row][col];\r\n\t\t\t\r\n\t\t\t//some debug code\r\n//\t\t\tif(square.equals(BaconBit.CITY)) {\r\n//\t\t\t\tif(!b.equals(BaconBit.CITY)) {\r\n//\t\t\t\t\tSystem.out.println(\"You just killed a city... probably not what you wanted\");\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n\t\t\t\r\n\t\t\tif(BaconBit.BACON.equals(square.bit)) {\r\n\t\t\t\tif(BaconBit.OPEN.equals(b)) {\r\n\t\t\t\t\tif(calcMaxMaxDistanceToAnyFedSquare() > 0) {\r\n\t\t\t\t\t\tadjustCaching(square);\r\n\t\t\t\t\t\tbaconSquares.remove(square);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(BaconBit.OPEN.equals(square.bit)) {\r\n\t\t\t\tif(BaconBit.BACON.equals(b)) {\r\n\t\t\t\t\tbaconSquares.add(square);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsquare.bit = b;\r\n\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDirty the cache of city->bacon references,\r\n\t\t * \tcentered around square\r\n\t\t * \r\n\t\t * @param square\r\n\t\t */\r\n\t\tprivate void adjustCaching(BaconBoardSquare square) {\r\n\t\t\tint delta = calcMaxMaxDistanceToAnyFedSquare();\r\n\t\t\t\r\n\t\t\tint startJ = Math.max(square.y - delta, 0);\r\n\t\t\tint startI = Math.max(square.x - delta, 0);\r\n\t\t\t\r\n\t\t\tint endJ = Math.min(square.y + delta, board.length-1);\r\n\t\t\tint endI = Math.min(square.x + delta, board[0].length-1);\r\n\t\t\t\r\n\t\t\tfor(int j=startJ; j<=endJ; j++) {\r\n\t\t\t\tfor(int i=startI; i<=endI; i++) {\r\n\t\t\t\t\tboard[j][i].bacon = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsquare.maxDistToAnyFedCity = -1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tBy calculating this, we can determine a subset of the\r\n\t\t * \tboard to dirty, so that local movements only cause local recalculation\r\n\t\t * \r\n\t\t * @return\r\n\t\t */\r\n\t\tprivate int calcMaxMaxDistanceToAnyFedSquare() {\r\n\t\t\tint rv = -1;\r\n\t\t\tCollection<BaconBoardSquare> baconSquares = getBaconSquares();\r\n\t\t\tfor(BaconBoardSquare square : baconSquares) {\r\n\t\t\t\trv = Math.max(square.maxDistToAnyFedCity, rv);\r\n\t\t\t}\r\n\t\t\treturn rv + 1;\r\n\t\t}\r\n\t\t\r\n\t\tpublic boolean isOnBoard(int row, int col) {\r\n\t\t\treturn row >= 0 && col >= 0 && row < board.length && col < board[0].length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getRows() {\r\n\t\t\treturn board.length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getCols() {\r\n\t\t\treturn board[0].length;\r\n\t\t}\r\n\t\t\r\n\t\tpublic long getTotalBaconDistance() {\r\n\t\t\tlong rv = 0;\r\n\t\t\t\r\n\t\t\tCollection<BaconBoardSquare> cities = getCitySquares();\r\n\t\t\tCollection<BaconBoardSquare> bacons = getBaconSquares();\r\n\t\t\t\r\n\t\t\tfor(BaconBoardSquare city : cities) {\r\n\t\t\t\tint bestSoFar;\r\n\t\t\t\t\r\n\t\t\t\tif(city.bacon != null) {\r\n\t\t\t\t\tbestSoFar = getCachedBest(city);\r\n\t\t\t\t\t//debug code\r\n//\t\t\t\t\tif(bestSoFar != calcDistance(city, bacons, false)) {\r\n//\t\t\t\t\t\tSystem.out.println(\"boooooched\");\r\n//\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbestSoFar = calcDistance(city, bacons, true);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\trv += bestSoFar;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(rv == 0) {\r\n\t\t\t\tSystem.out.println(\"I don't think you have any bacon...\");\r\n\t\t\t\trv = Long.MAX_VALUE;\r\n\t\t\t}\r\n\t\t\t \r\n\t\t\treturn rv;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tFind the best bacon location for city, and return the manhattan distance\r\n\t\t * \r\n\t\t * @param city\r\n\t\t * @param bacons\r\n\t\t * @param updateCache\r\n\t\t * @return\r\n\t\t */\r\n\t\tprivate int calcDistance(\r\n\t\t\t\tBaconBoardSquare city, \r\n\t\t\t\tCollection<BaconBoardSquare> bacons, \r\n\t\t\t\tboolean updateCache) {\r\n\t\t\t\r\n\t\t\tint bestSoFar;\r\n\t\t\tbestSoFar = Integer.MAX_VALUE;\r\n\t\t\tint bestJ = -1;\r\n\t\t\tint bestI = -1;\r\n\t\t\tfor(BaconBoardSquare bacon : bacons) {\r\n\t\t\t\tint d = manhattanDistance(city.x, city.y, bacon.x, bacon.y);\r\n\t\t\t\tif(d < bestSoFar) {\r\n\t\t\t\t\tbestSoFar = d;\r\n\t\t\t\t\tbestJ = bacon.y;\r\n\t\t\t\t\tbestI = bacon.x;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(updateCache) {\r\n\t\t\t\tint tmp = Math.max(board[bestJ][bestI].maxDistToAnyFedCity, bestSoFar);\r\n\t\t\t\tboard[bestJ][bestI].maxDistToAnyFedCity = tmp;\r\n\t\t\t\tcity.bacon = board[bestJ][bestI];\r\n\t\t\t}\r\n\t\t\treturn bestSoFar;\r\n\t\t}\r\n\r\n\t\tprivate int getCachedBest(BaconBoardSquare city) {\r\n\t\t\tint bestSoFar;\r\n\t\t\tbestSoFar = manhattanDistance(\tcity.x, \r\n\t\t\t\t\t\t\t\t\t\t\tcity.y,\r\n\t\t\t\t\t\t\t\t\t\t\tcity.bacon.x,\r\n\t\t\t\t\t\t\t\t\t\t\tcity.bacon.y);\r\n\t\t\treturn bestSoFar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int getTotalBaconCount() {\r\n\t\t\tint rv = 0;\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.length; j++) {\r\n\t\t\t\tfor(int i=0; i<board[0].length; i++) {\r\n\t\t\t\t\tif(isBacon(j, i)) {\r\n\t\t\t\t\t\trv++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @return\tall the city squares\r\n\t\t * \r\n\t\t * \tA/N: I created this method before it was apparent caching this\r\n\t\t * \tlist would be a win\r\n\t\t */\r\n\t\tprivate Collection<BaconBoardSquare> getCitySquares() {\r\n\t\t\treturn citySquares;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @return\tall the Bacon squares\r\n\t\t * \r\n\t\t * \tA/N: I created this method before it was apparent caching this\r\n\t\t * \tlist would be a win\r\n\t\t */\r\n\t\tprivate Collection<BaconBoardSquare> getBaconSquares() {\r\n\t\t\treturn baconSquares;\r\n\t\t}\r\n\r\n\t\t//also called taxicab distance, I guess...\r\n\t\tprivate int manhattanDistance(int startX, int startY, int endX, int endY) {\r\n\t\t\tint x = Math.abs(startX - endX);\r\n\t\t\tint y = Math.abs(startY - endY);\r\n\t\t\t\r\n\t\t\treturn x + y;\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic String toString() {\r\n\t\t\tString rv = \"\";\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.length; j++) {\r\n\t\t\t\tfor(int i=0; i<board[0].length; i++) {\r\n\t\t\t\t\trv += get(j, i).toString();\r\n\t\t\t\t}\r\n\t\t\t\tif(j < board.length-1) {\r\n\t\t\t\t\trv += \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static interface BaconPlacementSolver {\r\n\t\t/**\r\n\t\t * @param \tboard to be solved\r\n\t\t * @param \tnumBaconDispensaries\r\n\t\t * @return\tsolved board\r\n\t\t */\r\n\t\tpublic BaconBoard solve(BaconBoard board, int numBaconDispensaries);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @author yoden\r\n\t *\r\n\t *\tThis class uses random restart hill climbing to optimize bacon placement\r\n\t *\r\n\t *\tHigh level strategy:\r\n\t *\t\t1) Place bacon randomly\r\n\t *\t\t2) For each bacon:\r\n\t *\t\t\ta) Try moving it a little bit\r\n\t *\t\t\tb) Accept the best move which is a lower score, or stay where we are\r\n\t *\t\t3) If we reduced the score, goto 2), else continue\r\n\t *\t\t4) For each unused bacon:\r\n\t *\t\t\ta) Scan the entire board, and select the best global spot for this bacon\r\n\t *\t\t5) Goto 2) if we reduced the score in 4), else stop\r\n\t */\r\n\tpublic static class RandomRestartHillClimbingSolver implements BaconPlacementSolver {\r\n\t\tfinal public int numRestarts;\r\n\t\tfinal Random[] random;\t//one per thread\r\n\t\tBaconBoard[] solutions;\t//one per thread\r\n\t\tThread[] threads;\r\n\r\n\t\tpublic RandomRestartHillClimbingSolver(int numRestarts) {\r\n\t\t\tthis.numRestarts = numRestarts;\r\n\t\t\t\r\n\t\t\trandom = new Random[numThreads()];\r\n\t\t\tsolutions = new BaconBoard[numThreads()];\r\n\t\t\tthreads = new Thread[numThreads()];\r\n\t\t\tfor(int i=0; i<random.length; i++) {\r\n\t\t\t\trandom[i] = new Random(42 + i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\t//lots of lame threading logic here that would be gone if i had libraries...\r\n\t\t//e.g., this would normally be more like:\r\n\t\t//Util.threadedBlockingMap(numRestarts, new Functor() {\r\n\t\t//\t\tf(int index, int threadIndex) {\r\n\t\t//\t\t\tsolveThread(...)\r\n\t\t//\t\t}\r\n\t\t//};\r\n\t\tpublic BaconBoard solve(final BaconBoard board, final int numBaconDispensaries) {\r\n\t\t\tint numPerThread = (int) Math.ceil((float)numRestarts / numThreads());\r\n\t\t\tint totalStarted = 0;\r\n\t\t\t\r\n\t\t\tfor(int threadIndex=0; threadIndex<numThreads(); threadIndex++) {\r\n\t\t\t\tfinal int fThreadIndex = threadIndex;\r\n\t\t\t\tfinal int fNumPerThread;\r\n\t\t\t\tif(totalStarted + numPerThread < numRestarts) {\r\n\t\t\t\t\tfNumPerThread = numPerThread;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfNumPerThread = (numRestarts - totalStarted);\r\n\t\t\t\t}\r\n\t\t\t\ttotalStarted += fNumPerThread;\r\n\t\t\t\t\r\n\t\t\t\tthreads[fThreadIndex] = new Thread(\"Thread:\"+threadIndex) {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\tBaconBoard threadBoard = new BaconBoard(board);\r\n\t\t\t\t\t\tBaconBoard bestBoardSoFar = solveThread(threadBoard, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumBaconDispensaries, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfNumPerThread, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trandom[fThreadIndex]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsolutions[fThreadIndex] = bestBoardSoFar;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tthreads[fThreadIndex].start();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int t=0; t<threads.length; t++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthreads[t].join();\r\n\t\t\t\t} catch (InterruptedException e) { }\t//impossible..?\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBaconBoard bestBoard = solutions[0];\r\n\t\t\tlong bestScore = solutions[0].getTotalBaconDistance();\r\n\t\t\t\r\n\t\t\tfor(int t=1; t<threads.length; t++) {\r\n\t\t\t\tlong score = solutions[t].getTotalBaconDistance();\r\n\t\t\t\tif(score < bestScore) {\r\n\t\t\t\t\tbestScore = score;\r\n\t\t\t\t\tbestBoard = solutions[t];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bestBoard;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDo random restarts to produce the best solution for board\r\n\t\t * \r\n\t\t * \tThis function is reentrant\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param numBaconDispensaries\r\n\t\t * @param numRounds\r\n\t\t * @param random\r\n\t\t * @return best board solution\r\n\t\t */\r\n\t\tprivate static BaconBoard solveThread(\r\n\t\t\t\tBaconBoard board,\r\n\t\t\t\tint numBaconDispensaries, \r\n\t\t\t\tint numRounds,\r\n\t\t\t\tRandom random) {\r\n\t\t\t\r\n\t\t\tlong bestSoFar = Long.MAX_VALUE;\r\n\t\t\tBaconBoard bestBoardSoFar = null;\r\n\t\t\tlong bestFoundTime = System.nanoTime();\r\n\t\t\t\r\n\t\t\tlong startTime = System.nanoTime();\r\n\t\t\t\r\n\t\t\t//each loop of this for is a random restart\r\n\t\t\tfor(int round=0; round<numRounds; round++) {\r\n\t\t\t\tBaconBoard myBoard = new BaconBoard(board);\r\n\t\t\t\t\r\n\t\t\t\tlong newValue = climbFromRandomStart(myBoard, numBaconDispensaries, random);\r\n\t\t\t\t\r\n\t\t\t\tif(newValue < bestSoFar) {\r\n\t\t\t\t\tbestBoardSoFar = myBoard;\r\n\t\t\t\t\tbestSoFar = newValue;\r\n\t\t\t\t\tbestFoundTime = System.nanoTime();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint printRound = (int)((float)numRounds/20) + 1;\r\n\t\t\t\tif(DEBUG && (round == 0 || round % printRound == 0)) {\r\n\t\t\t\t\tString string = Thread.currentThread().getName() + \"\\t\";\r\n\t\t\t\t\tstring = string + \"At:\" + round + \"/\" + (numRounds-1) + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Current solution:\" + bestSoFar + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Elapsed (ms):\" + (System.nanoTime()-startTime)/1000/1000 + \"\\t\";\r\n\t\t\t\t\tstring = string + \"Best Found (ms):\" + (bestFoundTime-startTime)/1000/1000;\r\n\t\t\t\t\tSystem.out.println(string);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bestBoardSoFar;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tDo one greedy hill climb of board\r\n\t\t * \r\n\t\t * @param board will be modified to the best solution\r\n\t\t * @param numBaconDispensaries\r\n\t\t * @param random\r\n\t\t * @return score of best solution\r\n\t\t */\r\n\t\tprivate static long climbFromRandomStart(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tint numBaconDispensaries, \r\n\t\t\t\tRandom random) {\r\n\t\t\t\r\n\t\t\t//1: place bacon randomly\r\n\t\t\tList<Point> baconLocations = new ArrayList<Point>();\r\n\t\t\tfor(int count=0; count<numBaconDispensaries; count++) {\r\n\t\t\t\tint x,y;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tx = random.nextInt(board.getRows());\r\n\t\t\t\t\ty = random.nextInt(board.getCols());\r\n\t\t\t\t\t\r\n\t\t\t\t} while(!BaconBit.OPEN.equals(board.get(y, x)));\r\n\t\t\t\t\r\n\t\t\t\tboard.set(y, x, BaconBit.BACON);\r\n\t\t\t\t\r\n\t\t\t\tbaconLocations.add(new Point(x,y));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong lastOuterScore;\r\n\t\t\tlong thisOuterScore = board.getTotalBaconDistance();\r\n\t\t\tint lastUnusedBaconCount = baconLocations.size();\r\n\t\t\t\r\n\t\t\tdo {\r\n\t\t\t\tlastOuterScore = thisOuterScore;\r\n\t\t\t\t\r\n\t\t\t\t//2: Greedy Optimize\r\n\t\t\t\tthisOuterScore = greedyOptimizeBacons(board, baconLocations, lastOuterScore);\r\n\t\t\t\t\r\n\t\t\t\t//3: Redistribute unused bacon, \r\n\t\t\t\t//getting to this state is the boo part of greedy optimization...\r\n\t\t\t\tList<Point> unusedBacons = getUnusedBacons(board, baconLocations);\r\n\t\t\t\tif(unusedBacons.size() < lastUnusedBaconCount) {\r\n\t\t\t\t\tlastUnusedBaconCount = unusedBacons.size();\r\n\t\t\t\t\tthisOuterScore = placeUnusedBaconsInGlobalBestSpot(\tboard, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbaconLocations, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunusedBacons,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthisOuterScore);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} while (thisOuterScore < lastOuterScore);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn board.getTotalBaconDistance();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tKeep moving each bacon locally until none can be moved to increase the score\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param baconLocations\r\n\t\t * @param thisOuterScore\r\n\t\t * @return the resulting score, or thisOuterScore if no improvement\r\n\t\t */\r\n\t\tprivate static long greedyOptimizeBacons(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tList<Point> baconLocations,\r\n\t\t\t\tlong thisOuterScore) {\r\n\t\t\t\r\n\t\t\tlong lastGreedyScore;\r\n\t\t\tlong thisGreedyScore = thisOuterScore;\r\n\t\t\tdo {\r\n\t\t\t\tlastGreedyScore = thisGreedyScore;\r\n\t\t\t\tfor(Point p : baconLocations) {\r\n\t\t\t\t\tthisGreedyScore = greedyOptimizeBacon(board, p, lastGreedyScore);\r\n\t\t\t\t}\r\n\t\t\t} while(thisGreedyScore < lastGreedyScore);\r\n\t\t\t\r\n\t\t\treturn thisGreedyScore;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tMove the bacon at p, stepping by the elements in the moves[]\r\n\t\t * \r\n\t\t * \tStop when p can't be moved locally to increase the score\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param p\r\n\t\t * @param thisOuterScore\r\n\t\t * @return the resulting score, or thisOuterScore if no improvement\r\n\t\t */\r\n\t\tprivate static long greedyOptimizeBacon(BaconBoard board, Point p, long thisOuterScore) {\r\n\t\t\tlong lastScore;\r\n\t\t\tlong thisScore = thisOuterScore;\r\n\t\t\t\r\n\t\t\tdo {\r\n//\t\t\t\tSystem.out.println(board.toString());\r\n//\t\t\t\tSystem.out.println();\r\n//\t\t\t\tSystem.out.println(thisScore + \"\\t\" + p);\r\n//\t\t\t\tSystem.out.println();\r\n\t\t\t\t\r\n\t\t\t\tlastScore = thisScore;\r\n\t\t\t\t\r\n\t\t\t\tboard.set(p.y, p.x, BaconBit.OPEN);\r\n\t\t\t\t\r\n\t\t\t\tlong[] scores = new long[moves.length];\r\n\t\t\t\tlong bestMoveScore = lastScore;\r\n\t\t\t\tint bestJ = p.y;\r\n\t\t\t\tint bestI = p.x;\r\n\t\t\t\t\r\n\t\t\t\tmoveFor: for(int m=0; m<scores.length; m++) {\r\n\t\t\t\t\tint tryJ = p.y + moves[m].y;\r\n\t\t\t\t\tint tryI = p.x + moves[m].x;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(board.isOnBoard(tryJ, tryI)) {\r\n\t\t\t\t\t\twhile(!BaconBit.OPEN.equals(board.get(tryJ, tryI))) {\r\n\t\t\t\t\t\t\t//some fancy logic here, this allows us to make a local step\r\n\t\t\t\t\t\t\t//*over* something(s)... not sure how much help it is though\r\n\t\t\t\t\t\t\ttryJ += moves[m].y;\r\n\t\t\t\t\t\t\ttryI += moves[m].x;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!board.isOnBoard(tryJ, tryI)) {\r\n\t\t\t\t\t\t\t\tcontinue moveFor;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tboard.set(tryJ, tryI, BaconBit.BACON);\r\n\t\t\t\t\t\tscores[m] = board.getTotalBaconDistance();\r\n\t\t\t\t\t\tboard.set(tryJ, tryI, BaconBit.OPEN);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(scores[m] < bestMoveScore) {\r\n\t\t\t\t\t\t\tbestMoveScore = scores[m];\r\n\t\t\t\t\t\t\tbestJ = tryJ;\r\n\t\t\t\t\t\t\tbestI = tryI;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(bestMoveScore < lastScore) {\r\n\t\t\t\t\tp.y = bestJ;\r\n\t\t\t\t\tp.x = bestI;\r\n\t\t\t\t\tthisScore = bestMoveScore;\r\n\t\t\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t} while(thisScore < lastScore);\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\t//this could be done much smarter; wanna see how fast it is for now\r\n\t\t/**\r\n\t\t * \tGo through each bacon in unusedBacons, and place them in the globally optimal spot\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param baconLocations\r\n\t\t * @param unusedBacons\r\n\t\t * @param startScore\r\n\t\t * @return the updated score if better, else startScore\r\n\t\t */\r\n\t\tprivate static long placeUnusedBaconsInGlobalBestSpot(\r\n\t\t\t\tBaconBoard board, \r\n\t\t\t\tList<Point> baconLocations,\r\n\t\t\t\tList<Point> unusedBacons,\r\n\t\t\t\tlong startScore) {\r\n\t\t\t\r\n\t\t\tlong thisScore = startScore;\r\n\t\t\t\r\n\t\t\tfor(Point p : unusedBacons) {\r\n\t\t\t\tthisScore = placeUnusedBacon(board, p, startScore);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * \tMove the bacon at p to the globally optimal spot\r\n\t\t * \r\n\t\t * @param board\r\n\t\t * @param p\r\n\t\t * @param startScore\r\n\t\t * @return the resulting score if better, else startScore\r\n\t\t */\r\n\t\tprivate static long placeUnusedBacon(BaconBoard board, Point p, long startScore) {\r\n\t\t\tlong thisScore = startScore;\r\n\t\t\t\r\n\t\t\tboard.set(p.y, p.x, BaconBit.OPEN);\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<board.getRows(); j++) {\r\n\t\t\t\tfor(int i=0; i<board.getCols(); i++) {\r\n\t\t\t\t\tif(BaconBit.OPEN.equals(board.get(j, i))) {\r\n\t\t\t\t\t\tboard.set(j, i, BaconBit.BACON);\r\n\t\t\t\t\t\tlong test = board.getTotalBaconDistance();\r\n\t\t\t\t\t\tboard.set(j, i, BaconBit.OPEN);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(test < thisScore) {\r\n\t\t\t\t\t\t\tthisScore = test;\r\n\t\t\t\t\t\t\tp.y = j;\r\n\t\t\t\t\t\t\tp.x = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboard.set(p.y, p.x, BaconBit.BACON);\r\n\t\t\t//isn't needed, since it's only purpose would be to recache things\r\n\t\t\t//thisScore = board.getTotalBaconDistance();\r\n\t\t\t\r\n\t\t\treturn thisScore;\r\n\t\t}\r\n\r\n\t\tprivate static List<Point> getUnusedBacons(BaconBoard board, List<Point> baconLocations) {\r\n\t\t\tList<Point> rv = new ArrayList<Point>();\r\n\t\t\t\r\n\t\t\tfor(Point p : baconLocations) {\r\n\t\t\t\tif(!board.isBaconAndUsed(p.y, p.x)) {\r\n\t\t\t\t\trv.add(p);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static Point[] moves = new Point[] {\r\n\t\tnew Point(-1,-1),\r\n\t\tnew Point(0,-1),\r\n\t\tnew Point(1,-1),\r\n\t\t\r\n\t\tnew Point(-1,0),\r\n\t\tnew Point(1,0),\r\n\t\t\r\n\t\tnew Point(-1,1),\r\n\t\tnew Point(0,1),\r\n\t\tnew Point(1,1),\r\n\t};\r\n\t\r\n\tpublic static int numThreads() {\r\n\t\t//I think we want HyperThreading, because the thread local state is kind of small?\r\n\t\t//maybe not when the boards are huge...\r\n\t\treturn Runtime.getRuntime().availableProcessors();\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tString filename = \"\";\r\n\t\tint numRestarts = 0;\r\n\t\ttry {\r\n\t\t\tfilename = args[0];\r\n\t\t\tnumRestarts = Integer.valueOf(args[1]);\r\n\t\t} catch(Throwable t) {\r\n\t\t\tSystem.out.println(\"Usage: java ProggitQuizBaconChallenge FILENAME NUMBEROFRESTARTS\");\r\n\t\t\tSystem.exit(1);\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(filename));\r\n\t\t\tString boardString = \"\";\r\n\t\t\tString line = \"\";\r\n\t\t\t\r\n\t\t\twhile(line != null) {\r\n\t\t\t\tif(!\"\".equals(line)) {\r\n\t\t\t\t\tboardString += line + \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString line0 = boardString.split(\"\\n\")[0];\r\n\t\t\tline0 = boardString.split(\"\\n\")[0];\r\n\t\t\tString[] pieces = line0.split(\" \");\r\n\t\t\tint numBaconDispensaries = Integer.valueOf(pieces[pieces.length-1]);\r\n\t\t\t\r\n\t\t\tBaconBoard board = new BaconBoard(boardString);\r\n\t\t\t\r\n\t\t\tRandomRestartHillClimbingSolver solver;\r\n\t\t\tsolver = new RandomRestartHillClimbingSolver(numRestarts);\r\n\t\t\tBaconBoard solution = solver.solve(board, numBaconDispensaries);\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.println(\"Distance:\" + solution.getTotalBaconDistance());\r\n\t\t\tSystem.out.println();\r\n\t\t\tSystem.out.println(\"Bacon at (row,col):\");\r\n\t\t\t\r\n\t\t\tfor(int j=0; j<solution.getRows(); j++) {\r\n\t\t\t\tfor(int i=0; i<solution.getCols(); i++) {\r\n\t\t\t\t\tif(solution.isBacon(j, i)) {\r\n\t\t\t\t\t\tSystem.out.println(j + \"\\t\" + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(DEBUG) {\r\n\t\t\t\tSystem.out.println(solution.toString());\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t}\r\n}\r\n", "problem": 4}}, {"pk": 20, "model": "challenges.solution", "fields": {"language": 4, "title": "Not bad for a 15 year old", "author": 38, "submitted": "2010-07-12", "source": "/* Bacon Dispenser Placer by |ee\r\n * Usage:\r\n * \tbdp <dimension squared (8x8=64, etc)> <Bacon Dispensers> <map file> <range>\r\n *\r\n * it's pretty bad mathematically speaking, but when tuned right, it can have great outcomes!\r\n * \r\n * if the total number of bacon dispensers does not comply with what was given, tune the range to fix it,\r\n * if it isnt possible to get all bacon dispensers, then that means it's impossible to have optimal positions.\r\n */\r\n\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\tFILE *file=fopen(argv[3],\"r\");\t\r\n\tif(file==NULL)\r\n\t\treturn 0;\r\n\r\n\tint nP=0, w=0, x=1, y=1, diffX=0, diffY=0;\r\n\tint group=0;\r\n\r\n\tshort int  ppos[32][2];\r\n\tunsigned int tsize=atoi(argv[1]);\r\n\tunsigned char buff[tsize];\r\n\t\tfread(buff,1,tsize-1,file);\r\n\r\n\tunsigned int nBaconDispensers=atoi(argv[2]);\r\n\tint RANGE=atoi(argv[4]);\r\n\r\n\t/* gets the P(populations) coordinates in the tile */\r\n\tfor(w=0;w<tsize;w+=1){\r\n\t\tif(buff[w]=='P'){\r\n\t\t\tppos[nP][0] = x;\r\n\t\t\tppos[nP][1] = y;\r\n//\t\t\tprintf(\"x:%d\\ty:%d\\n\",x,y);\r\n\r\n\t\t\tnP += 1;\r\n\t\t}\r\n\r\n\t\tx+=1;\r\n\r\n\t\tif(buff[w]=='\\n'){\r\n\t\t\tx=1;\r\n\t\t\ty+=1;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tshort int bdpos[atoi(argv[2])][2];\r\n\tprintf(\"Number of populations:%d\\n\",nP);\r\n\tprintf(\"---------------------\\n\");\r\n\r\n\t/* Compare coordinates of children in groups */\r\n\tx=0;\r\n\tfor(x=0;x<nP-1;x+=1){\r\n\t\tdiffX=ppos[x+1][0] - ppos[x][0];\r\n\t\tdiffY=ppos[x+1][1] - ppos[x][1];\r\n\t\t\r\n//\t\tprintf(\"diffX:%d diffY:%d\\n\",diffX,diffY);\r\n\t\t\r\n\t\tif(diffX > (-1*RANGE) && diffX < RANGE){\r\n\t\t\tif(diffY > -1 && diffY < RANGE){\r\n\t\t\t\t/* Determine where to put bacon dispenser */\r\n\t\t\t\tif(diffY > 0 && diffY < 2 && diffX > 0){\r\n\t\t\t\t\tbdpos[group][0] = (diffX/4)+ppos[x][0];\r\n\t\t\t\t\tbdpos[group][1] = 0+ppos[x][1];\r\n\t\t\t\t}\r\n\t\t\t\telse if(diffX < 0){\r\n\t\t\t\t\tbdpos[group][0] = (diffX/2)+ppos[x][0];\r\n\t\t\t\t\tbdpos[group][1] = 0+ppos[x][1];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tbdpos[group][0] = ppos[x][0];\r\n\t\t\t\t\tbdpos[group][1] = ppos[x][1]+1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprintf(\"bdX:%d\\tbdY:%d\\n\",bdpos[group][0],bdpos[group][1]);\r\n\t\t\t\tgroup+=1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tprintf(\"Total Bacon Dispensers: %d\\n\",group);\t\r\n\r\n\treturn 0;\r\n}", "problem": 4}}, {"pk": 23, "model": "challenges.solution", "fields": {"language": 25, "title": "idevelop's solution v5", "author": 23, "submitted": "2010-07-13", "source": "<?php\r\n\t/*\r\n\t\tWritten by Andrei Gheorghe - idevelop.ro\r\n\t\tResults:\r\n\t\t* ryan-01: 129 (1 second)\r\n\t\t* ryan-02: 395 (4 seconds)\r\n\t\t* ryan-03: 1506 (3 minutes)\r\n\t*/\r\n\r\n\t$distances=array();\r\n\t\t\r\n\tfunction d($x1, $y1, $x2, $y2) {\r\n\t\treturn abs($x2-$x1)+abs($y2-$y1);\r\n\t}\r\n\t\r\n\tfunction qpush(&$queue, $value) {\r\n\t\tarray_push($queue, $value);\r\n\t}\r\n\t\r\n\tfunction qpop(&$queue) {\r\n\t\tif (count($queue)>0) return array_shift($queue); else return false;\r\n\t}\r\n\t\r\n\tfunction qprint(&$queue) {\r\n\t\techo \"\\n\".implode(\", \", $queue).\"\\n\";\r\n\t}\r\n\t\r\n\tfunction in_rectangle($p, $r) {\r\n\t\treturn ($p[0]>=$r[0][0]) and ($p[0]<=$r[1][0]) and ($p[1]>=$r[0][1]) and ($p[1]<=$r[1][1]);\r\n\t}\r\n\t\r\n\tfunction joined_rectangles_area($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\t\tglobal $distances;\r\n\t\t\r\n\t\t$width1=$rectangles[$r1][1][0]-$rectangles[$r1][0][0]+1;\r\n\t\t$height1=$rectangles[$r1][1][1]-$rectangles[$r1][0][1]+1;\r\n\t\t\r\n\t\t$width2=$rectangles[$r2][1][0]-$rectangles[$r2][0][0]+1;\r\n\t\t$height2=$rectangles[$r2][1][1]-$rectangles[$r2][0][1]+1;\r\n\t\t\r\n\t\t//echo \"width1 = $width1, height1 = $height1, width2 = $width2, height2 = $height2\\n\";\r\n\t\t\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\r\n\t\t//echo \"x1 = $x1, y1 = $y1, x2 = $x2, y2 = $y2\\n\";\r\n\r\n\t\t$space1=max(0, ($y2-$y1+1)-($height1+$height2));\r\n\t\t$space2=max(0, ($x2-$x1+1)-($width1+$width2));\r\n\t\t\t\t\r\n\t\treturn $space1+$space2+((abs($x1-$x2)+1)+(abs($y1-$y2)+1));\r\n\t}\r\n\t\r\n\tfunction rectangle_area($r) {\r\n\t\treturn (abs($r[0][0]-$r[1][0])+1)*(abs($r[0][1]-$r[1][1])+1);\r\n\t}\r\n\t\r\n\tfunction join_rectangles($r1, $r2) {\r\n\t\tglobal $rectangles;\r\n\r\n\t\t$x1=min($rectangles[$r1][0][0], $rectangles[$r2][0][0]);\r\n\t\t$y1=min($rectangles[$r1][0][1], $rectangles[$r2][0][1]);\r\n\t\t$x2=max($rectangles[$r1][1][0], $rectangles[$r2][1][0]);\r\n\t\t$y2=max($rectangles[$r1][1][1], $rectangles[$r2][1][1]);\r\n\r\n\t\t$result=array(\r\n\t\t\tarray($x1, $y1),\r\n\t\t\tarray($x2, $y2),\r\n\t\t\tarray_merge($rectangles[$r1][2], $rectangles[$r2][2])\r\n\t\t);\r\n\t\t\r\n\t\t//echo \"join $r1 + $r2 => result: \".print_r($result, 1);\r\n\t\t\r\n\t\t$rectangles[$r1]=$result;\r\n\t\tunset($rectangles[$r2]);\t\r\n\t}\r\n\t\r\n\tfunction eval_solution(&$m) {\r\n\t\tglobal $points;\r\n\t\t$bacons=array();\r\n\t\t\r\n\t\tforeach ($m as $x => $list) \r\n\t\t\tforeach ($list as $y => $zzz)\r\n\t\t\t\t$bacons[]=array($x, $y);\r\n\r\n\t\t$total=0;\r\n\t\t\r\n\t\tforeach ($points as $point) {\r\n\t\t\t$min=10000000;\r\n\t\t\tforeach ($bacons as $bacon) {\r\n\t\t\t\tif (d($point[0], $point[1], $bacon[0], $bacon[1])<$min) {\r\n\t\t\t\t\t$min=d($point[0], $point[1], $bacon[0], $bacon[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$total+=$min;\r\n\t\t}\r\n\t\t\r\n\t\treturn $total;\r\n\t}\r\n\t\r\n\tfunction hash_solution(&$m) {\r\n\t\treturn md5(print_r($m, 1));\t\r\n\t}\r\n\r\n\tif($argc < 2){\r\n\t\tprint \"\\nUsage: php.exe idevelop.php <file> \\n\";\r\n\t\texit;\r\n\t}\r\n\tset_time_limit(3000);\r\n\t$fname = $argv[1];\r\n\t\r\n\t//$fname=\"large-01\";\r\n\r\n\t$data=explode(\"\\n\",file_get_contents($fname));\r\n\t$l=explode(\" \", $data[0]);\r\n\t\r\n\t$bacons=intval($l[1]);\r\n\t$size=explode(\"x\", $l[0]);\r\n\t$height=intval($size[0]);\r\n\t$width=intval($size[1]);\r\n\t\r\n\t$points=array();\r\n\t\r\n\t\r\n\tfor ($i=1; $i<=$height; $i++) {\r\n\t\tfor ($j=0; $j<$width; $j++) {\r\n\t\t\tif ($data[$i][$j]==\"P\") $points[]=array($i, $j+1);\r\n\t\t\r\n\t\t\t$matrix[$i][$j+1]=$data[$i][$j];\r\n\t\t}\r\n\t}\r\n\t\r\n\t$rectangles=array();\r\n\tforeach ($points as $pid => $p) $rectangles[]=array(\r\n\t\tarray($p[0], $p[1]), \r\n\t\tarray($p[0], $p[1]),\r\n\t\tarray($pid => $p)\r\n\t);\r\n\t\r\n\tfor ($k=1; $k<=count($points)-$bacons; $k++) {\r\n\t\t$min=100000000000;\r\n\t\t\r\n\t\tforeach ($rectangles as $r1 => $r1coords) {\r\n\t\t\tforeach ($rectangles as $r2 => $r2coords) {\r\n\t\t\t\tif ($r1<>$r2) {\r\n\t\t\t\t\t$joined_area=joined_rectangles_area($r1, $r2);\r\n\t\t\t\t\tif ($joined_area<$min) {\r\n\t\t\t\t\t\t$min=$joined_area;\r\n\t\t\t\t\t\t$minr1=$r1;\r\n\t\t\t\t\t\t$minr2=$r2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tjoin_rectangles($minr1, $minr2);\r\n\t}\r\n\t\r\n\t$total_distance=0;\r\n\t\r\n\tforeach ($rectangles as $r) {\r\n\t\t//echo \"R: (\".$r[0][0].\",\".$r[0][1].\") -> (\".$r[1][0].\",\".$r[1][1].\") => \";\r\n\t\t$area=rectangle_area($r);\r\n\t\tif ($area==count($r[2])) {\r\n\t\t\t// special case, no empty spaces, bacon goes outside the box\r\n\t\t\t\r\n\t\t\t$queue=array();\r\n\t\t\t\r\n\t\t\tforeach ($r[2] as $xy) {\r\n\t\t\t\tqpush($queue, $xy);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (($xy = qpop($queue))!==false) {\r\n\t\t\t\tif ($matrix[$xy[0]][$xy[1]]==\".\") {\r\n\t\t\t\t\t$minx=$xy[0];\r\n\t\t\t\t\t$miny=$xy[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\t$min = 0;\r\n\t\t\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t\t\t$min+=d($minx, $miny, $p[0], $p[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (($xy[0]>1) and ($matrix[$xy[0]-1][$xy[1]]=='.')) qpush($queue, array($xy[0]-1, $xy[1]));\r\n\t\t\t\tif (($xy[0]<$height) and ($matrix[$xy[0]+1][$xy[1]]=='.')) qpush($queue, array($xy[0]+1, $xy[1]));\r\n\t\t\t\tif (($xy[1]>1) and ($matrix[$xy[0]][$xy[1]-1]=='.')) qpush($queue, array($xy[0], $xy[1]-1));\r\n\t\t\t\tif (($xy[1]<$width) and ($matrix[$xy[0]][$xy[1]+1]=='.')) qpush($queue, array($xy[0], $xy[1]+1));\t\t\t\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t$submatrix=array();\r\n\t\t\tforeach ($r[2] as $p) {\r\n\t\t\t\t$submatrix[$p[0]][$p[1]]=\"*\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (!isset($submatrix[$x][$y])) {\r\n\t\t\t\tforeach ($r[2] as $p) $submatrix[$x][$y]+=d($p[0], $p[1], $x, $y);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//print_r($submatrix);\r\n\t\t\t\r\n\t\t\t$min=1000000000;\r\n\t\t\tfor ($x=$r[0][0]; $x<=$r[1][0]; $x++)\r\n\t\t\tfor ($y=$r[0][1]; $y<=$r[1][1]; $y++)\r\n\t\t\tif (($submatrix[$x][$y]!=\"*\") and ($min>$submatrix[$x][$y])) {\r\n\t\t\t\t$min=$submatrix[$x][$y];\r\n\t\t\t\t$minx=$x;\r\n\t\t\t\t$miny=$y;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\t\r\n\t\t//echo $minx.\",\".$miny.\"\\n\";\r\n\t\t$matrix[$minx][$miny]=\"D\";\r\n\t\t$dispensers[]=array($minx, $miny, $min);\t\t\t\r\n\t\t\r\n\t\t$total_distance+=$min;\r\n\t}\r\n\t\r\n\techo \"Total cost: $total_distance\\n\";\r\n\tforeach ($dispensers as $d) echo $d[0].\" \".$d[1].\"\\n\";\r\n?>", "problem": 4}}, {"pk": 27, "model": "challenges.solution", "fields": {"language": 34, "title": "NP-Stupid", "author": 36, "submitted": "2010-07-14", "source": "/*\r\n\tWARNING: reading this source code WILL cause you to lose I.Q. points. This \r\n\tsource file is the result of extreme apathy combined with me using a \r\n\tlanguage I am not familiar with. The algorithim is as follows:\r\n\t1. Generate a bunch of random cities with randomly allocated bacons.\r\n\t2. Pick the best city.\r\n\t3. ???\r\n\t4. Profit.\r\n\t\r\n\tThe amount of time the program runs depends on the input file size. For\r\n\tgrids with <= 25 locations, the runtime is 5 seconds. For grids with\r\n\t<= 100 locations, runtime is 30 seconds, and for all other grids runtime\r\n\tis 2 minutes. \r\n\tObviously for large inputs the global best solution is rarely found, but\r\n\tfor smaller puzzles this craptastic algorithm actually does okay. \r\n\t\r\n\t\r\n\tTo compile:\r\n\tvalac -o prob3 --pkg gio-2.0 --pkg gee-1.0  main.vala\r\n\r\n\tNOTICE: you will need packages gio-2.0 and gee-1.0 installed on your \r\n\tsystem for this to work. I use Ubuntu, and those packages are easily \r\n\tavailable from the repos. Your experience may vary as your distro's \r\n\tpackage managers vary. \r\n\t\r\n\tTo run:\r\n\t./prob3 inputfile\r\n\t\r\n\tAuthor: Seth Hoenig\r\n\t\t\tseth.a.hoenig@gmail.com\r\n\t\t\t\r\n*/\r\n\r\nusing Gee;\r\n\r\nint main(string[] abc)\r\n{\r\n\tif(abc.length != 2)\r\n\t{\r\n\t\tstdout.printf(\"Error. Problem exists between computer and \" +\r\n\t\t\t\"chair. Try  \\\"prob3 [inputfilename]\\\"\\n\");\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tstring inFileS = abc[1];\r\n\t//stdout.printf(\"Reading from: \" + inFileS + \"\\n\");\r\n\tBaconCity original = GraphReader.GenerateGraph(inFileS);\r\n\t//stdout.printf(\"G: \\n\" + original.to_string() + \"\\n\");\r\n\tBaconCity best = Baconator.GenerateBest(original);\r\n\t\r\n\t//stdout.printf(\"Best:\\n\" + best.to_string() + \"\\n\");\r\n\t//stdout.printf(\"total dist: \" + (best.dist_sum()).to_string() + \"\\n\");\r\n\tstdout.printf(\"Distance: \" + (best.dist_sum()).to_string() + \"\\n\");\r\n\tstdout.printf(\"Bacons: \" + (best.show_bacons()) + \"\\n\");\r\n\t\r\n\treturn 0;\r\n}\r\n\r\nclass Baconator\r\n{\r\n\t// try a bunch of random maps for about 60 seconds, report the best one\r\n\tpublic static BaconCity GenerateBest(BaconCity orig)\r\n\t{\r\n\t\tBaconCity bestCity = null;\r\n\t\tint bestDist = 9999999;\r\n\t\tuint64 num_iters = 0;\r\n\t\tTimer t = new Timer();\r\n\t\tt.start();\r\n\t\tint ttc = time_to_calculate(orig);\r\n\t\twhile(t.elapsed() < ttc)\r\n\t\t{\r\n\t\t\tvar curCity = generateRandomCity(orig);\r\n\t\t\tvar curDist = curCity.dist_sum();\r\n\t\t\tnum_iters++;\r\n\t\t\tif(curDist < bestDist)\r\n\t\t\t{\r\n\t\t\t\tbestDist = curDist;\r\n\t\t\t\tbestCity = curCity;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//stdout.printf(\"iters: \" + num_iters.to_string() + \"\\n\");\r\n\t\treturn bestCity;\r\n\t}\r\n\t\r\n\tprivate static int time_to_calculate(BaconCity bc)\r\n\t{\r\n\t\tint numGrids = bc.num_rows() * bc.num_cols();\r\n\t\tif(numGrids < 26)\r\n\t\t\treturn 5; // seconds\r\n\t\telse if(numGrids < 101)\r\n\t\t\treturn 30;\r\n\t\telse\r\n\t\t\treturn 120; // 2 minutes\r\n\t}\r\n\t\r\n\tprivate static BaconCity generateRandomCity(BaconCity orig)\r\n\t{\r\n\t\tBaconCity nCity = orig.clone();\r\n\t\tint numPlacedBacons = 0;\r\n\t\twhile(numPlacedBacons < nCity.num_bacons())\r\n\t\t{\r\n\t\t\t// randomly place a bacon dispensor \r\n\t\t\tint r = Random.int_range(0, nCity.num_rows());\r\n\t\t\tint c = Random.int_range(0, nCity.num_cols());\r\n\t\t\tvar p = new Point(r, c);\r\n\t\t\tif(nCity.place_bacon(p))\r\n\t\t\t\tnumPlacedBacons++;\r\n\t\t}\r\n\t\treturn nCity;\r\n\t}\r\n}\r\n\r\nclass GraphReader\r\n{\r\n\tpublic static BaconCity? GenerateGraph(string input_file)\r\n\t{\r\n\t\tvar inFile = File.new_for_path(input_file);\r\n\t\ttry\r\n\t\t{\r\n\t\t\tBaconCity ret;\r\n\t\t\tvar in_stream = new DataInputStream(inFile.read(null));\r\n\t\t\tstring line = in_stream.read_line(null, null); // header info\r\n\t\t\tstring build = \"\";\r\n\t\t\tint i = 0;\r\n\t\t\tstring a = line.substring(i,1);\r\n\t\t\t//stdout.printf(\"a: \" + a);\r\n\t\t\twhile(!( a==\"x\"))\r\n\t\t\t{\r\n\t\t\t\t//stdout.printf(\"a: \" + a + \"\\n\");\r\n\t\t\t\tbuild += a;\r\n\t\t\t\ti++;\r\n\t\t\t\ta = line.substring(i,1);\r\n\t\t\t}\r\n\t\t\tint r = build.to_int();\r\n\t\t\t//stdout.printf(\"r: \" + r.to_string() + \"\\n\");\r\n\t\t\t//i++; // move past x, onto cols\r\n\t\t\tbuild = \"\";\r\n\t\t\ti++;\r\n\t\t\ta = line.substring(i,1);\r\n\t\t\twhile(!( a==\" \"))\r\n\t\t\t{\r\n\t\t\t\t//stdout.printf(\"a: \" + a + \"\\n\");\r\n\t\t\t\tbuild += a;\r\n\t\t\t\ti++;\r\n\t\t\t\ta = line.substring(i,1);\r\n\t\t\t}\r\n\t\t\t//stdout.printf(\"build: \" + build + \"\\n\");\r\n\t\t\tint c = build.to_int();\r\n\t\t\t//stdout.printf(\"c: \" + c.to_string() + \"\\n\");\r\n\t\t\ti++;\r\n\t\t\ta = line.substring(i);\r\n\t\t\tint b = a.to_int();\r\n\t\t\t//stdout.printf(\"b: \" + b.to_string() + \"\\n\");\r\n\r\n\t\t\tchar[,] info = new char[r,c];\r\n\t\t\t\r\n\t\t\tfor(int ccol=0; ccol<c; ccol++)\r\n\t\t\t{\r\n\t\t\t\tline = in_stream.read_line(null, null);\r\n\t\t\t\tfor(int rrow=0; rrow<r; rrow++)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring p = line.substring(rrow, 1);\r\n\t\t\t\t\tif(p == \".\")\r\n\t\t\t\t\t\tinfo[rrow,ccol] = '.';\r\n\t\t\t\t\telse if(p == \"P\")\r\n\t\t\t\t\t\tinfo[rrow,ccol] = 'P';\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tstdout.printf(\"what the??\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tret = new BaconCity(info, b);\r\n\t\t\treturn ret;\r\n\t\t}catch(Error e)\r\n\t\t{\r\n\t\t\tstdout.printf(\"Error Reading File\\n\");\r\n\t\t}\r\n\t\tassert(false);\r\n\t\treturn null;\r\n\t}\r\n\t\r\n}\r\n\r\nclass Point\r\n{\r\n\tpublic Point(int a, int b)\r\n\t{ r=a; c=b; }\r\n\t\r\n\tpublic int r\r\n\t{ get; set; }\r\n\t\r\n\tpublic int c\r\n\t{ get; set; }\r\n\t\r\n\tpublic string to_string()\r\n\t{\r\n\t\tstring build = \"(\";\r\n\t\tbuild += r.to_string();\r\n\t\tbuild += \",\";\r\n\t\tbuild += c.to_string();\r\n\t\tbuild += \")\";\r\n\t\treturn build;\r\n\t}\r\n}\r\n\r\nclass BaconCity\r\n{\r\n\tprivate int _rows;\r\n\tprivate int _cols;\r\n\tprivate int _bacons;\r\n\tprivate char[,] _data;\r\n\t\r\n\tpublic BaconCity(char[,] d, int b)\r\n\t{\r\n\t\t_rows = d.length[0];\r\n\t\t_cols = d.length[1];\r\n\t\t_bacons = b;\r\n\t\t_data = d;\r\n\t}\r\n\t\r\n\tpublic BaconCity clone()\r\n\t{\r\n\t\tvar d2 = new char[_rows, _cols];\r\n\t\tfor(int r=0; r<_rows; r++)\r\n\t\t\tfor(int c=0; c<_cols; c++)\r\n\t\t\t\td2[r,c] = _data[r,c];\r\n\t\tBaconCity ret = new BaconCity(d2, _bacons);\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\t/* \r\n\t\tfor each pop. center, find the nearest bacon disp. \r\n\t\tcalc the dist to the nearest bacon, add that to total dist. \r\n\t*/\r\n\tpublic int dist_sum()\r\n\t{\r\n\t\tint total_dist = 0;\r\n\t\tvar popcs = getPopCenters();\r\n\t\tvar bacons = getBacons();\r\n\t\tforeach(Point p in popcs)\r\n\t\t{\r\n\t\t\tint local_min = 99999;\r\n\t\t\tforeach(Point b in bacons)\r\n\t\t\t{\r\n\t\t\t\tint dist = manhattan_dist(p, b);\r\n\t\t\t\tif(dist < local_min)\r\n\t\t\t\t\tlocal_min = dist;\r\n\t\t\t}\r\n\t\t\ttotal_dist += local_min;\r\n\t\t}\r\n\t\t\r\n\t\treturn total_dist;\r\n\t}\r\n\t\r\n\tpublic string show_bacons()\r\n\t{\r\n\t\tstring build = \"{ \";\r\n\t\tforeach(Point p in getBacons())\r\n\t\t{\r\n\t\t\tbuild += p.to_string();\r\n\t\t\tbuild += \"  \";\r\n\t\t}\r\n\t\tbuild += \"}\";\r\n\t\treturn build;\r\n\t}\r\n\t\r\n\tprivate ArrayList<Point> getPopCenters()\r\n\t{\r\n\t\tvar pop_centers = new ArrayList<Point>();\r\n\t\tfor(int r=0; r<_rows; r++)\r\n\t\t\tfor(int c=0; c<_cols; c++)\r\n\t\t\t\tif(_data[r,c] == 'P')\r\n\t\t\t\t\tpop_centers.add(new Point(r,c));\r\n\t\treturn pop_centers;\r\n\t}\r\n\t\r\n\tprivate ArrayList<Point> getBacons()\r\n\t{\r\n\t\tvar bacon_disps = new ArrayList<Point>();\r\n\t\tfor(int r=0; r<_rows; r++)\r\n\t\t\tfor(int c=0; c<_cols; c++)\r\n\t\t\t\tif(_data[r,c] == 'B')\r\n\t\t\t\t\tbacon_disps.add(new Point(r,c));\r\n\t\treturn bacon_disps;\r\n\t}\r\n\t\r\n\tpublic bool isEmpty(Point p)\r\n\t{\r\n\t\treturn _data[p.r, p.c] == '.';\r\n\t}\r\n\t\r\n\tpublic bool place_bacon(Point p)\r\n\t{\r\n\t\tif(!this.isEmpty(p))\r\n\t\t\treturn false;\r\n\t\t\t\r\n\t\t_data[p.r, p.c] = 'B';\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tprivate int manhattan_dist(Point a, Point b)\r\n\t{\r\n\t\tint xcomp = (a.r - b.r).abs();\r\n\t\tint ycomp = (a.c - b.c).abs();\r\n\t\treturn xcomp + ycomp;\r\n\t}\t\r\n\t\r\n\tpublic string to_string()\r\n\t{\r\n\t\tstring build = \"\";\r\n\t\tfor(int r=0; r<_rows; r++)\r\n\t\t{\r\n\t\t\tfor(int c=0; c<_cols; c++)\r\n\t\t\t{\r\n\t\t\t\tbuild += (_data[r,c]).to_string();\r\n\t\t\t}\r\n\t\t\tbuild += \"\\n\";\r\n\t\t}\r\n\t\treturn build;\r\n\t}\r\n\t\r\n\tpublic int num_rows()\r\n\t{ return _rows; }\r\n\t\r\n\tpublic int num_cols()\r\n\t{ return _cols; }\r\n\t\r\n\tpublic int num_bacons()\r\n\t{ return _bacons; }\r\n}\r\n\r\n", "problem": 4}}, {"pk": 30, "model": "challenges.solution", "fields": {"language": 15, "title": "Fast, functional, probabilistic clustering (k-means++)", "author": 13, "submitted": "2010-07-14", "source": "\r\n-- See this blog post for a full explanation:\r\n-- http://bit.ly/apzzi1\r\n\r\n-- This program implements the Lloyd (k-means) algorithm with improved initial seeding\r\n-- (referred to as k-means++). The algorithm is probabilistic. This means the program\r\n-- can be run multiple times to get better results. (The random number generator is\r\n-- not affected by external factors so running the program with the same arguments will\r\n-- give the same results).\r\n-- \r\n-- It's usually (not guranteed) able to find optimal solutions to large input sets with\r\n-- an accuracy setting of a few hundred, but being a heuristic algorithm it's unlikely\r\n-- to find optimal solutions to the ryan data sets.\r\n--\r\n-- Compile:\r\n-- ghc --make -O2 bacon.hs\r\n--\r\n-- Run:\r\n-- ./bacon INFILE ACCURACY\r\n-- (Accuracy can be left blank, in which case it defaults to 1 accuracy)\r\n--\r\n-- For example, './bacon ryan-03 100' runs the probabilistic algorithm 100 times on\r\n-- the input data 'ryan-03'.\r\n\r\n-- Benchmarks\r\n-- Accuracy=1:\r\n-- large-01: 68    (126 ms)\r\n-- ryan-01:  160   (116 ms)\r\n-- ryan-02:  488   (156 ms)\r\n-- ryan-03:  1956  (935 ms)\r\n--\r\n-- Accuracy=100:\r\n-- large-01: 45    (128 ms)\r\n-- ryan-01:  144   (464 ms)\r\n-- ryan-02:  438   (2,268 ms)\r\n-- ryan-03:  1808  (74,199 ms)\r\n--\r\n-- Accuracy=10000:\r\n-- large-01: 44    (6,244 ms)\r\n-- ryan-01:  132   (38,227 ms)\r\n-- ryan-02:  419   (214,212 ms)\r\n-- (ryan-03 should run for >2 hours; I didn't bother)\r\n\r\n-- By luckytoilet\r\n-- http://luckytoilet.wordpress.com/\r\n\r\nimport Data.List\r\nimport System.Random\r\nimport System.Environment\r\n\r\n-- Type definition for a point (city). The first integer is the x position, and the\r\n-- second the y position. The top left corner of the grid is defined as (0,0).\r\ntype Point = (Int,Int)\r\n\r\n-- A cluster is a group of points. Clusters are usually 'clustered' together on the map.\r\ntype Cluster = [Point]\r\n\r\n-- Calculate the Manhattan (straight edge) distance between two points.\r\ndistance :: Point -> Point -> Int\r\ndistance (a,b) (c,d) = abs (a-c) + abs (b-d)\r\n\r\n\r\n-- This function takes k1 (number of clusters), ps1 (location of points), and a stream\r\n-- of random numbers to create a probabilistic initial distribution.\r\n\r\n-- The K-Means++ algorithm is used to generate the initial distributions. This is a\r\n-- probabilistic algorithm, and is much better than completely random seeding; additionally\r\n-- it can be run multiple times for optimal results.\r\ninitialize :: Int -> [Point] -> [Float] -> [Point]\r\ninitialize k1 ps1 rand = let\r\n  r = floor $ head rand * realToFrac (length ps1)\r\n    in next (k1-1) (take r ps1 ++ drop (r+1) ps1) [ps1!!r] (tail rand) where\r\n\r\n  -- Each recursion of this function places one additional cluster point (or centroid).\r\n  next :: Int -> [Point] -> [Point] -> [Float] -> [Point]\r\n  next 0 _ cs _ = cs\r\n  next k ps cs rs = next (k-1) (take r ps ++ drop (r+1) ps) ((ps!!r):cs) (tail rs) where\r\n\r\n    -- Distance to centroid closest to it\r\n    d p = realToFrac . minimum $ map (\\c -> distance p c) cs\r\n\r\n    -- Distances squared\r\n    d2s = map ((**2) . d) ps\r\n\r\n    -- Random point based on probability array\r\n    r = let s = init $ scanl (+) 0 d2s\r\n            rn = head rs * last s\r\n        in fst . head . dropWhile ((<rn) . snd) $ zip [0..] s\r\n\r\n\r\n-- Group a bunch of points into cluters, given the centroids. The points\r\n-- form the first argument, and the centroids the second. Start with an empty\r\n-- list of clusters and iteratively add each point to it.\r\nformClusters :: [Point] -> [Point] -> [Cluster]\r\nformClusters pts centers = foldr addToCluster (replicate (length centers) []) pts where\r\n\r\n  -- Add a point to the nth cluster.\r\n  addN :: Point -> [Cluster] -> Int -> [Cluster]\r\n  addN pt clusters n = take n clusters ++ [pt:(clusters!!n)] ++ drop (n+1) clusters\r\n\r\n  -- Add the next point to a cluster\r\n  addToCluster :: Point -> [Cluster] -> [Cluster]\r\n  addToCluster pt clusters = addN pt clusters . fst . minByDistance $ zip [0..] centers where\r\n    minByDistance :: [(Int,Point)] -> (Int,Point)\r\n    minByDistance = foldr1 (\\(n,x) (m,y) -> \r\n      if distance pt x < distance pt y then (n,x) else (m,y))\r\n\r\n\r\n-- Find the centroid of a cluster\r\ncentroid :: Cluster -> Point\r\ncentroid pts = ((sum (map fst pts) `div` ln),(sum (map snd pts) `div` ln)) where\r\n  ln = if null pts then 1 else length pts\r\n\r\n\r\n-- Compute the clusters using the k means algorithm: repeat calculating centroids,\r\n-- moving clusters, rearranging, etc, until clusters do not change anymore.\r\nkMeans :: (Int,Int) -> Int -> [Point] -> [Float] -> [Cluster]\r\nkMeans s n ps rand = last . takeUntilSame . iterate (formClusters ps . map centroid) $\r\n    formClusters ps $ initialize n ps rand where\r\n\r\n  -- Take elements from a list until the next element is identical\r\n  takeUntilSame (a:b:xs) | a == b = [a]\r\n                         | otherwise = a : takeUntilSame (b:xs)\r\n\r\n\r\n-- Compute the score for a point and a cluster\r\nscore :: Point -> Cluster -> Int\r\nscore p cs = sum $ map (distance p) cs\r\n\r\n\r\n-- Find the optimal center by brute force. Given a cluster, there may be several possible\r\n-- places to put the center (dispenser). On an Euclidean metric, this point is always the\r\n-- centroid; but on a Manhattan metric, this is not so. We find the center by checking\r\n-- all reasonable lattice points.\r\nfindCenter :: (Int,Int) -> [Point] -> Cluster -> (Int,Point)\r\nfindCenter _ _ [] = (0,(0,0))\r\nfindCenter (x',y') ps cls = (score b cls,b) where\r\n  x1 = minimum $ map fst cls; y1 = minimum $ map snd cls\r\n  x2 = maximum $ map fst cls; y2 = maximum $ map snd cls\r\n  b = minimumBy (\\a b -> compare (score a cls) (score b cls))\r\n    [(x,y) | x<-[x1-1..x2+1], y<-[y1-1..y2+1],(x,y) `notElem` ps,x>=0,y>=0,x<x',y<y']\r\n\r\n\r\n-- Do the parsing; I think the file format is needlessly difficult.\r\nparse :: [String] -> ((Int,Int,Int),[Point])\r\nparse (hd:dat) = (parseHead,parseData) where\r\n\r\n  -- Parsing the first line\r\n  parseHead :: (Int,Int,Int)\r\n  parseHead = let\r\n    [size,n] = words hd \r\n    parseSize = (read $ takeWhile (/='x') size, read.tail $ dropWhile (/='x') size)\r\n      in (fst parseSize, snd parseSize, read n)\r\n\r\n  -- Parse data, first by splitting into rows, then by splitting rows into cells\r\n  parseData = concatMap parseRow $ zip [0..] dat where\r\n    parseRow (y,row) = concatMap parseCell $ zip [0..] row where\r\n      parseCell (x,'.') = []\r\n      parseCell (x,'P') = [(x,y)]\r\n\r\n\r\n-- Handle the input and output: Read, parse, compute, spit it back out\r\nmain = do\r\n  as <- getArgs\r\n  c <- readFile (head as)\r\n\r\n  -- How many times to run the probabilistic algorithm?\r\n  let times = if length as > 1 then read (as!!1) :: Int else 1\r\n  let (s,r) = computeTimes times . parse $ lines c\r\n  mapM_ print r\r\n  print s where\r\n\r\n    -- Given arguments and a seed, run the algorithm once.\r\n    compute ((x,y,n),d) seed = let\r\n      rand = randoms $ mkStdGen seed :: [Float]\r\n      results = map (findCenter (x,y) d) $ kMeans (x,y) n d rand\r\n      score = sum $ map fst results\r\n      centers = map snd results\r\n        in (score,centers)\r\n\r\n    -- Run the algorithm n times, returning the best result.\r\n    computeTimes n args = minimumBy (\\a b -> compare (fst a) (fst b)) $\r\n      map (compute args) [1..n]\r\n", "problem": 4}}, {"pk": 31, "model": "challenges.solution", "fields": {"language": 16, "title": "Genetic Algorithm Solution", "author": 43, "submitted": "2010-07-14", "source": "//Genetic Algorithm Solution\r\n//Not guaranteed to find global minimum\r\n//Could use stochastic selection instead of Uniform Selection for better/faster convergence\r\n//have file 'infile.in' in the path with the grid in the format specified\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Driver {\r\n\t//The higher these values the longer it will take, but more likely you are to hit a minimum\r\n\tpublic static final int cycles = 16000;\r\n\tpublic static final int popSize = 2000;\r\n\t\r\n\tpublic static int baconCenters;\r\n\tpublic static ArrayList<Point> possPoints;\r\n\tpublic static final int cullSize = (int)(popSize*0.5);\r\n\t\r\n\t//read in data from fi\r\n\tpublic static char[][] readinput(){\r\n\t\ttry {\r\n\t\t\tScanner sc = new Scanner(new File(\"infile.in\"));\r\n\t\t\tStringTokenizer st = new StringTokenizer(sc.nextLine(), \"x| \");\r\n\t\t\tint m = Integer.parseInt(st.nextToken());\r\n\t\t\tint n = Integer.parseInt(st.nextToken());\r\n\t\t\tchar[][] board = new char[m][n];\r\n\t\t\tbaconCenters = Integer.parseInt(st.nextToken());\r\n\t\t\tfor(int i = 0; i < m; i++) {\r\n\t\t\t\tString s = sc.nextLine();\r\n\t\t\t\tfor(int j = 0; j < n; j++) {\r\n\t\t\t\t\tboard[i][j] = s.charAt(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn board;\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tpublic static ArrayList<Point> getCenters(char[][] board) {\r\n\t\tArrayList<Point> centers = new ArrayList<Point>();\r\n\t\tpossPoints = new ArrayList<Point>();\r\n\t\tfor(int i = 0; i < board.length; i++) {\r\n\t\t\tfor(int j =0; j < board[0].length; j++) {\r\n\t\t\t\tif(board[i][j] == 'P') {\r\n\t\t\t\t\tcenters.add(new Point(i,j));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpossPoints.add(new Point(i,j));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn centers;\r\n\t}\r\n\tpublic static void GA(char[][] board, ArrayList<Point> centers) {\r\n\t\tArrayList<Solution> sols = initializePopulation(board,centers);\r\n\t\tfor(int i = 0; i < 500; i++){\r\n\t\t\tsols = select(board, centers, sols);\r\n\t\t\tsols = reproduce(board, sols);\r\n\t\t}\r\n\t\tprintBoard(board, sols.get(0));\r\n\t}\r\n\tprivate static void printBoard(char[][] board, Solution solution) {\r\n\t\tSystem.out.println(solution.score);\r\n\t\tfor(Point p: solution.BaconCenters) {\r\n\t\t\tboard[p.x][p.y] = 'B';\r\n\t\t\tSystem.out.println(p.x+\",\"+p.y);\r\n\t\t}\r\n\t\t//Prints the board with bacon Centers\r\n\t\t/*\r\n\t\tfor(int i = 0; i < board.length; i++) {\r\n\t\t\tfor(int j = 0; j < board[0].length; j++) {\r\n\t\t\t\tSystem.out.print(board[i][j]);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t*/\r\n\t\t\r\n\t\t\r\n\t}\r\n\t//Breeds and mutates the solutions\r\n\t//Uses a blend on the X and Y coordinates separately for breeding\r\n\t//If child has BaconCenter on a population center use random point\r\n\t//Or if it mutates use a random point\r\n\tpublic static Solution breed(char board[][], Solution p1, Solution p2) {\r\n\t\tSolution s = new Solution();\r\n\t\tfor(int i = 0; i < p1.BaconCenters.size(); i++) {\r\n\t\t\tdouble blendx = Math.random();\r\n\t\t\tdouble blendy = Math.random();\r\n\t\t\tint xVal = (int) ((p1.BaconCenters.get(i).x*blendx + p2.BaconCenters.get(i).x*(1-blendx))/2);\r\n\t\t\tint yVal = (int) ((p1.BaconCenters.get(i).y*blendy + p2.BaconCenters.get(i).y*(1-blendx))/2);\r\n\t\t\tif(board[xVal][yVal] == 'P' || Math.random() > 0.7) {\r\n\t\t\t\ts.BaconCenters.add(possPoints.get((int)(Math.random()*possPoints.size())));\r\n\t\t\t} else {\r\n\t\t\t\ts.BaconCenters.add(new Point(xVal,yVal));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn s;\r\n\t\t\r\n\t}\r\n\t//Uniformly pick parents from the top cullSize solutions\r\n\tprivate static ArrayList<Solution> reproduce(char[][] board, ArrayList<Solution> sols) {\r\n\t\twhile(sols.size() < popSize) {\r\n\t\t\tSolution parent1 = sols.get((int)(Math.random()*cullSize));\r\n\t\t\tSolution parent2 = sols.get((int)Math.random()*cullSize);\r\n\t\t\tsols.add(breed(board, parent1, parent2));\r\n\t\t}\r\n\t\treturn sols;\r\n\t}\r\n\t//Grade each solution on total distance to all population centers\r\n\t//sort them and take only top cullSize\r\n\tprivate static ArrayList<Solution> select(char[][] board,\r\n\t\t\tArrayList<Point> centers, ArrayList<Solution> sols) {\r\n\t\tfor(Solution s: sols) {\r\n\t\t\ts.score = scoreIt(board, centers, s);\r\n\t\t}\r\n\t\tCollections.sort(sols);\r\n\t\tArrayList<Solution> winners = new ArrayList<Solution>();\r\n\t\tfor(int i = 0; i < cullSize; i++) {\r\n\t\t\twinners.add(sols.get(i));\r\n\t\t}\r\n\t\treturn winners;\r\n\t}\r\n\t\r\n\t//Get total distance to all BaconCenters\r\n\tprivate static int scoreIt(char[][] board, ArrayList<Point> centers,\r\n\t\t\tSolution s) {\r\n\t\tint score = 0;\r\n\t\tfor(Point p: centers) {\r\n\t\t\tArrayList<Integer> dists = new ArrayList<Integer>();\r\n\t\t\tfor(Point p2: s.BaconCenters) {\r\n\t\t\t\tdists.add(p.dist(p2));\r\n\t\t\t}\r\n\t\t\tscore += Collections.min(dists);\r\n\t\t}\r\n\t\treturn score;\r\n\t}\r\n\t\r\n\t//Create Random initial population\r\n\tprivate static ArrayList<Solution> initializePopulation(char[][] board,\r\n\t\t\tArrayList<Point> centers) {\r\n\t\tArrayList<Solution> pop = new ArrayList<Solution>();\r\n\t\tfor(int i = 0; i < popSize; i++) {\r\n\t\t\tCollections.shuffle(possPoints);\r\n\t\t\tSolution s = new Solution();\r\n\t\t\tfor(int j = 0; j < baconCenters; j++) {\r\n\t\t\t\ts.BaconCenters.add(possPoints.get(j));\r\n\t\t\t}\r\n\t\t\tpop.add(s);\r\n\t\t}\r\n\t\treturn pop;\r\n\t}\r\n\tpublic static void main(String[] args) {\r\n\t\tchar[][] board = readinput();\r\n\t\tArrayList<Point> centers = getCenters(board);\r\n\t\tGA(board,centers);\r\n\t}\r\n}\r\n\r\nclass Point {\r\n\tint x,y;\r\n\tpublic Point(int a, int b) {\r\n\t\tx = a;\r\n\t\ty = b;\r\n\t}\r\n\tpublic int dist(Point p) {\r\n\t\treturn Math.abs(x-p.x) + Math.abs(y-p.y);\r\n\t}\r\n}\r\n\r\nclass Solution implements Comparable {\r\n\tArrayList<Point> BaconCenters;\r\n\tint score;\r\n\tpublic Solution() {\r\n\t\tBaconCenters = new ArrayList<Point>();\r\n\t}\r\n\t@Override\r\n\tpublic int compareTo(Object o) {\r\n\t\treturn this.score - ((Solution)(o)).score;\r\n\t}\r\n}\r\n", "problem": 4}}, {"pk": 36, "model": "challenges.solution", "fields": {"language": 23, "title": "Bacorithm Ver. 2 + GA", "author": 40, "submitted": "2010-07-15", "source": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\n__author__ = \"James Eric Pruitt\"\r\n__license__ = \"Public Domain\"\r\n\r\nimport re\r\nimport sys\r\nimport random\r\n\r\n# The genetic algorithm portion of my code isn't set to run for very long. On\r\n# my machine, it takes 28 seconds to compute 5000 generations for a 100x100\r\n# map that contains 100 population centers and 50 dispensaries. With the GA\r\n# disabled, it takes ~0.4 seconds. Change generations to 0 on line 221 to\r\n# disable the genetic algorithm.\r\n\r\ndef manhattandistance(a, b):\r\n    \"\"\"\r\n    Manhattan distance from one point to another. Any two element iterable will\r\n    suffice as a point.\r\n    \"\"\"\r\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\r\n\r\ndef nearestneighbors(origin, pool):\r\n    \"\"\"\r\n    Returns an ordered list of the neighbors based on their Manhattan\r\n    distance to the given origin. The elements of the list are tuples that\r\n    contain the distance followed by the point's coordinates.\r\n    \"\"\"\r\n    returnbuffer = list()\r\n    for element in pool:\r\n        distancetoorigin = manhattandistance(origin, element)\r\n        returnbuffer.append((distancetoorigin, element))\r\n\r\n    # Nearest places will be at the top.\r\n    returnbuffer.sort()\r\n    return returnbuffer\r\n\r\ndef printmap(dims, shops, supplied, unsupplied = []):\r\n    \"\"\"\r\n    Generates an easily readable map.\r\n    \"\"\"\r\n    width, height = dims\r\n    for ycoord in xrange(height):\r\n        for xcoord in xrange(width):\r\n            point = (xcoord, ycoord)\r\n            if point in shops:\r\n                sys.stdout.write('B')\r\n            elif point in supplied:\r\n                sys.stdout.write('P')\r\n            elif point in unsupplied:\r\n                sys.stdout.write('@')\r\n            else:\r\n                sys.stdout.write('.')\r\n        sys.stdout.write('\\n')\r\n    sys.stdout.write('\\n')\r\n\r\ndef scoremap(shops, populationcenters):\r\n    \"\"\"\r\n    Scores the map based by summing the manhattan distance to the nearest\r\n    dispensary for each of the population centers.\r\n    \"\"\"\r\n    score = 0\r\n    for metro in populationcenters:\r\n        score += manhattandistance(metro, nearestneighbors(metro, shops)[0][1])\r\n\r\n    return score\r\n\r\ndef scoreallpoints(dims, ignorepoints, population, clustersize):\r\n    width, height = dims\r\n    scoredpoints = list()\r\n    neighborhoodcache = {}  # Keep track of the neighbors we compute so we\r\n                            # can use it later to speed things up\r\n\r\n    for ycoord in xrange(height):\r\n        for xcoord in xrange(width):\r\n            if (xcoord, ycoord) in ignorepoints:\r\n                continue\r\n\r\n            sortedneighbors = nearestneighbors((xcoord, ycoord), population)\r\n            cluster = sortedneighbors[:clustersize]\r\n            neighborhoodcache[(xcoord, ycoord)] = set([i[1] for i in cluster])\r\n            distances = [element[0] for element in cluster]\r\n            score = sum(distances)\r\n            scoredpoints.append((score, (xcoord, ycoord)))\r\n\r\n    # Sort each point on the grid based on its score\r\n    scoredpoints.sort()\r\n    return scoredpoints, neighborhoodcache\r\n\r\ndef mutatemap(dispensers, unsafetiles, dims, rate=0.25, shift=3):\r\n    \"\"\"\r\n    Shift dispenary locations on the map randomly\r\n    \"\"\"\r\n    mutatedset = []\r\n    width, height = dims\r\n    # Cycle through each point and the ratio of points defined by rate\r\n    # will be shifted a random amount\r\n    for location in dispensers:\r\n        x, y = location\r\n        if random.random() < rate:\r\n            while True:\r\n                x = max(min(x + random.randint(-shift, shift), width - 1), 0)\r\n                y = max(min(y + random.randint(-shift, shift), height - 1), 0)\r\n                if (x, y) not in unsafetiles and (x, y) not in dispensers:\r\n                    break\r\n\r\n        mutatedset.append((x,y))\r\n\r\n    return set(mutatedset)\r\n\r\n\r\ndef main(iostream, displaymap=False):\r\n    # Read in the dimensional parameters for the map\r\n    header = iostream.readline()\r\n    parameters = re.findall(\"([0-9]+)x([0-9]+) ([0-9]+)\", header)[0]\r\n    width, height, shops = [int(parameter) for parameter in parameters]\r\n    popcenters = set()\r\n    dispensaries = set()\r\n\r\n    # Load the coordinates of the population centers\r\n    row = 0\r\n    for line in iostream.readlines():\r\n        line = line.strip()\r\n        if not line: continue\r\n\r\n        column = 0\r\n        for character in line:\r\n            if character == 'P':\r\n                popcenters.add((column, row))\r\n            column += 1\r\n        row += 1\r\n\r\n    iostream.close()\r\n\r\n    # Let C = Number of population centers, Let D = Number of dispensers\r\n    # Generate a map where each point is scored based on the combined\r\n    # distance to the nearest ((C / D + 1)) population centers.\r\n    popcentercount = len(popcenters)\r\n    neighborhoodsize = popcentercount / shops + 1\r\n\r\n    scoredpoints, addressbook = scoreallpoints(\r\n        (width, height),\r\n        popcenters,\r\n        popcenters,\r\n        neighborhoodsize)\r\n\r\n    # We will be keeping track of which population centers have a bacon\r\n    # dispensary. We will need it to know when to place new dispensers.\r\n    # Without this part, all of the bacon centers just end getting clustered.\r\n    getsbacon = set()\r\n    canthavebacon = set(popcenters)\r\n\r\n    # Cycle through the sorted points and the associated neighborhoods. If\r\n    # that point does not have any population centers allocated to it, we\r\n    # place a dispensary there.\r\n    #\r\n    # On the first pass, we only allocate a dispensary there if none of the\r\n    # nearest neighbors are supplied with bacon. On the second pass, we\r\n    # allocate a dispensary if any of the neighbors aren't supplied. A single\r\n    # pass will leave gaps under certain map conditions.\r\n    secondpass = False\r\n    while True:\r\n        for element in scoredpoints:\r\n            score, point = element\r\n            neighborhood = addressbook[point]\r\n            if len(dispensaries) == shops:\r\n                break\r\n            elif point in dispensaries:\r\n                continue\r\n            elif not secondpass and neighborhood.intersection(getsbacon):\r\n                continue\r\n            elif not secondpass or neighborhood.intersection(canthavebacon):\r\n                for popcenter in neighborhood:\r\n                    try:\r\n                        canthavebacon.remove(popcenter)\r\n                        getsbacon.add(popcenter)\r\n                    except KeyError:\r\n                        pass\r\n\r\n                dispensaries.add(point)\r\n\r\n        # Recompute the importance of each point on the map but now we will\r\n        # use only the population centers that have not been allocated\r\n        # bacon dispensaries. We will reduce the neighborhood size, too.\r\n        if not secondpass and canthavebacon:\r\n            secondpass = True\r\n            # This line was originally ... max(neighborhoodsize - 1, 1). When I\r\n            # changed it to (... / 2), it dropped my scores a ton O_o\r\n            neighborhoodsize = max(neighborhoodsize / 2, 1)\r\n            scoredpoints, addressbook = scoreallpoints(\r\n                (width, height),\r\n                popcenters,\r\n                canthavebacon,\r\n                neighborhoodsize)\r\n\r\n        elif len(dispensaries) < shops:\r\n            metroscores = []\r\n            neighborhoodsize = 1\r\n            for metro in getsbacon:\r\n                nearestbacon = nearestneighbors(metro, dispensaries)[0][0]\r\n                metroscores.append((nearestbacon, metro))\r\n\r\n            metroscores.sort()\r\n            metroscores.reverse()\r\n            unallocatequantiy = neighborhoodsize * (shops - len(dispensaries))\r\n            willbeunallocated = metroscores[:unallocatequantiy]\r\n\r\n            for element in willbeunallocated:\r\n                score, popcenter = element\r\n                canthavebacon.add(popcenter)\r\n                getsbacon.remove(popcenter)\r\n        else:\r\n            break\r\n\r\n    # Now that the main part of the algorithm has run its course, we will\r\n    # now use a genetic algorithm to see if some optimizations could be made.\r\n    # This genetic algorithm generates one child at a time. If it is an\r\n    # improvement over its parent, it replaces the parent until it too is\r\n    # defeated.\r\n    generations = 5000\r\n\r\n    occupied = getsbacon.union(canthavebacon)\r\n    parent = dispensaries\r\n    bestscore = scoremap(parent, occupied)\r\n\r\n    for iteration in xrange(generations):\r\n        mutant = mutatemap(parent, occupied, (width, height))\r\n        if len(mutant) != shops:\r\n            continue\r\n\r\n        childscore = scoremap(mutant, occupied)\r\n        if childscore < bestscore:\r\n            bestscore = childscore\r\n            parent = mutant\r\n\r\n    dispensaries = parent\r\n\r\n    # Display the resulting map and score\r\n    printmap((width, height), dispensaries, occupied)#, canthavebacon)\r\n    print \"Score: \", scoremap(dispensaries, occupied)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) > 1:\r\n        main(iostream=open(sys.argv[1]))\r\n    else:\r\n        app = sys.argv[0]\r\n        print \"Usage:\"\r\n        print \"\\t%s file        Generates dispensary locations for file\" % app\r\n", "problem": 4}}, {"pk": 44, "model": "challenges.solution", "fields": {"language": 5, "title": "Hillclimber (faster)", "author": 41, "submitted": "2010-07-16", "source": "#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\n#define ABS(N) ((N)<0? (-1*(N)):(N))\r\n\r\nclass cPoint { //point coordiantes and distance\r\npublic:\r\n\tcPoint() {iX=iY=-1; iService=-1; iStable=0; iRandPick=0;}\r\n\tvoid Set(int iNewX, int iNewY) {iX=iNewX; iY=iNewY;}\r\n\tinline int Distance(cPoint &pOther) {return (ABS(pOther.iX-iX))+(ABS(pOther.iY-iY));}\r\n\tvoid Print(FILE *pfFile) {fprintf(pfFile,\"(%i,%i)\",iX+1,iY+1);}\r\n\tint iX, iY, iService, iStable, iRandPick;\r\n};\r\n\r\nclass cGraph {\r\npublic:\r\n\tcGraph() {iWidth=0; iHeight=0; lprgcGraph=NULL; iWorstPop=-1;}\r\n\t~cGraph() {if(lprgcGraph) delete lprgcGraph;}\r\n\r\n\t//read input file (can load old output file to resume from old bacon positions)\r\n\tint ReadFile(const char *szFilename) \r\n\t{\r\n\t\tFILE *pfInput;\r\n\t\tint iCurBacon=0;\r\n\t\t\r\n\t\tpfInput=fopen(szFilename,\"r\");\r\n\t\tif(!pfInput) return 0;\r\n\t\t\r\n\t\tfscanf(pfInput,\"%ix%i %i\\n\",&iWidth,&iHeight,&iBacon);\r\n\t\tif(lprgcGraph) delete lprgcGraph;\r\n\t\tlprgcGraph=new char[iWidth*iHeight]; //allocate graph array\r\n\t\tiPopCntr=0;\r\n\t\t\r\n\t\tfor(int iRow=0; iRow<iHeight; iRow++) {\r\n\t\t\tfor(int iCol=0; iCol<iWidth; iCol++) {\r\n\t\t\t\t\tchar cChar=getc(pfInput);\r\n\t\t\t\t\tif(cChar=='P') //add population center\r\n\t\t\t\t\t\t{lprgpntPopCntr[iPopCntr].Set(iCol,iRow); iPopCntr++;}\r\n\t\t\t\t\tif(cChar=='#') //set bacon position\r\n\t\t\t\t\t\t{lprgpntBacon[iCurBacon].Set(iCol,iRow); iCurBacon++;}\r\n\t\t\t}\r\n\t\t\tgetc(pfInput); //skip \\n\r\n\t\t}\r\n\t\t\r\n\t\tfclose(pfInput);\r\n\t\t\r\n\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) //randomize bacon not in file\r\n\t\t\tif(lprgpntBacon[iCurBacon].iX==-1) RandomBacon(iCurBacon);\r\n\t\t\t\r\n\t\tiMaxDist=iWidth*iHeight; //max distance\t\r\n\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tvoid Print(FILE *pfFile) //print curent solution\r\n\t{\r\n\t\tfprintf(pfFile,\"%ix%i %i\\n\",iWidth,iHeight,iBacon);\r\n\t\t\r\n\t\tint iX, iY, iCurBacon; //init graph\r\n\t\tmemset(lprgcGraph,'.',iWidth*iHeight);\r\n\t\t\r\n\t\tfor(int iCurPop=0; iCurPop<iPopCntr; iCurPop++) //set population center points\r\n\t\t\t{GetPopCntr(iCurPop,iX,iY); lprgcGraph[(iY*iWidth)+iX]='P';}\r\n\t\t\t\r\n\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) //set bacon dispenser points\r\n\t\t\t{GetBacon(iCurBacon,iX,iY); lprgcGraph[(iY*iWidth)+iX]=(lprgpntBacon[iCurBacon].iStable? '#':lprgpntBacon[iCurBacon].iService+'0');}\r\n\t\t\r\n\t\tfor(iY=0; iY<iHeight; iY++) { //print graph\r\n\t\t\tfor(iX=0; iX<iWidth; iX++)\r\n\t\t\t\tfprintf(pfFile,\"%c\",lprgcGraph[(iY*iWidth)+iX]);\r\n\t\t\tfprintf(pfFile,\"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\tfprintf(pfFile,\"\\n\\nBacon: \"); //print bacon points\r\n\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) \r\n\t\t\t{if(iCurBacon) fprintf(pfFile,\", \"); lprgpntBacon[iCurBacon].Print(pfFile);}\r\n\t\r\n\t\tfprintf(pfFile,\"\\n\\nDistance: %i\\n\\n\",TotalDistance()); //print distance\r\n\t}\r\n\t\r\n\tvoid FindService() //determine which bacon services each population & how many populations each bacon services\r\n\t{ \r\n\t\tint iCurDist, iMinDist, iServeDist, iMinBacon, iWorstDist=0, iBestDist=iMaxDist, iCurBacon;\r\n\t\t\r\n\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) {lprgpntBacon[iCurBacon].iService=0;}\r\n\t\t\r\n\t\tfor(int iCurPop=0; iCurPop<iPopCntr; iCurPop++) { //for each population center\r\n\t\t\t\r\n\t\t\tiMinDist=iMaxDist;\r\n\t\t\t\r\n\t\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) { //find the closest bacon dispenser \r\n\t\t\t\tiCurDist=lprgpntPopCntr[iCurPop].Distance(lprgpntBacon[iCurBacon]); //distance to this bacon\r\n\t\t\t\tif(iCurDist<iMinDist) {iMinDist=iCurDist; iMinBacon=iCurBacon;} //new closest\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlprgpntBacon[iMinBacon].iService++; //number of populations this bacon services (closest to)\r\n\t\t\t\r\n\t\t\tif(iMinDist>iWorstDist) {iWorstDist=iMinDist; iWorstPop=iCurPop;} //population farthest from a distributer\r\n\t\t\t\t\t\t\r\n\t\t\tif(lprgpntPopCntr[iCurPop].iService!=iMinBacon) {//this population is serviced by a different bacon (one moved closer)\r\n\t\t\t\tlprgpntBacon[lprgpntPopCntr[iCurPop].iService].iStable=false;//set old bacon provider as unstable\r\n\t\t\t\tlprgpntBacon[iMinBacon].iStable=false;//set new bacon provider as unstable\r\n\t\t\t\tlprgpntPopCntr[iCurPop].iService=iMinBacon; //index of new bacon that now services this population\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tint TotalDistance() //calcuate total distance\r\n\t{ \r\n\t\tint iCurDist, iMinDist, iTotalDist=0;\r\n\t\t\r\n\t\tfor(int iCurPop=0; iCurPop<iPopCntr; iCurPop++) { //for each population center\r\n\t\t\tiMinDist=iMaxDist;\r\n\t\t\t\r\n\t\t\tfor(int iCurBacon=0; iCurBacon<iBacon; iCurBacon++) { //find the closest bacon dispenser \r\n\t\t\t\tiCurDist=lprgpntPopCntr[iCurPop].Distance(lprgpntBacon[iCurBacon]); //distance to this bacon\r\n\t\t\t\tif(iCurDist<iMinDist) iMinDist=iCurDist; //new closest\r\n\t\t\t}\r\n\r\n\t\t\tiTotalDist+=iMinDist; //add to total distance\r\n\t\t}\r\n\t\t\r\n\t\treturn iTotalDist;\r\n\t}\r\n\r\n\tint SingleDistance(int iCurBacon) //sum of distances between a single bacon and its populations\r\n\t{ \r\n\t\tint iTotalDist=0;\r\n\t\t\r\n\t\tfor(int iCurPop=0; iCurPop<iPopCntr; iCurPop++) { //for each population center\r\n\t\t\t//if(lprgpntPopCntr[iCurPop].iService==iCurBacon) //population is serviced by this bacon\r\n\t\t\t\tiTotalDist+=lprgpntPopCntr[iCurPop].Distance(lprgpntBacon[lprgpntPopCntr[iCurPop].iService]);\r\n\t\t}\r\n\t\treturn iTotalDist;\r\n\t}\r\n\t\r\n\t//get position of a population center or bacon dispenser\r\n\tvoid GetPopCntr(int iIndex, int &iX, int &iY) {iX=lprgpntPopCntr[iIndex].iX; iY=lprgpntPopCntr[iIndex].iY;}\r\n\tvoid GetBacon(int iIndex, int &iX, int &iY) {iX=lprgpntBacon[iIndex].iX; iY=lprgpntBacon[iIndex].iY;}\r\n\t\r\n\tinline int SetBacon(int iIndex, int iX, int iY) //set the position of a bacon dispenser\r\n\t{\r\n\t\t//if(iIndex<0 || iIndex>=iBacon) return 0; //bacon out of bounds\r\n\t\tif(iX<0 || iX>=iWidth) return 0; //X out of bounds\r\n\t\tif(iY<0 || iY>=iHeight) return 0; //Y out of bounds\r\n\t\t\r\n\t\tfor(int iCurPop=0; iCurPop<iPopCntr; iCurPop++) //population center here\r\n\t\t\tif(lprgpntPopCntr[iCurPop].iX==iX && lprgpntPopCntr[iCurPop].iY==iY) return 0;\r\n\t\t\t\r\n\t\tfor(int iCurBacon=0; iCurBacon<iBacon; iCurBacon++) //another bacon already here\r\n\t\t\tif(lprgpntBacon[iCurBacon].iX==iX && lprgpntBacon[iCurBacon].iY==iY) return 0;\r\n\t\t\r\n\t\tlprgpntBacon[iIndex].Set(iX,iY);\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tinline int RandomPoint(cPoint *lprgpntPoints, int iPoints) //pick a random bacon/population\r\n\t{\r\n\t\t//chance to place by the worst population\r\n\t\tif(lprgpntPoints==lprgpntPopCntr && iWorstPop>-1 && !(rand()%((iFail>>3)+1))) return iWorstPop;\r\n\t\t\r\n\t\t//load balancing for picking random points\r\n\t\tint iRand1=rand()%iPoints;\r\n\t\tint iRand2=rand()%iPoints;\r\n\t\tif(lprgpntPoints[iRand1].iRandPick<lprgpntPoints[iRand2].iRandPick) \r\n\t\t\t{lprgpntPoints[iRand1].iRandPick++; return iRand1;}\r\n\t\telse {lprgpntPoints[iRand2].iRandPick++; return iRand2;}\r\n\t}\r\n\t\r\n\tvoid RandomBacon(int iBaconIndex, int iPopIndex) //place a single bacon dispenser in random around a population\r\n\t{\r\n\t\tint iNewX, iNewY, iXShift, iYShift, iOk;\r\n\t\tdo { //keep trying random positions around the population\r\n\t\t\tGetPopCntr(iPopIndex,iNewX,iNewY);\r\n\t\t\tiXShift=rand()%4; iYShift=rand()%4;\r\n\t\t\tif(rand()%2) iXShift*=-1; if(rand()%2) iYShift*=-1;\r\n\t\t\tiNewX+=iXShift; iNewY+=iYShift;\r\n\t\t\tiOk=SetBacon(iBaconIndex,iNewX,iNewY); \r\n\t\t} while(!iOk);\r\n\t}\r\n\t\r\n\tinline void RandomBacon(int iIndex){RandomBacon(iIndex,RandomPoint(lprgpntPopCntr,iPopCntr));} //single bacon near a random population\r\n\tinline void RandomBacon() {RandomBacon(RandomPoint(lprgpntBacon,iBacon));}\r\n\t//inline void RestartBacon() {for(int iCurBacon=0; iCurBacon<iBacon; iCurBacon++) RandomBacon(iCurBacon);}\r\n\t\t\r\n\tint MoveBacon(int iIndex, int iDir, int iStep) //move a bacon dispenser by direction and step\r\n\t{\r\n\t\tint iX, iY, iOk;\r\n\t\tGetBacon(iIndex,iX,iY);\r\n\t\t\r\n\t\tswitch(iDir) {\r\n\t\t\tcase 0: iY-=iStep; break; //up\r\n\t\t\tcase 1: iY+=iStep; break; //down\r\n\t\t\tcase 2: iX-=iStep; break; //left\r\n\t\t\tcase 3: iX+=iStep; break; //right\r\n\t\t\tcase 4: iX-=iStep,iY-=iStep; break; //up/left\r\n\t\t\tcase 5: iX-=iStep,iY+=iStep; break; //down/left\r\n\t\t\tcase 6: iX+=iStep,iY-=iStep; break; //up/right\r\n\t\t\tcase 7: iX+=iStep,iY+=iStep; break; //down/right\r\n\t\t}\r\n\t\t\r\n\t\tiOk=SetBacon(iIndex,iX,iY);\r\n\t\treturn iOk;\r\n\t}\r\n\t\r\n\tvoid AllStable() {for(int iCurBacon=0; iCurBacon<iBacon; iCurBacon++) lprgpntBacon[iCurBacon].iStable=true;}\r\n\tvoid RestoreBest() {memcpy(lprgpntBacon,lprgpntBest,iBacon*sizeof(cPoint)); FindService(); AllStable();}\r\n\r\n#define DEBUG 0\r\n#define DEBOUT if(DEBUG) {FindService(); Print(stdout); system(\"pause\");}\t\r\n\tint Hillclimb(int iMaxFail, int iMaxTime)\r\n\t{\r\n\t\tint iCurDist, iLastDist, iCurFull, iLastFull, iBestDist, iOrgX, iOrgY, iCurBacon;\r\n\t\tint iBetterMove, iStable=false, iStep, iMaxStep=2, iStartTime, iEndTime=0;\r\n\t\t\r\n\t\tFindService();\r\n\t\tiCurDist=iLastDist=iBestDist=TotalDistance(); //initial distance\r\n\t\tmemcpy(lprgpntBest,lprgpntBacon,iBacon*sizeof(cPoint));\r\n\t\tiFail=0;\r\n\t\tiStartTime=time(0);\r\n\tDEBOUT;\t\r\n\t\twhile(iFail<iMaxFail && iEndTime-iStartTime<iMaxTime) { \r\n\t\t\tdo { //cycle moving each bacon dispenser until no improvements can be made\r\n\t\t\t\tiStable=true;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tfor(iCurBacon=0; iCurBacon<iBacon; iCurBacon++) { //move each bacon\r\n\t\t\t\t\tif(lprgpntBacon[iCurBacon].iStable) continue; //skip stable bacon dispensers\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tiBetterMove=false;\t//init good & bad moves\r\n\t\t\t\t\tGetBacon(iCurBacon,iOrgX,iOrgY); //get original position\r\n\t\t\t\t\tFindService();\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t//iLastDist=TotalDistance(); //distance before move\t\r\n\t\t\t\t\tiLastDist=SingleDistance(iCurBacon);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(iStep=1; iStep<=iMaxStep && !iBetterMove; iStep++) \r\n\t\t\t\t\t\tfor(int iDir=0; iDir<8 && !iBetterMove; iDir++) { //look for an improving move\r\n\t\t\t\t\t\t\tif(iStep>1 && iDir>3) continue;\r\n\t\t\t\t\t\t\tif(!MoveBacon(iCurBacon,iDir,iStep)) continue; //try move, continue if not legal\r\n\t\t\t\t\t\t\t//iCurDist=TotalDistance(); //distance after move\r\n\t\t\t\t\t\t\tiCurDist=SingleDistance(iCurBacon);\r\n\t\t\t\t\t\t\tif(iCurDist<iLastDist) //move reduces the distance\r\n\t\t\t\t\t\t\t\t{iLastDist=iCurDist; iLastFull=iCurFull; iBetterMove=true;} \r\n\t\t\t\t\t\t\telse lprgpntBacon[iCurBacon].Set(iOrgX,iOrgY); //move back to original position\r\n\t\t\t\t\t\t}\r\n\t\t\t\tDEBOUT;\t\r\n\t\t\t\t\tif(iBetterMove) {iStable=false;} //move lowered total or full distance\r\n\t\t\t\t\t//replace bacon if not servicing any population and can't be moved for full distance improvement\r\n\t\t\t\t\telse if(!lprgpntBacon[iCurBacon].iService) {RandomBacon(iCurBacon); iStable=false;}\r\n\t\t\t\t\telse lprgpntBacon[iCurBacon].iStable=true; //bacon is stable\t\r\n\t\t\t\t}\r\n\t\t\t} while(!iStable);\r\n\t\tDEBOUT;\r\n\t\t\tprintf(\".\"); //indicate stability has been reached\r\n\t\t\tiLastDist=TotalDistance();\r\n\t\t\tif(iLastDist<iBestDist) { //new best position\r\n\t\t\t\tiFail=0; iBestDist=iLastDist; //reset fail counter, store best score\r\n\t\t\t\tmemcpy(lprgpntBest,lprgpntBacon,iBacon*sizeof(cPoint)); //store best solution\r\n\t\t\t\tprintf(\"\\nDistance: %i\\n\",iBestDist); //print new distance\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse {iFail++; if(rand()%2) RestoreBest();} //failed to improve, inc #fail, 50/50 chance to go back to best solution & set all stable\t\t\r\n\t\t\r\n\t\t\t//place a random bacon dispenser around a random population\r\n\t\t\tRandomBacon(RandomPoint(lprgpntBacon,iBacon));\r\n\t\t\tif((iFail%500)==499) RandomBacon(RandomPoint(lprgpntBacon,iBacon)); //second move every so often\r\n\t\t\t\r\n\t\t\tFindService(); //reset service map\r\n\t\t\tiLastDist=TotalDistance(); //set last distance\r\n\t\t\tiEndTime=time(0);\r\n\t\tDEBOUT;\t\r\n\t\t}\r\n\t\t\r\n\t\tRestoreBest();\r\n\t\treturn iBestDist;\r\n\t}\r\n\t\t\r\nprivate:\r\n\tchar *lprgcGraph;\r\n\tcPoint lprgpntPopCntr[512], lprgpntBacon[255], lprgpntBest[255];\r\n\tint iWidth, iHeight, iPopCntr, iBacon, iWorstPop, iMaxDist, iFail;\r\n};\r\n\r\ncGraph gGraph;\r\n\r\n/*\r\nWesley Hopper\r\n\r\nbest scores:\r\nryan-01\t128\t1s-3s\r\nryan-02\t388\t5-10s\r\nryan-03\t1434 8-12m\r\n\r\nCan load an old output file to resume solving from that position, rather than starting from the beginning\r\n\r\nTries moving each bacon dispenser in 8 directions and increasing step sizes from its current location.\r\nIt accepts the first move that reduces the total distance. Step sizes larger than 1 allow the bacon to move \r\nthrough formations it couldn't pass through with a single step. I hard coded the step size to 2 \r\nbecause larger sizes don't seem to increase performance, but reduce speed.\r\n\r\nEach bacon dispenser is marked as stable when it is servicing at least one population (closest to it)\r\nand no move within the step size will produce a lower distance. Stable dispensers are skipped during moving, \r\nto increase speed. Dispensers are marked unstable when a move results in a population being serviced by a different dispenser.\r\nBoth the new and old dispensers servicing the population are marked unstable. Therefore, when a bacon is moved to a random location,\r\nthe populations that used to be serviced by it will mark their new bacon providers unstable, and the new one(s) being serviced \r\nby it in its new location will mark it unstable. The repositioned dispenser and the dispensers near its old location \r\ncan be moved again, allowing for increases with the altered positioning.\r\n\r\nIf a bacon dispenser is not servicing any populations and no move reduces the distance, the dispenser is replaced\r\naround a random population. \r\n\r\nWhen an iteration of moves produces a distance lower than the best seen, the solution is saved, and a fail counter reset to 0.\r\nIf an iteration doesn't not produce a new best solution, the fail counter is incremented, and the best solution is restored.\r\n\r\nAfter an iteration is finished and the distance evaluated, a random bacon dispenser is moved around a random population.\r\nThen a new iteration starts and moves are made until all dispensers are stable again.\r\nThis is repeated until the fail counter exceeds the maximum specified.\r\n*/\r\n\r\nint main(int argc, char *argv[])\r\n{\t\r\n\tFILE *pfOutput;\r\n\tint iMaxFail=5000, iMaxTime=600, iStartTime, iEndTime, iEndDist;\r\n\tchar szFilename[1024]=\"ryan-03\";\r\n\t\r\n\tsrand(time(0));\r\n\t\r\n\t//read arguments\r\n\tif(argc>1) {strcpy(szFilename,argv[1]);} //arg1 = filename\r\n\tif(argc>2) iMaxFail=atoi(argv[2]); //arg2 = max fail\r\n\tif(argc>3) iMaxTime=atoi(argv[3]); //arg3 = max time (seconds)\r\n\t\t\r\n\t//load input file\r\n\tprintf(\"Solving %s\\n\",szFilename); \r\n\tif(!gGraph.ReadFile(szFilename)) {printf(\"Error loading %s\\n\",szFilename); system(\"PAUSE\"); return 0;}\r\n\t\r\n\tiStartTime=time(0); iEndDist=gGraph.Hillclimb(iMaxFail,iMaxTime); iEndTime=time(0); //find solution\r\n\t\r\n\tsprintf(szFilename+strlen(szFilename),\"-%i\",iEndDist); //append final distance to original filename\r\n\tpfOutput=fopen(szFilename,\"w\"); gGraph.Print(pfOutput); fclose(pfOutput); //print solution to output file\r\n\tprintf(\"\\n\\nFinal Distance: %i\\n\",gGraph.TotalDistance()); //print final distance\r\n\tprintf(\"\\nTime: %i seconds\\n\\n\",iEndTime-iStartTime); //print execution time\r\n\t\r\n\tsystem(\"PAUSE\");\r\n\treturn 0;\r\n}\r\n", "problem": 4}}, {"pk": 50, "model": "challenges.solution", "fields": {"language": 23, "title": "Python Getting There", "author": 61, "submitted": "2010-10-23", "source": "#By islands, ##proggit on freenode\r\n#2010-10-23 2:00am HST\r\n#\r\n#Execution time = 3.31 seconds total\r\n#\r\n#This second attempt uses a method found from \r\n#google for calculating the Hamming Distance\r\n#for the two adjancent words.\r\n#\r\n#This calculation is used to short-circuit\r\n#the iterations through all 5 sorted lists\r\n#when creating the graph, and so the inefficient\r\n#function to calculate (HD==1)?True:False was removed\r\n#\r\n#Hopefully still functions correctly for all\r\n#dictionary terms!  Someone please test this..\r\n#It will be trivial to solve Program 2 for\r\n#all cases..\r\n#\r\n#Dependencies:  You must have the python-igraph\r\n#package installed.\r\n\r\nimport sys\r\nfrom igraph import *\r\nimport datetime\r\nfrom itertools import izip\r\n \r\ndef openFile(fileName):\r\n    f = open(fileName)\r\n    x = []\r\n    for line in iter(f):\r\n        x.append(line[0:5])\r\n    f.close()\r\n    return x\r\n\r\ndef shiftList(x,n):\r\n    \"\"\"takes a list and shifts each\r\n    string within it around by n places\"\"\"\r\n    if n<=0:\r\n        return x\r\n    if n>=len(x):\r\n        return x\r\n    for i in range(0,len(x)):\r\n        x[i] = x[i][-1*n:]+x[i][:-1*n]\r\n    return x\r\n\r\ndef getGraphFromSorted(list,xo,n):\r\n    \"\"\"loads up the global dictionar y with\r\n    matches for each word, needs a sorted list\r\n    that is matches up on the nth character\"\"\"\r\n    lo = []\r\n\r\n    for i in range(0,len(x)-1):\r\n        for j in range(i+1,len(x)):\r\n            hd = sum(c1 != c2 for c1, c2 in izip(x[i], x[j]))\r\n            if hd>1:\r\n                break\r\n            if hd==1:\r\n                lo.append((xo[x[i]],xo[x[j]]))\r\n    return lo\r\n        \r\ndef printEvent(msg):\r\n    global a,b\r\n    b = datetime.datetime.now()\r\n    c = b-a\r\n    cc = b-aa\r\n    t1 = 0+c.seconds + c.microseconds/1000000.0\r\n    t2 = 0+cc.seconds + cc.microseconds/1000000.0\r\n    print msg, ' This part took:',t1,\r\n    print 'seconds, total execution so far:',t2,'seconds'\r\n    a = b\r\n\r\naa = datetime.datetime.now()\r\na = datetime.datetime.now()\r\nb = 0\r\n\r\n\r\n#x = openFile('5small.txt')\r\nx = openFile('5.txt')\r\nxo = {}\r\nox = {}\r\ng = Graph()\r\ng.add_vertices(len(x))\r\n\r\nfor i,j in zip(x,range(len(x))):\r\n    xo[i]=j\r\n    ox[j]=i\r\n    \r\nx.sort()\r\n\r\nprintEvent('Opened file and sorted one time...')\r\n\r\ng.add_edges(getGraphFromSorted(x,xo,0))\r\n\r\nprintEvent('Graphed one time...')\r\n\r\nfor i in range(1,5):\r\n    x = shiftList(x,i)\r\n    x.sort()\r\n    x = shiftList(x,5-i)\r\n    g.add_edges(getGraphFromSorted(x,xo,5-i))\r\n    x.sort()\r\n    printEvent('Graphed another...')\r\n\r\nword1 = 'scale'\r\nword2 = 'cloud'\r\n\r\nsp = g.get_shortest_paths(xo[word1])\r\nfor i in sp[xo[word2]]:\r\n    print ox[i]\r\nprint len(sp[xo[word2]])-1\r\nprintEvent('Finished Program 1.')\r\n\r\nword3 = 'prove'\r\n\r\nsp = g.get_shortest_paths(xo[word3])\r\n\r\nl = []\r\nfor i in sp:\r\n    if len(i)>len(l):\r\n        l = i\r\nfor i in l:\r\n    print ox[i]\r\nprint len(l)-1    \r\n\r\nprintEvent('Finished Program 2.')", "problem": 5}}, {"pk": 52, "model": "challenges.solution", "fields": {"language": 23, "title": "Slow and simple, just like me", "author": 62, "submitted": "2010-10-24", "source": "# By GeDaMo\r\n#\r\n# Slow but it works\r\n# Building the neighbour lists is the slowest part\r\n\r\nimport sys\r\n\r\nneighbours = {}\r\ndistance = {}\r\nprevious = {}\r\n\r\ndef getNeighbours(w):\r\n  n = []\r\n  for k, v in neighbours.iteritems():\r\n    d = sum(map(lambda x, y: x != y, w, k))\r\n    if d == 1:\r\n      v.append(w)\r\n      n.append(k)\r\n  return n\r\n\r\n# http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\r\ndef Dijkstra(source, target):\r\n  distance[source] = 0\r\n  Q = distance.keys()\r\n  while Q:\r\n    p = sorted((distance[w], w) for w in Q if distance[w] < sys.maxint)\r\n    if not p:\r\n      break\r\n    u = (p[0])[1]\r\n    Q.remove(u)\r\n    for v in neighbours[u]:\r\n      alt = distance[u] + 1\r\n      if alt < distance[v]:\r\n        distance[v] = alt\r\n        previous[v] = u\r\n\r\ndef output(first, last):\r\n  path = []\r\n  u = last\r\n  while previous[u]:\r\n    path = [u] + path\r\n    u = previous[u]\r\n  print first\r\n  for i in path:\r\n    print i\r\n  print len(path)\r\n\r\n\r\ndef main():\r\n  start = \"scale\"\r\n  end = \"cloud\"\r\n\r\n  with open('words.txt', 'r') as f:\r\n    for line in f:\r\n      w = line.strip()\r\n      neighbours[w] = getNeighbours(w)\r\n      distance[w] = sys.maxint\r\n      previous[w] = None\r\n\r\n  Dijkstra(start, end)\r\n  print \"Program 1\"\r\n  output(start, end)\r\n  print\r\n  print \"Program 2\"\r\n  p = sorted((d, w) for w, d in distance.iteritems() if d < sys.maxint)\r\n  output(start, (p[-1])[1])\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n", "problem": 5}}, {"pk": 54, "model": "challenges.solution", "fields": {"language": 23, "title": "Problem 1", "author": 63, "submitted": "2010-10-24", "source": "# Written by praveen (aka h0x5f3759df from ##proggit on freenode)\r\n# uses NetworkX http://networkx.lanl.gov/\r\n# Eg: python demo.py scale cloud\r\n# Word Ladders Mini Challenge problem 1\r\n\r\nimport networkx as nx\r\nimport sys\r\n\r\n# Calculate hamming distance\r\ndef hamming_distance(s1, s2):\r\n    assert len(s1) == len(s2)\r\n    return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))\r\n\r\n# Exit if not the number of command line options is 3\r\nif not len(sys.argv) == 3: sys.exit(1)\r\nf = open('words.txt')\r\nG = nx.Graph();\r\n# Add the words to the graph\r\nfor st in f:\r\n    G.add_node(st.rstrip())\r\n# Check if the graph has the given nodes\r\nif not G.has_node(sys.argv[1]) and G.has_node(sys.argv[2]): sys.exit(2)\r\n# Okay, make edges between nodes with hamming distance == 1\r\nwords = G.nodes()\r\nfor i in range(len(words)-1):\r\n    for j in range(i+1,len(words)):\r\n    \tif(hamming_distance(words[i],words[j]) == 1): \r\n\t    G.add_edge(words[i],words[j])\r\n# freeze the graph\r\nG = nx.freeze(G);\r\n# Run the shortest path\r\nres = nx.shortest_path(G, source=sys.argv[1], target=sys.argv[2])\r\n# print the answer, Fuck yeah!\r\nprint('Length: %d'%(len(res)-1))\r\nfor st in res: print(st)\r\n", "problem": 5}}, {"pk": 55, "model": "challenges.solution", "fields": {"language": 23, "title": "Problem 2", "author": 63, "submitted": "2010-10-24", "source": "# Written by praveen (aka h0x5f3759df from ##proggit on freenode)\r\n# uses NetworkX http://networkx.lanl.gov/\r\n# Eg: python demo.py scale\r\n# Word Ladders Mini Challenge problem 2\r\n\r\nimport networkx as nx\r\nimport sys\r\n\r\n# Calculate hamming distance\r\n\r\ndef hamming_distance(s1, s2):\r\n    assert len(s1) == len(s2)\r\n    return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))\r\n\r\n# Exit if not number of command line options is 2\r\nif not len(sys.argv) == 2: sys.exit(0)\r\nf = open('words.txt')\r\nG = nx.Graph();\r\n# Add the words to the Graph\r\nfor st in f:\r\n    G.add_node(st.rstrip())\r\n# Check if the Graph has the given node\r\nif not G.has_node(sys.argv[1]): sys.exit(0)\r\n# Okay, make edges between nodes with hamming distance == 1\r\nwords = G.nodes()\r\nfor i in range(len(words)-1):\r\n    for j in range(i+1,len(words)):\r\n    \tif(hamming_distance(words[i],words[j]) == 1): \r\n\t    G.add_edge(words[i],words[j])\r\n# freeze the graph\r\nG = nx.freeze(G)\r\n# Run shortest path\r\nall_paths = nx.shortest_path(G, source=sys.argv[1])\r\n# Retrieve the max length path\r\nans = max(all_paths.values(), key=len)\r\n# print the answer, Fuck yeah!\r\nprint('Length: %d'%(len(ans)-1))\r\nfor st in ans: print(st)\r\n", "problem": 5}}, {"pk": 58, "model": "challenges.solution", "fields": {"language": 27, "title": "Problem 1", "author": 64, "submitted": "2010-10-24", "source": "\r\nrequire 'set'\r\nclass WordLadder\r\n\r\n  def initialize\r\n\r\n    # put words.txt in the same dir as this file\r\n    file = File.new('words.txt')\r\n    @words = file.readlines.collect { |word| word.sub /\\n/, ''  }\r\n  end\r\n\r\n  def is_difference word1, word2, target\r\n    result = 0\r\n    (0 .. (word1.length - 1)).each do |i|\r\n      result += 1 unless word1[i] == word2[i]\r\n      # stop as soon as possible\r\n      return false if result > target\r\n    end\r\n    result == target\r\n  end\r\n\r\n  def find_ladder word1, word2\r\n\r\n    # all the word ladders of size x starting from word1\r\n    trees = [[word1]]\r\n\r\n    words = Set.new\r\n    words.merge @words\r\n\r\n    # go until we can not expand the tree anymore\r\n    while !words.empty?\r\n      next_trees = []\r\n      trees.each do |tree|\r\n        following_words = words.select { |word| is_difference(tree[-1], word, 1)}\r\n\r\n        # return the ladder if we found the target word\r\n        return tree + [word2] if following_words.include? word2\r\n\r\n        # don't need the already used words anymore\r\n        # if we used one of them at a later step, that would result in a longer\r\n        # ladder then the one built at this step\r\n        words.subtract(following_words)\r\n        \r\n        following_words.each { |word| next_trees << tree + [word] }\r\n      end\r\n\r\n      # if we can't expand the tree, there is no solution\r\n      return nil if next_trees.empty?\r\n\r\n      trees = next_trees\r\n    end\r\n\r\n    nil\r\n  end\r\n\r\n  # prints the word ladder between the two inputs\r\n  def print_ladder word1, word2\r\n    ladder = find_ladder word1, word2\r\n    if ladder\r\n      ladder.each { |word| puts word }\r\n      puts ladder.size - 1\r\n    else\r\n      puts word1\r\n      puts 0\r\n    end\r\n  end\r\n\r\nend\r\n\r\n# call this\r\nWordLadder.new.print_ladder('scale', 'cloud')", "problem": 5}}, {"pk": 59, "model": "challenges.solution", "fields": {"language": 27, "title": "Problem 2", "author": 64, "submitted": "2010-10-24", "source": "require 'set'\r\nclass LongestLadder\r\n  def initialize\r\n\r\n    # put words.txt in the same dir as this file\r\n    file = File.new('words.txt')\r\n    @words = file.readlines.collect { |word| word.sub /\\n/, ''  }\r\n  end\r\n\r\n  def is_difference word1, word2, target\r\n    result = 0\r\n    (0 .. (word1.length - 1)).each do |i|\r\n      result += 1 unless word1[i] == word2[i]\r\n      # return as soon as we can\r\n      return false if result > target\r\n    end\r\n    result == target\r\n  end\r\n\r\n  def find_longest_ladders word\r\n\r\n    # all the word ladders of size x starting from word1\r\n    trees = [[word]]\r\n\r\n    words = Set.new\r\n    words.merge @words\r\n\r\n    while true\r\n      next_trees = []\r\n      trees.each do |tree|\r\n        following_words = words.select { |w| is_difference(tree[-1], w, 1)}\r\n\r\n        words.subtract(following_words)\r\n\r\n        following_words.each { |w| next_trees << tree + [w] }\r\n      end\r\n\r\n      # return the longest trees if we can't expand the trees anymore\r\n      return trees if next_trees.empty?\r\n\r\n      trees = next_trees\r\n    end\r\n  end\r\n\r\n  def print_longest_ladders word\r\n    find_longest_ladders(word).each do |ladder|\r\n      ladder.each { |w| puts w }\r\n      puts ladder.size - 1\r\n    end\r\n  end\r\nend\r\n\r\n# use it like this:\r\n# LongestLadder.new.print_longest_ladders \"pries\"", "problem": 5}}, {"pk": 61, "model": "challenges.solution", "fields": {"language": 16, "title": "Problem 1 in 10 ms", "author": 29, "submitted": "2010-10-25", "source": "package com.yoden;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Program {\r\n\t//flip this to true to get performance information\r\n\tpublic static boolean DEBUG = false;\r\n\t\r\n\tstatic class Node {\r\n\t\tfinal String key;\r\n\t\tfinal List<Node> adjacent = new ArrayList<Node>();\r\n\t\t\r\n\t\t//temporary, getting modified up and down town\r\n\t\t//this is used by the BFS path solver\r\n\t\tNode backPointer;\r\n\t\t\r\n\t\tpublic Node(String key) {\r\n\t\t\tsuper();\r\n\t\t\tthis.key = key;\r\n\t\t}\r\n\t}\r\n\t\r\n\tstatic class BFSSolver {\r\n\t\tfinal List<Node> q = new ArrayList<Node>();\r\n\t\t\r\n\t\t/**\r\n\t\t * \tPlease clear the backPointer field on your graph before you call this\r\n\t\t * \r\n\t\t * @param start\r\n\t\t * @param end\r\n\t\t * @return\r\n\t\t */\r\n\t\tpublic List<Node> shortPath(Node start, Node end) {\r\n\t\t\tq.clear();\r\n\t\t\tq.add(start);\r\n\t\t\t\r\n\t\t\twhile(q.size() > 0) {\r\n\t\t\t\tNode curr = q.remove(0);\r\n\t\t\t\t\r\n\t\t\t\tif(curr == end) {\r\n\t\t\t\t\tList<Node> rv = buildBackList(curr);\r\n\t\t\t\t\treturn rv;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor(Node adj : curr.adjacent) {\r\n\t\t\t\t\t\tif(adj.backPointer != null || adj == start) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tadj.backPointer = curr;\r\n\t\t\t\t\t\tq.add(adj);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new ArrayList<Node>();\r\n\t\t}\r\n\r\n\t\tprivate List<Node> buildBackList(Node end) {\r\n\t\t\tList<Node> rv = new ArrayList<Node>();\r\n\t\t\t\r\n\t\t\tNode cursor = end;\r\n\t\t\twhile(cursor != null) {\r\n\t\t\t\trv.add(0, cursor);\r\n\t\t\t\tcursor = cursor.backPointer;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t}\r\n\t\r\n\tstatic class Graph {\r\n\t\t//I'm making assumptions about there not being nulls in here\r\n\t\tfinal Map<String, Node> nodeMap = new HashMap<String, Node>();\r\n\t\t\r\n\t\tpublic List<String> shortPath(String start, String end) {\r\n\t\t\t//since all edge weights are 1, BFS is equivalent to Dijkstra's \r\n\t\t\tBFSSolver solver = new BFSSolver();\r\n\t\t\t\r\n\t\t\tList<Node> shortNodes;\r\n\t\t\tshortNodes = solver.shortPath(nodeMap.get(start), nodeMap.get(end));\r\n\t\t\t\r\n\t\t\tList<String> rv = new ArrayList<String>();\r\n\t\t\tfor(Node node : shortNodes) {\r\n\t\t\t\trv.add(node.key);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn rv;\r\n\t\t}\r\n\t\t\r\n\t\tpublic List<String> longPath(String start) {\r\n\t\t\tthrow new RuntimeException();\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * \tThe key idea here is to first hash each word based on substrings\r\n\t\t * \tThen we can build the graph in O(n + k^2) instead of O(n^2),\r\n\t\t * \twhere k is the average degree of the nodes in the resulting graph\r\n\t\t * \r\n\t\t * @param words\r\n\t\t */\r\n\t\tvoid build(List<String> words) {\r\n\t\t\tMap<String, List<String>> no_0 = new HashMap<String, List<String>>();\r\n\t\t\tMap<String, List<String>> no_1 = new HashMap<String, List<String>>();\r\n\t\t\tMap<String, List<String>> no_2 = new HashMap<String, List<String>>();\r\n\t\t\tMap<String, List<String>> no_3 = new HashMap<String, List<String>>();\r\n\t\t\tMap<String, List<String>> no_4 = new HashMap<String, List<String>>();\r\n\t\t\t\r\n\t\t\tfor(String word : words) {\r\n\t\t\t\t//this could be sped up by being tricky with hashcodes and changing\r\n\t\t\t\t//the key of the map... but meh... not worth it\r\n\t\t\t\tString wNo_0 = word.substring(1);\r\n\t\t\t\tString wNo_1 = word.charAt(0) + word.substring(2);\r\n\t\t\t\tString wNo_2 = word.substring(0,2) + word.substring(3,5);\r\n\t\t\t\tString wNo_3 = word.substring(0,3) + word.substring(4,5);\r\n\t\t\t\tString wNo_4 = word.substring(0,4);\r\n\r\n\t\t\t\tputNicelyList(wNo_0, word, no_0);\r\n\t\t\t\tputNicelyList(wNo_1, word, no_1);\r\n\t\t\t\tputNicelyList(wNo_2, word, no_2);\r\n\t\t\t\tputNicelyList(wNo_3, word, no_3);\r\n\t\t\t\tputNicelyList(wNo_4, word, no_4);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tList<Map<String, List<String>>> allLists;\r\n\t\t\tallLists = new ArrayList<Map<String,List<String>>>();\r\n\t\t\tallLists.add(no_0);\r\n\t\t\tallLists.add(no_1);\r\n\t\t\tallLists.add(no_2);\r\n\t\t\tallLists.add(no_3);\r\n\t\t\tallLists.add(no_4);\r\n\t\t\t\r\n\t\t\t//now, all we need to do is connect everything\r\n\t\t\t//which hashed to the same bucket\r\n\t\t\t\r\n\t\t\tfor(Map<String, List<String>> map : allLists) {\r\n\t\t\t\tfor(String key : map.keySet()) {\r\n\t\t\t\t\tList<String> connected = map.get(key);\r\n\t\t\t\t\tfor(int i=0; i<connected.size()-1; i++) {\r\n\t\t\t\t\t\tString a = connected.get(i);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(int j=i+1; j<connected.size(); j++) {\r\n\t\t\t\t\t\t\tString b = connected.get(j);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconnect(a,b);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate void connect(String a, String b) {\r\n\t\t\tNode aN = getOrCreateNode(a);\r\n\t\t\tNode bN = getOrCreateNode(b);\r\n\t\t\t\r\n\t\t\taN.adjacent.add(bN);\r\n\t\t\tbN.adjacent.add(aN);\r\n\t\t}\r\n\r\n\t\tprivate Node getOrCreateNode(String a) {\r\n\t\t\tNode node = nodeMap.get(a);\r\n\t\t\tif(node != null) {\r\n\t\t\t\treturn node;\r\n\t\t\t} else {\r\n\t\t\t\tnode = new Node(a);\r\n\t\t\t\tnodeMap.put(a, node);\r\n\t\t\t\t\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void putNicelyList(\r\n\t\t\t\tString key, \r\n\t\t\t\tString word,\r\n\t\t\t\tMap<String, List<String>> map) {\r\n\t\t\t\r\n\t\t\tList<String> list = map.get(key);\r\n\t\t\tif(list == null) {\r\n\t\t\t\tlist = new ArrayList<String>();\r\n\t\t\t\tmap.put(key, list);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlist.add(word);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tif(DEBUG) {\r\n\t\t\t//simulate a \"warm\" jvm which is more indicative of real-world performance\r\n\t\t\tDEBUG = false;\r\n\t\t\tfor(int i=0; i<100; i++) {\r\n\t\t\t\trunMain(args, false);\r\n\t\t\t}\r\n\t\t\tDEBUG = true;\r\n\t\t}\r\n\t\trunMain(args, true);\r\n\t}\r\n\r\n\tprivate static void runMain(String[] args, boolean print) throws FileNotFoundException, IOException {\r\n\t\tList<String> words = new ArrayList<String>();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"words.txt\"));\r\n\r\n\t\tlong startTimeRead = System.nanoTime();\r\n\t\tString line;\r\n\t\twhile((line = br.readLine()) != null) {\r\n\t\t\twords.add(line);\r\n\t\t}\r\n\t\tlong endTimeRead = System.nanoTime();\r\n\t\t\r\n\t\tGraph g = new Graph();\r\n\t\t\r\n\t\tlong startTimeBuild = System.nanoTime();\r\n\t\tg.build(words);\r\n\t\tlong endTimeBuild = System.nanoTime();\r\n\t\t\r\n\t\tString a = args[1];\r\n\r\n\t\tlong startTimeSearch = System.nanoTime();\r\n\t\t\r\n\t\tif(args.length == 2) {\r\n\t\t\tdoIt(g, a, null, print);\r\n\t\t} else {\r\n\t\t\tdoIt(g, a, args[2], print);\r\n\t\t}\r\n\t\t\r\n\t\tlong endTimeSearch = System.nanoTime();\r\n\t\t\r\n\t\tif(DEBUG) {\r\n\t\t\tSystem.out.println(\"Read time: \" + (endTimeRead-startTimeRead) / 1000 / 1000);\r\n\t\t\tSystem.out.println(\"Build time: \" + (endTimeBuild-startTimeBuild) / 1000 / 1000);\r\n\t\t\tSystem.out.println(\"Search time: \" + (endTimeSearch-startTimeSearch) / 1000 / 1000);\r\n\t\t\tSystem.out.println(\"Total time: \" + (endTimeSearch - startTimeRead) / 1000 / 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void doIt(Graph g, String a, String b, boolean print) {\r\n\t\tList<String> path;\r\n\t\tif(b != null) {\r\n\t\t\tpath = g.shortPath(a, b);\r\n\t\t} else {\r\n\t\t\tpath = g.longPath(a);\r\n\t\t}\r\n\t\t\r\n\t\tif(print) {\r\n\t\t\tif(path.size() == 0) {\r\n\t\t\t\tSystem.out.println(a);\r\n\t\t\t\tSystem.out.println(\"0\");\r\n\t\t\t} else {\r\n\t\t\t\tfor(String s : path) {\r\n\t\t\t\t\tSystem.out.println(s);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//have to subtract 1 because length is \"# transformations\"\r\n\t\t\t\tSystem.out.println(path.size()-1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "problem": 5}}, {"pk": 62, "model": "challenges.solution", "fields": {"language": 16, "title": "Solution for Problem One", "author": 66, "submitted": "2010-10-25", "source": "/**\r\n *\r\n * @author koryk\r\n */\r\nimport java.util.*;\r\npublic class WordLaddersOne{\r\n\tprivate static final int WORDLENGTH = 5;\r\n//so i didn't have to load the file - lol ^_^\r\n        private String[] dict = {\"which\",\"there\",\"their\",\"about\",\"would\",\"these\",\"other\",\"words\",\"could\",\"write\",\"first\",\"water\",\"after\",\"where\",\"right\",\"think\",\"three\",\"years\",\"place\",\"sound\",\"great\",\"again\",\"still\",\"every\",\"small\",\"found\",\"those\",\"never\",\"under\",\"might\",\"while\",\"house\",\"world\",\"below\",\"asked\",\"going\",\"large\",\"until\",\"along\",\"shall\",\"being\",\"often\",\"earth\",\"began\",\"since\",\"study\",\"night\",\"light\",\"above\",\"paper\",\"parts\",\"young\",\"story\",\"point\",\"times\",\"heard\",\"whole\",\"white\",\"given\",\"means\",\"music\",\"miles\",\"thing\",\"today\",\"later\",\"using\",\"money\",\"lines\",\"order\",\"group\",\"among\",\"learn\",\"known\",\"space\",\"table\",\"early\",\"trees\",\"short\",\"hands\",\"state\",\"black\",\"shown\",\"stood\",\"front\",\"voice\",\"kinds\",\"makes\",\"comes\",\"close\",\"power\",\"lived\",\"vowel\",\"taken\",\"built\",\"heart\",\"ready\",\"quite\",\"class\",\"bring\",\"round\",\"horse\",\"shows\",\"piece\",\"green\",\"stand\",\"birds\",\"start\",\"river\",\"tried\",\"least\",\"field\",\"whose\",\"girls\",\"leave\",\"added\",\"color\",\"third\",\"hours\",\"moved\",\"plant\",\"doing\",\"names\",\"forms\",\"heavy\",\"ideas\",\"cried\",\"check\",\"floor\",\"begin\",\"woman\",\"alone\",\"plane\",\"spell\",\"watch\",\"carry\",\"wrote\",\"clear\",\"named\",\"books\",\"child\",\"glass\",\"human\",\"takes\",\"party\",\"build\",\"seems\",\"blood\",\"sides\",\"seven\",\"mouth\",\"solve\",\"north\",\"value\",\"death\",\"maybe\",\"happy\",\"tells\",\"gives\",\"looks\",\"shape\",\"lives\",\"steps\",\"areas\",\"sense\",\"speak\",\"force\",\"ocean\",\"speed\",\"women\",\"metal\",\"south\",\"grass\",\"scale\",\"cells\",\"lower\",\"sleep\",\"wrong\",\"pages\",\"ships\",\"needs\",\"rocks\",\"eight\",\"major\",\"level\",\"total\",\"ahead\",\"reach\",\"stars\",\"store\",\"sight\",\"terms\",\"catch\",\"works\",\"board\",\"cover\",\"songs\",\"equal\",\"stone\",\"waves\",\"guess\",\"dance\",\"spoke\",\"break\",\"cause\",\"radio\",\"weeks\",\"lands\",\"basic\",\"liked\",\"trade\",\"fresh\",\"final\",\"fight\",\"meant\",\"drive\",\"spent\",\"local\",\"waxes\",\"knows\",\"train\",\"bread\",\"homes\",\"teeth\",\"coast\",\"thick\",\"brown\",\"clean\",\"quiet\",\"sugar\",\"facts\",\"steel\",\"forth\",\"rules\",\"notes\",\"units\",\"peace\",\"month\",\"verbs\",\"seeds\",\"helps\",\"sharp\",\"visit\",\"woods\",\"chief\",\"walls\",\"cross\",\"wings\",\"grown\",\"cases\",\"foods\",\"crops\",\"fruit\",\"stick\",\"wants\",\"stage\",\"sheep\",\"nouns\",\"plain\",\"drink\",\"bones\",\"apart\",\"turns\",\"moves\",\"touch\",\"angle\",\"based\",\"range\",\"marks\",\"tired\",\"older\",\"farms\",\"spend\",\"shoes\",\"goods\",\"chair\",\"twice\",\"cents\",\"empty\",\"alike\",\"style\",\"broke\",\"pairs\",\"count\",\"enjoy\",\"score\",\"shore\",\"roots\",\"paint\",\"heads\",\"shook\",\"serve\",\"angry\",\"crowd\",\"wheel\",\"quick\",\"dress\",\"share\",\"alive\",\"noise\",\"solid\",\"cloth\",\"signs\",\"hills\",\"types\",\"drawn\",\"worth\",\"truck\",\"piano\",\"upper\",\"loved\",\"usual\",\"faces\",\"drove\",\"cabin\",\"boats\",\"towns\",\"proud\",\"court\",\"model\",\"prime\",\"fifty\",\"plans\",\"yards\",\"prove\",\"tools\",\"price\",\"sheet\",\"smell\",\"boxes\",\"raise\",\"match\",\"truth\",\"roads\",\"threw\",\"enemy\",\"lunch\",\"chart\",\"scene\",\"graph\",\"doubt\",\"guide\",\"winds\",\"block\",\"grain\",\"smoke\",\"mixed\",\"games\",\"wagon\",\"sweet\",\"topic\",\"extra\",\"plate\",\"title\",\"knife\",\"fence\",\"falls\",\"cloud\",\"wheat\",\"plays\",\"enter\",\"broad\",\"steam\",\"atoms\",\"press\",\"lying\",\"basis\",\"clock\",\"taste\",\"grows\",\"thank\",\"storm\",\"agree\",\"brain\",\"track\",\"smile\",\"funny\",\"beach\",\"stock\",\"hurry\",\"saved\",\"sorry\",\"giant\",\"trail\",\"offer\",\"ought\",\"rough\",\"daily\",\"avoid\",\"keeps\",\"throw\",\"allow\",\"cream\",\"laugh\",\"edges\",\"teach\",\"frame\",\"bells\",\"dream\",\"magic\",\"occur\",\"ended\",\"chord\",\"false\",\"skill\",\"holes\",\"dozen\",\"brave\",\"apple\",\"climb\",\"outer\",\"pitch\",\"ruler\",\"holds\",\"fixed\",\"costs\",\"calls\",\"blank\",\"staff\",\"labor\",\"eaten\",\"youth\",\"tones\",\"honor\",\"globe\",\"gases\",\"doors\",\"poles\",\"loose\",\"apply\",\"tears\",\"exact\",\"brush\",\"chest\",\"layer\",\"whale\",\"minor\",\"faith\",\"tests\",\"judge\",\"items\",\"worry\",\"waste\",\"hoped\",\"strip\",\"begun\",\"aside\",\"lakes\",\"bound\",\"depth\",\"candy\",\"event\",\"worse\",\"aware\",\"shell\",\"rooms\",\"ranch\",\"image\",\"snake\",\"aloud\",\"dried\",\"likes\",\"motor\",\"pound\",\"knees\",\"refer\",\"fully\",\"chain\",\"shirt\",\"flour\",\"drops\",\"spite\",\"orbit\",\"banks\",\"shoot\",\"curve\",\"tribe\",\"tight\",\"blind\",\"slept\",\"shade\",\"claim\",\"flies\",\"theme\",\"queen\",\"fifth\",\"union\",\"hence\",\"straw\",\"entry\",\"issue\",\"birth\",\"feels\",\"anger\",\"brief\",\"rhyme\",\"glory\",\"guard\",\"flows\",\"flesh\",\"owned\",\"trick\",\"yours\",\"sizes\",\"noted\",\"width\",\"burst\",\"route\",\"lungs\",\"uncle\",\"bears\",\"royal\",\"kings\",\"forty\",\"trial\",\"cards\",\"brass\",\"opera\",\"chose\",\"owner\",\"vapor\",\"beats\",\"mouse\",\"tough\",\"wires\",\"meter\",\"tower\",\"finds\",\"inner\",\"stuck\",\"arrow\",\"poems\",\"label\",\"swing\",\"solar\",\"truly\",\"tense\",\"beans\",\"split\",\"rises\",\"weigh\",\"hotel\",\"stems\",\"pride\",\"swung\",\"grade\",\"digit\",\"badly\",\"boots\",\"pilot\",\"sales\",\"swept\",\"lucky\",\"prize\",\"stove\",\"tubes\",\"acres\",\"wound\",\"steep\",\"slide\",\"trunk\",\"error\",\"porch\",\"slave\",\"exist\",\"faced\",\"mines\",\"marry\",\"juice\",\"raced\",\"waved\",\"goose\",\"trust\",\"fewer\",\"favor\",\"mills\",\"views\",\"joint\",\"eager\",\"spots\",\"blend\",\"rings\",\"adult\",\"index\",\"nails\",\"horns\",\"balls\",\"flame\",\"rates\",\"drill\",\"trace\",\"skins\",\"waxed\",\"seats\",\"stuff\",\"ratio\",\"minds\",\"dirty\",\"silly\",\"coins\",\"hello\",\"trips\",\"leads\",\"rifle\",\"hopes\",\"bases\",\"shine\",\"bench\",\"moral\",\"fires\",\"meals\",\"shake\",\"shops\",\"cycle\",\"movie\",\"slope\",\"canoe\",\"teams\",\"folks\",\"fired\",\"bands\",\"thumb\",\"shout\",\"canal\",\"habit\",\"reply\",\"ruled\",\"fever\",\"crust\",\"shelf\",\"walks\",\"midst\",\"crack\",\"print\",\"tales\",\"coach\",\"stiff\",\"flood\",\"verse\",\"awake\",\"rocky\",\"march\",\"fault\",\"swift\",\"faint\",\"civil\",\"ghost\",\"feast\",\"blade\",\"limit\",\"germs\",\"reads\",\"ducks\",\"dairy\",\"worst\",\"gifts\",\"lists\",\"stops\",\"rapid\",\"brick\",\"claws\",\"beads\",\"beast\",\"skirt\",\"cakes\",\"lions\",\"frogs\",\"tries\",\"nerve\",\"grand\",\"armed\",\"treat\",\"honey\",\"moist\",\"legal\",\"penny\",\"crown\",\"shock\",\"taxes\",\"sixty\",\"altar\",\"pulls\",\"sport\",\"drums\",\"talks\",\"dying\",\"dates\",\"drank\",\"blows\",\"lever\",\"wages\",\"proof\",\"drugs\",\"tanks\",\"sings\",\"tails\",\"pause\",\"herds\",\"arose\",\"hated\",\"clues\",\"novel\",\"shame\",\"burnt\",\"races\",\"flash\",\"weary\",\"heels\",\"token\",\"coats\",\"spare\",\"shiny\",\"alarm\",\"dimes\",\"sixth\",\"clerk\",\"mercy\",\"sunny\",\"guest\",\"float\",\"shone\",\"pipes\",\"worms\",\"bills\",\"sweat\",\"suits\",\"smart\",\"upset\",\"rains\",\"sandy\",\"rainy\",\"parks\",\"sadly\",\"fancy\",\"rider\",\"unity\",\"bunch\",\"rolls\",\"crash\",\"craft\",\"newly\",\"gates\",\"hatch\",\"paths\",\"funds\",\"wider\",\"grace\",\"grave\",\"tides\",\"admit\",\"shift\",\"sails\",\"pupil\",\"tiger\",\"angel\",\"cruel\",\"agent\",\"drama\",\"urged\",\"patch\",\"nests\",\"vital\",\"sword\",\"blame\",\"weeds\",\"screw\",\"vocal\",\"bacon\",\"chalk\",\"cargo\",\"crazy\",\"acted\",\"goats\",\"arise\",\"witch\",\"loves\",\"queer\",\"dwell\",\"backs\",\"ropes\",\"shots\",\"merry\",\"phone\",\"cheek\",\"peaks\",\"ideal\",\"beard\",\"eagle\",\"creek\",\"cries\",\"ashes\",\"stall\",\"yield\",\"mayor\",\"opens\",\"input\",\"fleet\",\"tooth\",\"cubic\",\"wives\",\"burns\",\"poets\",\"apron\",\"spear\",\"organ\",\"cliff\",\"stamp\",\"paste\",\"rural\",\"baked\",\"chase\",\"slice\",\"slant\",\"knock\",\"noisy\",\"sorts\",\"stays\",\"wiped\",\"blown\",\"piled\",\"clubs\",\"cheer\",\"widow\",\"twist\",\"tenth\",\"hides\",\"comma\",\"sweep\",\"spoon\",\"stern\",\"crept\",\"maple\",\"deeds\",\"rides\",\"muddy\",\"crime\",\"jelly\",\"ridge\",\"drift\",\"dusty\",\"devil\",\"tempo\",\"humor\",\"sends\",\"steal\",\"tents\",\"waist\",\"roses\",\"reign\",\"noble\",\"cheap\",\"dense\",\"linen\",\"geese\",\"woven\",\"posts\",\"hired\",\"wrath\",\"salad\",\"bowed\",\"tires\",\"shark\",\"belts\",\"grasp\",\"blast\",\"polar\",\"fungi\",\"tends\",\"pearl\",\"loads\",\"jokes\",\"veins\",\"frost\",\"hears\",\"loses\",\"hosts\",\"diver\",\"phase\",\"toads\",\"alert\",\"tasks\",\"seams\",\"coral\",\"focus\",\"naked\",\"puppy\",\"jumps\",\"spoil\",\"quart\",\"macro\",\"fears\",\"flung\",\"spark\",\"vivid\",\"brook\",\"steer\",\"spray\",\"decay\",\"ports\",\"socks\",\"urban\",\"goals\",\"grant\",\"minus\",\"films\",\"tunes\",\"shaft\",\"firms\",\"skies\",\"bride\",\"wreck\",\"flock\",\"stare\",\"hobby\",\"bonds\",\"dared\",\"faded\",\"thief\",\"crude\",\"pants\",\"flute\",\"votes\",\"tonal\",\"radar\",\"wells\",\"skull\",\"hairs\",\"argue\",\"wears\",\"dolls\",\"voted\",\"caves\",\"cared\",\"broom\",\"scent\",\"panel\",\"fairy\",\"olive\",\"bends\",\"prism\",\"lamps\",\"cable\",\"peach\",\"ruins\",\"rally\",\"schwa\",\"lambs\",\"sells\",\"cools\",\"draft\",\"charm\",\"limbs\",\"brake\",\"gazed\",\"cubes\",\"delay\",\"beams\",\"fetch\",\"ranks\",\"array\",\"harsh\",\"camel\",\"vines\",\"picks\",\"naval\",\"purse\",\"rigid\",\"crawl\",\"toast\",\"soils\",\"sauce\",\"basin\",\"ponds\",\"twins\",\"wrist\",\"fluid\",\"pools\",\"brand\",\"stalk\",\"robot\",\"reeds\",\"hoofs\",\"buses\",\"sheer\",\"grief\",\"bloom\",\"dwelt\",\"melts\",\"risen\",\"flags\",\"knelt\",\"fiber\",\"roofs\",\"freed\",\"armor\",\"piles\",\"aimed\",\"algae\",\"twigs\",\"lemon\",\"ditch\",\"drunk\",\"rests\",\"chill\",\"slain\",\"panic\",\"cords\",\"tuned\",\"crisp\",\"ledge\",\"dived\",\"swamp\",\"clung\",\"stole\",\"molds\",\"yarns\",\"liver\",\"gauge\",\"breed\",\"stool\",\"gulls\",\"awoke\",\"gross\",\"diary\",\"rails\",\"belly\",\"trend\",\"flask\",\"stake\",\"fried\",\"draws\",\"actor\",\"handy\",\"bowls\",\"haste\",\"scope\",\"deals\",\"knots\",\"moons\",\"essay\",\"thump\",\"hangs\",\"bliss\",\"dealt\",\"gains\",\"bombs\",\"clown\",\"palms\",\"cones\",\"roast\",\"tidal\",\"bored\",\"chant\",\"acids\",\"dough\",\"camps\",\"swore\",\"lover\",\"hooks\",\"males\",\"cocoa\",\"punch\",\"award\",\"reins\",\"ninth\",\"noses\",\"links\",\"drain\",\"fills\",\"nylon\",\"lunar\",\"pulse\",\"flown\",\"elbow\",\"fatal\",\"sites\",\"moths\",\"meats\",\"foxes\",\"mined\",\"attic\",\"fiery\",\"mount\",\"usage\",\"swear\",\"snowy\",\"rusty\",\"scare\",\"traps\",\"relax\",\"react\",\"valid\",\"robin\",\"cease\",\"gills\",\"prior\",\"safer\",\"polio\",\"loyal\",\"swell\",\"salty\",\"marsh\",\"vague\",\"weave\",\"mound\",\"seals\",\"mules\",\"virus\",\"scout\",\"acute\",\"windy\",\"stout\",\"folds\",\"seize\",\"hilly\",\"joins\",\"pluck\",\"stack\",\"lords\",\"dunes\",\"burro\",\"hawks\",\"trout\",\"feeds\",\"scarf\",\"halls\",\"coals\",\"towel\",\"souls\",\"elect\",\"buggy\",\"pumps\",\"loans\",\"spins\",\"files\",\"oxide\",\"pains\",\"photo\",\"rival\",\"flats\",\"syrup\",\"rodeo\",\"sands\",\"moose\",\"pints\",\"curly\",\"comic\",\"cloak\",\"onion\",\"clams\",\"scrap\",\"didst\",\"couch\",\"codes\",\"fails\",\"ounce\",\"lodge\",\"greet\",\"gypsy\",\"utter\",\"paved\",\"zones\",\"fours\",\"alley\",\"tiles\",\"bless\",\"crest\",\"elder\",\"kills\",\"yeast\",\"erect\",\"bugle\",\"medal\",\"roles\",\"hound\",\"snail\",\"alter\",\"ankle\",\"relay\",\"loops\",\"zeros\",\"bites\",\"modes\",\"debts\",\"realm\",\"glove\",\"rayon\",\"swims\",\"poked\",\"stray\",\"lifts\",\"maker\",\"lumps\",\"graze\",\"dread\",\"barns\",\"docks\",\"masts\",\"pours\",\"wharf\",\"curse\",\"plump\",\"robes\",\"seeks\",\"cedar\",\"curls\",\"jolly\",\"myths\",\"cages\",\"gloom\",\"locks\",\"pedal\",\"beets\",\"crows\",\"anode\",\"slash\",\"creep\",\"rowed\",\"chips\",\"fists\",\"wines\",\"cares\",\"valve\",\"newer\",\"motel\",\"ivory\",\"necks\",\"clamp\",\"barge\",\"blues\",\"alien\",\"frown\",\"strap\",\"crews\",\"shack\",\"gonna\",\"saves\",\"stump\",\"ferry\",\"idols\",\"cooks\",\"juicy\",\"glare\",\"carts\",\"alloy\",\"bulbs\",\"lawns\",\"lasts\",\"fuels\",\"oddly\",\"crane\",\"filed\",\"weird\",\"shawl\",\"slips\",\"troop\",\"bolts\",\"suite\",\"sleek\",\"quilt\",\"tramp\",\"blaze\",\"atlas\",\"odors\",\"scrub\",\"crabs\",\"probe\",\"logic\",\"adobe\",\"exile\",\"rebel\",\"grind\",\"sting\",\"spine\",\"cling\",\"desks\",\"grove\",\"leaps\",\"prose\",\"lofty\",\"agony\",\"snare\",\"tusks\",\"bulls\",\"moods\",\"humid\",\"finer\",\"dimly\",\"plank\",\"china\",\"pines\",\"guilt\",\"sacks\",\"brace\",\"quote\",\"lathe\",\"gaily\",\"fonts\",\"scalp\",\"adopt\",\"foggy\",\"ferns\",\"grams\",\"clump\",\"perch\",\"tumor\",\"teens\",\"crank\",\"fable\",\"hedge\",\"genes\",\"sober\",\"boast\",\"tract\",\"cigar\",\"unite\",\"owing\",\"thigh\",\"haiku\",\"swish\",\"dikes\",\"wedge\",\"booth\",\"eased\",\"frail\",\"cough\",\"tombs\",\"darts\",\"forts\",\"choir\",\"pouch\",\"pinch\",\"hairy\",\"buyer\",\"torch\",\"vigor\",\"waltz\",\"heats\",\"herbs\",\"users\",\"flint\",\"click\",\"madam\",\"bleak\",\"blunt\",\"aided\",\"lacks\",\"masks\",\"waded\",\"risks\",\"nurse\",\"chaos\",\"sewed\",\"cured\",\"ample\",\"lease\",\"steak\",\"sinks\",\"merit\",\"bluff\",\"bathe\",\"gleam\",\"bonus\",\"colts\",\"shear\",\"gland\",\"silky\",\"skate\",\"birch\",\"anvil\",\"sleds\",\"groan\",\"maids\",\"meets\",\"speck\",\"hymns\",\"hints\",\"drown\",\"bosom\",\"slick\",\"quest\",\"coils\",\"spied\",\"snows\",\"stead\",\"snack\",\"plows\",\"blond\",\"tamed\",\"thorn\",\"waits\",\"glued\",\"banjo\",\"tease\",\"arena\",\"bulky\",\"carve\",\"stunt\",\"warms\",\"shady\",\"razor\",\"folly\",\"leafy\",\"notch\",\"fools\",\"otter\",\"pears\",\"flush\",\"genus\",\"ached\",\"fives\",\"flaps\",\"spout\",\"smote\",\"fumes\",\"adapt\",\"cuffs\",\"tasty\",\"stoop\",\"clips\",\"disks\",\"sniff\",\"lanes\",\"brisk\",\"imply\",\"demon\",\"super\",\"furry\",\"raged\",\"growl\",\"texts\",\"hardy\",\"stung\",\"typed\",\"hates\",\"wiser\",\"timid\",\"serum\",\"beaks\",\"rotor\",\"casts\",\"baths\",\"glide\",\"plots\",\"trait\",\"resin\",\"slums\",\"lyric\",\"puffs\",\"decks\",\"brood\",\"mourn\",\"aloft\",\"abuse\",\"whirl\",\"edged\",\"ovary\",\"quack\",\"heaps\",\"slang\",\"await\",\"civic\",\"saint\",\"bevel\",\"sonar\",\"aunts\",\"packs\",\"froze\",\"tonic\",\"corps\",\"swarm\",\"frank\",\"repay\",\"gaunt\",\"wired\",\"niece\",\"cello\",\"needy\",\"chuck\",\"stony\",\"media\",\"surge\",\"hurts\",\"repel\",\"husky\",\"dated\",\"hunts\",\"mists\",\"exert\",\"dries\",\"mates\",\"sworn\",\"baker\",\"spice\",\"oasis\",\"boils\",\"spurs\",\"doves\",\"sneak\",\"paces\",\"colon\",\"siege\",\"strum\",\"drier\",\"cacao\",\"humus\",\"bales\",\"piped\",\"nasty\",\"rinse\",\"boxer\",\"shrub\",\"amuse\",\"tacks\",\"cited\",\"slung\",\"delta\",\"laden\",\"larva\",\"rents\",\"yells\",\"spool\",\"spill\",\"crush\",\"jewel\",\"snaps\",\"stain\",\"kicks\",\"tying\",\"slits\",\"rated\",\"eerie\",\"smash\",\"plums\",\"zebra\",\"earns\",\"bushy\",\"scary\",\"squad\",\"tutor\",\"silks\",\"slabs\",\"bumps\",\"evils\",\"fangs\",\"snout\",\"peril\",\"pivot\",\"yacht\",\"lobby\",\"jeans\",\"grins\",\"viola\",\"liner\",\"comet\",\"scars\",\"chops\",\"raids\",\"eater\",\"slate\",\"skips\",\"soles\",\"misty\",\"urine\",\"knobs\",\"sleet\",\"holly\",\"pests\",\"forks\",\"grill\",\"trays\",\"pails\",\"borne\",\"tenor\",\"wares\",\"carol\",\"woody\",\"canon\",\"wakes\",\"kitty\",\"miner\",\"polls\",\"shaky\",\"nasal\",\"scorn\",\"chess\",\"taxis\",\"crate\",\"shyly\",\"tulip\",\"forge\",\"nymph\",\"budge\",\"lowly\",\"abide\",\"depot\",\"oases\",\"asses\",\"sheds\",\"fudge\",\"pills\",\"rivet\",\"thine\",\"groom\",\"lanky\",\"boost\",\"broth\",\"heave\",\"gravy\",\"beech\",\"timed\",\"quail\",\"inert\",\"gears\",\"chick\",\"hinge\",\"trash\",\"clash\",\"sighs\",\"renew\",\"bough\",\"dwarf\",\"slows\",\"quill\",\"shave\",\"spore\",\"sixes\",\"chunk\",\"madly\",\"paced\",\"braid\",\"fuzzy\",\"motto\",\"spies\",\"slack\",\"mucus\",\"magma\",\"awful\",\"discs\",\"erase\",\"posed\",\"asset\",\"cider\",\"taper\",\"theft\",\"churn\",\"satin\",\"slots\",\"taxed\",\"bully\",\"sloth\",\"shale\",\"tread\",\"raked\",\"curds\",\"manor\",\"aisle\",\"bulge\",\"loins\",\"stair\",\"tapes\",\"leans\",\"bunks\",\"squat\",\"towed\",\"lance\",\"panes\",\"sakes\",\"heirs\",\"caste\",\"dummy\",\"pores\",\"fauna\",\"crook\",\"poise\",\"epoch\",\"risky\",\"warns\",\"fling\",\"berry\",\"grape\",\"flank\",\"drags\",\"squid\",\"pelts\",\"icing\",\"irony\",\"irons\",\"barks\",\"whoop\",\"choke\",\"diets\",\"whips\",\"tally\",\"dozed\",\"twine\",\"kites\",\"bikes\",\"ticks\",\"riots\",\"roars\",\"vault\",\"looms\",\"scold\",\"blink\",\"dandy\",\"pupae\",\"sieve\",\"spike\",\"ducts\",\"lends\",\"pizza\",\"brink\",\"widen\",\"plumb\",\"pagan\",\"feats\",\"bison\",\"soggy\",\"scoop\",\"argon\",\"nudge\",\"skiff\",\"amber\",\"sexes\",\"rouse\",\"salts\",\"hitch\",\"exalt\",\"leash\",\"dined\",\"chute\",\"snort\",\"gusts\",\"melon\",\"cheat\",\"reefs\",\"llama\",\"lasso\",\"debut\",\"quota\",\"oaths\",\"prone\",\"mixes\",\"rafts\",\"dives\",\"stale\",\"inlet\",\"flick\",\"pinto\",\"brows\",\"untie\",\"batch\",\"greed\",\"chore\",\"stirs\",\"blush\",\"onset\",\"barbs\",\"volts\",\"beige\",\"swoop\",\"paddy\",\"laced\",\"shove\",\"jerky\",\"poppy\",\"leaks\",\"fares\",\"dodge\",\"godly\",\"squaw\",\"affix\",\"brute\",\"nicer\",\"undue\",\"snarl\",\"merge\",\"doses\",\"showy\",\"daddy\",\"roost\",\"vases\",\"swirl\",\"petty\",\"colds\",\"curry\",\"cobra\",\"genie\",\"flare\",\"messy\",\"cores\",\"soaks\",\"ripen\",\"whine\",\"amino\",\"plaid\",\"spiny\",\"mowed\",\"baton\",\"peers\",\"vowed\",\"pious\",\"swans\",\"exits\",\"afoot\",\"plugs\",\"idiom\",\"chili\",\"rites\",\"serfs\",\"cleft\",\"berth\",\"grubs\",\"annex\",\"dizzy\",\"hasty\",\"latch\",\"wasps\",\"mirth\",\"baron\",\"plead\",\"aloof\",\"aging\",\"pixel\",\"bared\",\"mummy\",\"hotly\",\"auger\",\"buddy\",\"chaps\",\"badge\",\"stark\",\"fairs\",\"gully\",\"mumps\",\"emery\",\"filly\",\"ovens\",\"drone\",\"gauze\",\"idiot\",\"fussy\",\"annoy\",\"shank\",\"gouge\",\"bleed\",\"elves\",\"roped\",\"unfit\",\"baggy\",\"mower\",\"scant\",\"grabs\",\"fleas\",\"lousy\",\"album\",\"sawed\",\"cooky\",\"murky\",\"infer\",\"burly\",\"waged\",\"dingy\",\"brine\",\"kneel\",\"creak\",\"vanes\",\"smoky\",\"spurt\",\"combs\",\"easel\",\"laces\",\"humps\",\"rumor\",\"aroma\",\"horde\",\"swiss\",\"leapt\",\"opium\",\"slime\",\"afire\",\"pansy\",\"mares\",\"soaps\",\"husks\",\"snips\",\"hazel\",\"lined\",\"cafes\",\"naive\",\"wraps\",\"sized\",\"piers\",\"beset\",\"agile\",\"tongs\",\"steed\",\"fraud\",\"booty\",\"valor\",\"downy\",\"witty\",\"mossy\",\"psalm\",\"scuba\",\"tours\",\"polka\",\"milky\",\"gaudy\",\"shrug\",\"tufts\",\"wilds\",\"laser\",\"truss\",\"hares\",\"creed\",\"lilac\",\"siren\",\"tarry\",\"bribe\",\"swine\",\"muted\",\"flips\",\"cures\",\"sinew\",\"boxed\",\"hoops\",\"gasps\",\"hoods\",\"niche\",\"yucca\",\"glows\",\"sewer\",\"whack\",\"fuses\",\"gowns\",\"droop\",\"bucks\",\"pangs\",\"mails\",\"whisk\",\"haven\",\"clasp\",\"sling\",\"stint\",\"urges\",\"champ\",\"piety\",\"chirp\",\"pleat\",\"posse\",\"sunup\",\"menus\",\"howls\",\"quake\",\"knack\",\"plaza\",\"fiend\",\"caked\",\"bangs\",\"erupt\",\"poker\",\"olden\",\"cramp\",\"voter\",\"poses\",\"manly\",\"slump\",\"fined\",\"grips\",\"gaped\",\"purge\",\"hiked\",\"maize\",\"fluff\",\"strut\",\"sloop\",\"prowl\",\"roach\",\"cocks\",\"bland\",\"dials\",\"plume\",\"slaps\",\"soups\",\"dully\",\"wills\",\"foams\",\"solos\",\"skier\",\"eaves\",\"totem\",\"fused\",\"latex\",\"veils\",\"mused\",\"mains\",\"myrrh\",\"racks\",\"galls\",\"gnats\",\"bouts\",\"sisal\",\"shuts\",\"hoses\",\"dryly\",\"hover\",\"gloss\",\"seeps\",\"denim\",\"putty\",\"guppy\",\"leaky\",\"dusky\",\"filth\",\"oboes\",\"spans\",\"fowls\",\"adorn\",\"glaze\",\"haunt\",\"dares\",\"obeys\",\"bakes\",\"abyss\",\"smelt\",\"gangs\",\"aches\",\"trawl\",\"claps\",\"undid\",\"spicy\",\"hoist\",\"fades\",\"vicar\",\"acorn\",\"pussy\",\"gruff\",\"musty\",\"tarts\",\"snuff\",\"hunch\",\"truce\",\"tweed\",\"dryer\",\"loser\",\"sheaf\",\"moles\",\"lapse\",\"tawny\",\"vexed\",\"autos\",\"wager\",\"domes\",\"sheen\",\"clang\",\"spade\",\"sowed\",\"broil\",\"slyly\",\"studs\",\"grunt\",\"donor\",\"slugs\",\"aspen\",\"homer\",\"croak\",\"tithe\",\"halts\",\"avert\",\"havoc\",\"hogan\",\"glint\",\"ruddy\",\"jeeps\",\"flaky\",\"ladle\",\"taunt\",\"snore\",\"fines\",\"props\",\"prune\",\"pesos\",\"radii\",\"pokes\",\"tiled\",\"daisy\",\"heron\",\"villa\",\"farce\",\"binds\",\"cites\",\"fixes\",\"jerks\",\"livid\",\"waked\",\"inked\",\"booms\",\"chews\",\"licks\",\"hyena\",\"scoff\",\"lusty\",\"sonic\",\"smith\",\"usher\",\"tucks\",\"vigil\",\"molts\",\"sects\",\"spars\",\"dumps\",\"scaly\",\"wisps\",\"sores\",\"mince\",\"panda\",\"flier\",\"axles\",\"plied\",\"booby\",\"patio\",\"rabbi\",\"petal\",\"polyp\",\"tints\",\"grate\",\"troll\",\"tolls\",\"relic\",\"phony\",\"bleat\",\"flaws\",\"flake\",\"snags\",\"aptly\",\"drawl\",\"ulcer\",\"soapy\",\"bossy\",\"monks\",\"crags\",\"caged\",\"twang\",\"diner\",\"taped\",\"cadet\",\"grids\",\"spawn\",\"guile\",\"noose\",\"mores\",\"girth\",\"slimy\",\"aides\",\"spasm\",\"burrs\",\"alibi\",\"lymph\",\"saucy\",\"muggy\",\"liter\",\"joked\",\"goofy\",\"exams\",\"enact\",\"stork\",\"lured\",\"toxic\",\"omens\",\"nears\",\"covet\",\"wrung\",\"forum\",\"venom\",\"moody\",\"alder\",\"sassy\",\"flair\",\"guild\",\"prays\",\"wrens\",\"hauls\",\"stave\",\"tilts\",\"pecks\",\"stomp\",\"gales\",\"tempt\",\"capes\",\"mesas\",\"omits\",\"tepee\",\"harry\",\"wring\",\"evoke\",\"limes\",\"cluck\",\"lunge\",\"highs\",\"canes\",\"giddy\",\"lithe\",\"verge\",\"khaki\",\"queue\",\"loath\",\"foyer\",\"outdo\",\"fared\",\"deter\",\"crumb\",\"astir\",\"spire\",\"jumpy\",\"extol\",\"buoys\",\"stubs\",\"lucid\",\"thong\",\"afore\",\"whiff\",\"maxim\",\"hulls\",\"clogs\",\"slats\",\"jiffy\",\"arbor\",\"cinch\",\"igloo\",\"goody\",\"gazes\",\"dowel\",\"calms\",\"bitch\",\"scowl\",\"gulps\",\"coded\",\"waver\",\"mason\",\"lobes\",\"ebony\",\"flail\",\"isles\",\"clods\",\"dazed\",\"adept\",\"oozed\",\"sedan\",\"clays\",\"warts\",\"ketch\",\"skunk\",\"manes\",\"adore\",\"sneer\",\"mango\",\"fiord\",\"flora\",\"roomy\",\"minks\",\"thaws\",\"watts\",\"freer\",\"exult\",\"plush\",\"paled\",\"twain\",\"clink\",\"scamp\",\"pawed\",\"grope\",\"bravo\",\"gable\",\"stink\",\"sever\",\"waned\",\"rarer\",\"regal\",\"wards\",\"fawns\",\"babes\",\"unify\",\"amend\",\"oaken\",\"glade\",\"visor\",\"hefty\",\"nines\",\"throb\",\"pecan\",\"butts\",\"pence\",\"sills\",\"jails\",\"flyer\",\"saber\",\"nomad\",\"miter\",\"beeps\",\"domed\",\"gulfs\",\"curbs\",\"heath\",\"moors\",\"aorta\",\"larks\",\"tangy\",\"wryly\",\"cheep\",\"rages\",\"evade\",\"lures\",\"freak\",\"vogue\",\"tunic\",\"slams\",\"knits\",\"dumpy\",\"mania\",\"spits\",\"firth\",\"hikes\",\"trots\",\"nosed\",\"clank\",\"dogma\",\"bloat\",\"balsa\",\"graft\",\"middy\",\"stile\",\"keyed\",\"finch\",\"sperm\",\"chaff\",\"wiles\",\"amigo\",\"copra\",\"amiss\",\"eying\",\"twirl\",\"lurch\",\"popes\",\"chins\",\"smock\",\"tines\",\"guise\",\"grits\",\"junks\",\"shoal\",\"cache\",\"tapir\",\"atoll\",\"deity\",\"toils\",\"spree\",\"mocks\",\"scans\",\"shorn\",\"revel\",\"raven\",\"hoary\",\"reels\",\"scuff\",\"mimic\",\"weedy\",\"corny\",\"truer\",\"rouge\",\"ember\",\"floes\",\"torso\",\"wipes\",\"edict\",\"sulky\",\"recur\",\"groin\",\"baste\",\"kinks\",\"surer\",\"piggy\",\"moldy\",\"franc\",\"liars\",\"inept\",\"gusty\",\"facet\",\"jetty\",\"equip\",\"leper\",\"slink\",\"soars\",\"cater\",\"dowry\",\"sided\",\"yearn\",\"decoy\",\"taboo\",\"ovals\",\"heals\",\"pleas\",\"beret\",\"spilt\",\"gayly\",\"rover\",\"endow\",\"pygmy\",\"carat\",\"abbey\",\"vents\",\"waken\",\"chimp\",\"fumed\",\"sodas\",\"vinyl\",\"clout\",\"wades\",\"mites\",\"smirk\",\"bores\",\"bunny\",\"surly\",\"frock\",\"foray\",\"purer\",\"milks\",\"query\",\"mired\",\"blare\",\"froth\",\"gruel\",\"navel\",\"paler\",\"puffy\",\"casks\",\"grime\",\"derby\",\"mamma\",\"gavel\",\"teddy\",\"vomit\",\"moans\",\"allot\",\"defer\",\"wield\",\"viper\",\"louse\",\"erred\",\"hewed\",\"abhor\",\"wrest\",\"waxen\",\"adage\",\"ardor\",\"stabs\",\"pored\",\"rondo\",\"loped\",\"fishy\",\"bible\",\"hires\",\"foals\",\"feuds\",\"jambs\",\"thuds\",\"jeers\",\"knead\",\"quirk\",\"rugby\",\"expel\",\"greys\",\"rigor\",\"ester\",\"lyres\",\"aback\",\"glues\",\"lotus\",\"lurid\",\"rungs\",\"hutch\",\"thyme\",\"valet\",\"tommy\",\"yokes\",\"epics\",\"trill\",\"pikes\",\"ozone\",\"caper\",\"chime\",\"frees\",\"famed\",\"leech\",\"smite\",\"neigh\",\"erode\",\"robed\",\"hoard\",\"salve\",\"conic\",\"gawky\",\"craze\",\"jacks\",\"gloat\",\"mushy\",\"rumps\",\"fetus\",\"wince\",\"pinks\",\"shalt\",\"toots\",\"glens\",\"cooed\",\"rusts\",\"stews\",\"shred\",\"parka\",\"chugs\",\"winks\",\"clots\",\"shrew\",\"booed\",\"filmy\",\"juror\",\"dents\",\"gummy\",\"grays\",\"hooky\",\"butte\",\"dogie\",\"poled\",\"reams\",\"fifes\",\"spank\",\"gayer\",\"tepid\",\"spook\",\"taint\",\"flirt\",\"rogue\",\"spiky\",\"opals\",\"miser\",\"cocky\",\"coyly\",\"balmy\",\"slosh\",\"brawl\",\"aphid\",\"faked\",\"hydra\",\"brags\",\"chide\",\"yanks\",\"allay\",\"video\",\"altos\",\"eases\",\"meted\",\"chasm\",\"longs\",\"excel\",\"taffy\",\"impel\",\"savor\",\"koala\",\"quays\",\"dawns\",\"proxy\",\"clove\",\"duets\",\"dregs\",\"tardy\",\"briar\",\"grimy\",\"ultra\",\"meaty\",\"halve\",\"wails\",\"suede\",\"mauve\",\"envoy\",\"arson\",\"coves\",\"gooey\",\"brews\",\"sofas\",\"chums\",\"amaze\",\"zooms\",\"abbot\",\"halos\",\"scour\",\"suing\",\"cribs\",\"sagas\",\"enema\",\"wordy\",\"harps\",\"coupe\",\"molar\",\"flops\",\"weeps\",\"mints\",\"ashen\",\"felts\",\"askew\",\"munch\",\"mewed\",\"divan\",\"vices\",\"jumbo\",\"blobs\",\"blots\",\"spunk\",\"acrid\",\"topaz\",\"cubed\",\"clans\",\"flees\",\"slurs\",\"gnaws\",\"welds\",\"fords\",\"emits\",\"agate\",\"pumas\",\"mends\",\"darks\",\"dukes\",\"plies\",\"canny\",\"hoots\",\"oozes\",\"lamed\",\"fouls\",\"clefs\",\"nicks\",\"mated\",\"skims\",\"brunt\",\"tuber\",\"tinge\",\"fates\",\"ditty\",\"thins\",\"frets\",\"eider\",\"bayou\",\"mulch\",\"fasts\",\"amass\",\"damps\",\"morns\",\"friar\",\"palsy\",\"vista\",\"croon\",\"conch\",\"udder\",\"tacos\",\"skits\",\"mikes\",\"quits\",\"preen\",\"aster\",\"adder\",\"elegy\",\"pulpy\",\"scows\",\"baled\",\"hovel\",\"lavas\",\"crave\",\"optic\",\"welts\",\"busts\",\"knave\",\"razed\",\"shins\",\"totes\",\"scoot\",\"dears\",\"crock\",\"mutes\",\"trims\",\"skein\",\"doted\",\"shuns\",\"veers\",\"fakes\",\"yoked\",\"wooed\",\"hacks\",\"sprig\",\"wands\",\"lulls\",\"seers\",\"snobs\",\"nooks\",\"pined\",\"perky\",\"mooed\",\"frill\",\"dines\",\"booze\",\"tripe\",\"prong\",\"drips\",\"odder\",\"levee\",\"antic\",\"sidle\",\"pithy\",\"corks\",\"yelps\",\"joker\",\"fleck\",\"buffs\",\"scram\",\"tiers\",\"bogey\",\"doled\",\"irate\",\"vales\",\"coped\",\"hails\",\"elude\",\"bulks\",\"aired\",\"vying\",\"stags\",\"strew\",\"cocci\",\"pacts\",\"scabs\",\"silos\",\"dusts\",\"yodel\",\"terse\",\"jaded\",\"baser\",\"jibes\",\"foils\",\"sways\",\"forgo\",\"slays\",\"preys\",\"treks\",\"quell\",\"peeks\",\"assay\",\"lurks\",\"eject\",\"boars\",\"trite\",\"belch\",\"gnash\",\"wanes\",\"lutes\",\"whims\",\"dosed\",\"chewy\",\"snipe\",\"umbra\",\"teems\",\"dozes\",\"kelps\",\"upped\",\"brawn\",\"doped\",\"shush\",\"rinds\",\"slush\",\"moron\",\"voile\",\"woken\",\"fjord\",\"sheik\",\"jests\",\"kayak\",\"slews\",\"toted\",\"saner\",\"drape\",\"patty\",\"raves\",\"sulfa\",\"grist\",\"skied\",\"vixen\",\"civet\",\"vouch\",\"tiara\",\"homey\",\"moped\",\"runts\",\"serge\",\"kinky\",\"rills\",\"corns\",\"brats\",\"pries\",\"amble\",\"fries\",\"loons\",\"tsars\",\"datum\",\"musky\",\"pigmy\",\"gnome\",\"ravel\",\"ovule\",\"icily\",\"liken\",\"lemur\",\"frays\",\"silts\",\"sifts\",\"plods\",\"ramps\",\"tress\",\"earls\",\"dudes\",\"waive\",\"karat\",\"jolts\",\"peons\",\"beers\",\"horny\",\"pales\",\"wreak\",\"lairs\",\"lynch\",\"stank\",\"swoon\",\"idler\",\"abort\",\"blitz\",\"ensue\",\"atone\",\"bingo\",\"roves\",\"kilts\",\"scald\",\"adios\",\"cynic\",\"dulls\",\"memos\",\"elfin\",\"dales\",\"peels\",\"peals\",\"bares\",\"sinus\",\"crone\",\"sable\",\"hinds\",\"shirk\",\"enrol\",\"wilts\",\"roams\",\"duped\",\"cysts\",\"mitts\",\"safes\",\"spats\",\"coops\",\"filet\",\"knell\",\"refit\",\"covey\",\"punks\",\"kilns\",\"fitly\",\"abate\",\"talcs\",\"heeds\",\"duels\",\"wanly\",\"ruffs\",\"gauss\",\"lapel\",\"jaunt\",\"whelp\",\"cleat\",\"gauzy\",\"dirge\",\"edits\",\"wormy\",\"moats\",\"smear\",\"prods\",\"bowel\",\"frisk\",\"vests\",\"bayed\",\"rasps\",\"tames\",\"delve\",\"embed\",\"befit\",\"wafer\",\"ceded\",\"novas\",\"feign\",\"spews\",\"larch\",\"huffs\",\"doles\",\"mamas\",\"hulks\",\"pried\",\"brims\",\"irked\",\"aspic\",\"swipe\",\"mealy\",\"skimp\",\"bluer\",\"slake\",\"dowdy\",\"penis\",\"brays\",\"pupas\",\"egret\",\"flunk\",\"phlox\",\"gripe\",\"peony\",\"douse\",\"blurs\",\"darns\",\"slunk\",\"lefts\",\"chats\",\"inane\",\"vials\",\"stilt\",\"rinks\",\"woofs\",\"wowed\",\"bongs\",\"frond\",\"ingot\",\"evict\",\"singe\",\"shyer\",\"flied\",\"slops\",\"dolts\",\"drool\",\"dells\",\"whelk\",\"hippy\",\"feted\",\"ether\",\"cocos\",\"hives\",\"jibed\",\"mazes\",\"trios\",\"sirup\",\"squab\",\"laths\",\"leers\",\"pasta\",\"rifts\",\"lopes\",\"alias\",\"whirs\",\"diced\",\"slags\",\"lodes\",\"foxed\",\"idled\",\"prows\",\"plait\",\"malts\",\"chafe\",\"cower\",\"toyed\",\"chefs\",\"keels\",\"sties\",\"racer\",\"etude\",\"sucks\",\"sulks\",\"micas\",\"czars\",\"copse\",\"ailed\",\"abler\",\"rabid\",\"golds\",\"croup\",\"snaky\",\"visas\",\"palls\",\"mopes\",\"boned\",\"wispy\",\"raved\",\"swaps\",\"junky\",\"doily\",\"pawns\",\"tamer\",\"poach\",\"baits\",\"damns\",\"gumbo\",\"daunt\",\"prank\",\"hunks\",\"buxom\",\"heres\",\"honks\",\"stows\",\"unbar\",\"idles\",\"routs\",\"sages\",\"goads\",\"remit\",\"copes\",\"deign\",\"culls\",\"girds\",\"haves\",\"lucks\",\"stunk\",\"dodos\",\"shams\",\"snubs\",\"icons\",\"usurp\",\"dooms\",\"hells\",\"soled\",\"comas\",\"paves\",\"maths\",\"perks\",\"limps\",\"wombs\",\"blurb\",\"daubs\",\"cokes\",\"sours\",\"stuns\",\"cased\",\"musts\",\"coeds\",\"cowed\",\"aping\",\"zoned\",\"rummy\",\"fetes\",\"skulk\",\"quaff\",\"rajah\",\"deans\",\"reaps\",\"galas\",\"tills\",\"roved\",\"kudos\",\"toned\",\"pared\",\"scull\",\"vexes\",\"punts\",\"snoop\",\"bails\",\"dames\",\"hazes\",\"lores\",\"marts\",\"voids\",\"ameba\",\"rakes\",\"adzes\",\"harms\",\"rears\",\"satyr\",\"swill\",\"hexes\",\"colic\",\"leeks\",\"hurls\",\"yowls\",\"ivies\",\"plops\",\"musks\",\"papaw\",\"jells\",\"bused\",\"cruet\",\"bided\",\"filch\",\"zests\",\"rooks\",\"laxly\",\"rends\",\"loams\",\"basks\",\"sires\",\"carps\",\"pokey\",\"flits\",\"muses\",\"bawls\",\"shuck\",\"viler\",\"lisps\",\"peeps\",\"sorer\",\"lolls\",\"prude\",\"diked\",\"floss\",\"flogs\",\"scums\",\"dopes\",\"bogie\",\"pinky\",\"leafs\",\"tubas\",\"scads\",\"lowed\",\"yeses\",\"biked\",\"qualm\",\"evens\",\"caned\",\"gawks\",\"whits\",\"wooly\",\"gluts\",\"romps\",\"bests\",\"dunce\",\"crony\",\"joist\",\"tunas\",\"boner\",\"malls\",\"parch\",\"avers\",\"crams\",\"pares\",\"dally\",\"bigot\",\"kales\",\"flays\",\"leach\",\"gushy\",\"pooch\",\"huger\",\"slyer\",\"golfs\",\"mires\",\"flues\",\"loafs\",\"arced\",\"acnes\",\"neons\",\"fiefs\",\"dints\",\"dazes\",\"pouts\",\"cored\",\"yules\",\"lilts\",\"beefs\",\"mutts\",\"fells\",\"cowls\",\"spuds\",\"lames\",\"jawed\",\"dupes\",\"deads\",\"bylaw\",\"noons\",\"nifty\",\"clued\",\"vireo\",\"gapes\",\"metes\",\"cuter\",\"maims\",\"droll\",\"cupid\",\"mauls\",\"sedge\",\"papas\",\"wheys\",\"eking\",\"loots\",\"hilts\",\"meows\",\"beaus\",\"dices\",\"peppy\",\"riper\",\"fogey\",\"gists\",\"yogas\",\"gilts\",\"skews\",\"cedes\",\"zeals\",\"alums\",\"okays\",\"elope\",\"grump\",\"wafts\",\"soots\",\"blimp\",\"hefts\",\"mulls\",\"hosed\",\"cress\",\"doffs\",\"ruder\",\"pixie\",\"waifs\",\"ousts\",\"pucks\",\"biers\",\"gulch\",\"suets\",\"hobos\",\"lints\",\"brans\",\"teals\",\"garbs\",\"pewee\",\"helms\",\"turfs\",\"quips\",\"wends\",\"banes\",\"napes\",\"icier\",\"swats\",\"bagel\",\"hexed\",\"ogres\",\"goner\",\"gilds\",\"pyres\",\"lards\",\"bides\",\"paged\",\"talon\",\"flout\",\"medic\",\"veals\",\"putts\",\"dirks\",\"dotes\",\"tippy\",\"blurt\",\"piths\",\"acing\",\"barer\",\"whets\",\"gaits\",\"wools\",\"dunks\",\"heros\",\"swabs\",\"dirts\",\"jutes\",\"hemps\",\"surfs\",\"okapi\",\"chows\",\"shoos\",\"dusks\",\"parry\",\"decal\",\"furls\",\"cilia\",\"sears\",\"novae\",\"murks\",\"warps\",\"slues\",\"lamer\",\"saris\",\"weans\",\"purrs\",\"dills\",\"togas\",\"newts\",\"meany\",\"bunts\",\"razes\",\"goons\",\"wicks\",\"ruses\",\"vends\",\"geode\",\"drake\",\"judos\",\"lofts\",\"pulps\",\"lauds\",\"mucks\",\"vises\",\"mocha\",\"oiled\",\"roman\",\"ethyl\",\"gotta\",\"fugue\",\"smack\",\"gourd\",\"bumpy\",\"radix\",\"fatty\",\"borax\",\"cubit\",\"cacti\",\"gamma\",\"focal\",\"avail\",\"papal\",\"golly\",\"elite\",\"versa\",\"billy\",\"adieu\",\"annum\",\"howdy\",\"rhino\",\"norms\",\"bobby\",\"axiom\",\"setup\",\"yolks\",\"terns\",\"mixer\",\"genre\",\"knoll\",\"abode\",\"junta\",\"gorge\",\"combo\",\"alpha\",\"overt\",\"kinda\",\"spelt\",\"prick\",\"nobly\",\"ephod\",\"audio\",\"modal\",\"veldt\",\"warty\",\"fluke\",\"bonny\",\"bream\",\"rosin\",\"bolls\",\"doers\",\"downs\",\"beady\",\"motif\",\"humph\",\"fella\",\"mould\",\"crepe\",\"kerns\",\"aloha\",\"glyph\",\"azure\",\"riser\",\"blest\",\"locus\",\"lumpy\",\"beryl\",\"wanna\",\"brier\",\"tuner\",\"rowdy\",\"mural\",\"timer\",\"canst\",\"krill\",\"quoth\",\"lemme\",\"triad\",\"tenon\",\"amply\",\"deeps\",\"padre\",\"leant\",\"pacer\",\"octal\",\"dolly\",\"trans\",\"sumac\",\"foamy\",\"lolly\",\"giver\",\"quipu\",\"codex\",\"manna\",\"unwed\",\"vodka\",\"ferny\",\"salon\",\"duple\",\"boron\",\"revue\",\"crier\",\"alack\",\"inter\",\"dilly\",\"whist\",\"cults\",\"spake\",\"reset\",\"loess\",\"decor\",\"mover\",\"verve\",\"ethic\",\"gamut\",\"lingo\",\"dunno\",\"align\",\"sissy\",\"incur\",\"reedy\",\"avant\",\"piper\",\"waxer\",\"calyx\",\"basil\",\"coons\",\"seine\",\"piney\",\"lemma\",\"trams\",\"winch\",\"whirr\",\"saith\",\"ionic\",\"heady\",\"harem\",\"tummy\",\"sally\",\"shied\",\"dross\",\"farad\",\"saver\",\"tilde\",\"jingo\",\"bower\",\"serif\",\"facto\",\"belle\",\"inset\",\"bogus\",\"caved\",\"forte\",\"sooty\",\"bongo\",\"toves\",\"credo\",\"basal\",\"yella\",\"aglow\",\"glean\",\"gusto\",\"hymen\",\"ethos\",\"terra\",\"brash\",\"scrip\",\"swash\",\"aleph\",\"tinny\",\"itchy\",\"wanta\",\"trice\",\"jowls\",\"gongs\",\"garde\",\"boric\",\"twill\",\"sower\",\"henry\",\"awash\",\"libel\",\"spurn\",\"sabre\",\"rebut\",\"penal\",\"obese\",\"sonny\",\"quirt\",\"mebbe\",\"tacit\",\"greek\",\"xenon\",\"hullo\",\"pique\",\"roger\",\"negro\",\"hadst\",\"gecko\",\"beget\",\"uncut\",\"aloes\",\"louis\",\"quint\",\"clunk\",\"raped\",\"salvo\",\"diode\",\"matey\",\"hertz\",\"xylem\",\"kiosk\",\"apace\",\"cawed\",\"peter\",\"wench\",\"cohos\",\"sorta\",\"gamba\",\"bytes\",\"tango\",\"nutty\",\"axial\",\"aleck\",\"natal\",\"clomp\",\"gored\",\"siree\",\"bandy\",\"gunny\",\"runic\",\"whizz\",\"rupee\",\"fated\",\"wiper\",\"bards\",\"briny\",\"staid\",\"hocks\",\"ochre\",\"yummy\",\"gents\",\"soupy\",\"roper\",\"swath\",\"cameo\",\"edger\",\"spate\",\"gimme\",\"ebbed\",\"breve\",\"theta\",\"deems\",\"dykes\",\"servo\",\"telly\",\"tabby\",\"tares\",\"blocs\",\"welch\",\"ghoul\",\"vitae\",\"cumin\",\"dinky\",\"bronc\",\"tabor\",\"teeny\",\"comer\",\"borer\",\"sired\",\"privy\",\"mammy\",\"deary\",\"gyros\",\"sprit\",\"conga\",\"quire\",\"thugs\",\"furor\",\"bloke\",\"runes\",\"bawdy\",\"cadre\",\"toxin\",\"annul\",\"egged\",\"anion\",\"nodes\",\"picky\",\"stein\",\"jello\",\"audit\",\"echos\",\"fagot\",\"letup\",\"eyrie\",\"fount\",\"caped\",\"axons\",\"amuck\",\"banal\",\"riled\",\"petit\",\"umber\",\"miler\",\"fibre\",\"agave\",\"bated\",\"bilge\",\"vitro\",\"feint\",\"pudgy\",\"mater\",\"manic\",\"umped\",\"pesky\",\"strep\",\"slurp\",\"pylon\",\"puree\",\"caret\",\"temps\",\"newel\",\"yawns\",\"seedy\",\"treed\",\"coups\",\"rangy\",\"brads\",\"mangy\",\"loner\",\"circa\",\"tibia\",\"afoul\",\"mommy\",\"titer\",\"carne\",\"kooky\",\"motes\",\"amity\",\"suave\",\"hippo\",\"curvy\",\"samba\",\"newsy\",\"anise\",\"imams\",\"tulle\",\"aways\",\"liven\",\"hallo\",\"wales\",\"opted\",\"canto\",\"idyll\",\"bodes\",\"curio\",\"wrack\",\"hiker\",\"chive\",\"yokel\",\"dotty\",\"demur\",\"cusps\",\"specs\",\"quads\",\"laity\",\"toner\",\"decry\",\"writs\",\"saute\",\"clack\",\"aught\",\"logos\",\"tipsy\",\"natty\",\"ducal\",\"bidet\",\"bulgy\",\"metre\",\"lusts\",\"unary\",\"goeth\",\"baler\",\"sited\",\"shies\",\"hasps\",\"brung\",\"holed\",\"swank\",\"looky\",\"melee\",\"huffy\",\"loamy\",\"pimps\",\"titan\",\"binge\",\"shunt\",\"femur\",\"libra\",\"seder\",\"honed\",\"annas\",\"coypu\",\"shims\",\"zowie\",\"jihad\",\"savvy\",\"nadir\",\"basso\",\"monic\",\"maned\",\"mousy\",\"omega\",\"laver\",\"prima\",\"picas\",\"folio\",\"mecca\",\"reals\",\"troth\",\"testy\",\"balky\",\"crimp\",\"chink\",\"abets\",\"splat\",\"abaci\",\"vaunt\",\"cutie\",\"pasty\",\"moray\",\"levis\",\"ratty\",\"islet\",\"joust\",\"motet\",\"viral\",\"nukes\",\"grads\",\"comfy\",\"voila\",\"woozy\",\"blued\",\"whomp\",\"sward\",\"metro\",\"skeet\",\"chine\",\"aerie\",\"bowie\",\"tubby\",\"emirs\",\"coati\",\"unzip\",\"slobs\",\"trike\",\"funky\",\"ducat\",\"dewey\",\"skoal\",\"wadis\",\"oomph\",\"taker\",\"minim\",\"getup\",\"stoic\",\"synod\",\"runty\",\"flyby\",\"braze\",\"inlay\",\"venue\",\"louts\",\"peaty\",\"orlon\",\"humpy\",\"radon\",\"beaut\",\"raspy\",\"unfed\",\"crick\",\"nappy\",\"vizor\",\"yipes\",\"rebus\",\"divot\",\"kiwis\",\"vetch\",\"squib\",\"sitar\",\"kiddo\",\"dyers\",\"cotta\",\"matzo\",\"lager\",\"zebus\",\"crass\",\"dacha\",\"kneed\",\"dicta\",\"fakir\",\"knurl\",\"runny\",\"unpin\",\"julep\",\"globs\",\"nudes\",\"sushi\",\"tacky\",\"stoke\",\"kaput\",\"butch\",\"hulas\",\"croft\",\"achoo\",\"genii\",\"nodal\",\"outgo\",\"spiel\",\"viols\",\"fetid\",\"cagey\",\"fudgy\",\"epoxy\",\"leggy\",\"hanky\",\"lapis\",\"felon\",\"beefy\",\"coots\",\"melba\",\"caddy\",\"segue\",\"betel\",\"frizz\",\"drear\",\"kooks\",\"turbo\",\"hoagy\",\"moult\",\"helix\",\"zonal\",\"arias\",\"nosey\",\"paean\",\"lacey\",\"banns\",\"swain\",\"fryer\",\"retch\",\"tenet\",\"gigas\",\"whiny\",\"ogled\",\"rumen\",\"begot\",\"cruse\",\"abuts\",\"riven\",\"balks\",\"sines\",\"sigma\",\"abase\",\"ennui\",\"gores\",\"unset\",\"augur\",\"sated\",\"odium\",\"latin\",\"dings\",\"moire\",\"scion\",\"henna\",\"kraut\",\"dicks\",\"lifer\",\"prigs\",\"bebop\",\"gages\",\"gazer\",\"fanny\",\"gibes\",\"aural\",\"tempi\",\"hooch\",\"rapes\",\"snuck\",\"harts\",\"techs\",\"emend\",\"ninny\",\"guava\",\"scarp\",\"liege\",\"tufty\",\"sepia\",\"tomes\",\"carob\",\"emcee\",\"prams\",\"poser\",\"verso\",\"hubba\",\"joule\",\"baize\",\"blips\",\"scrim\",\"cubby\",\"clave\",\"winos\",\"rearm\",\"liens\",\"lumen\",\"chump\",\"nanny\",\"trump\",\"fichu\",\"chomp\",\"homos\",\"purty\",\"maser\",\"woosh\",\"patsy\",\"shill\",\"rusks\",\"avast\",\"swami\",\"boded\",\"ahhhh\",\"lobed\",\"natch\",\"shish\",\"tansy\",\"snoot\",\"payer\",\"altho\",\"sappy\",\"laxer\",\"hubby\",\"aegis\",\"riles\",\"ditto\",\"jazzy\",\"dingo\",\"quasi\",\"septa\",\"peaky\",\"lorry\",\"heerd\",\"bitty\",\"payee\",\"seamy\",\"apses\",\"imbue\",\"belie\",\"chary\",\"spoof\",\"phyla\",\"clime\",\"babel\",\"wacky\",\"sumps\",\"skids\",\"khans\",\"crypt\",\"inure\",\"nonce\",\"outen\",\"faire\",\"hooey\",\"anole\",\"kazoo\",\"calve\",\"limbo\",\"argot\",\"ducky\",\"faker\",\"vibes\",\"gassy\",\"unlit\",\"nervy\",\"femme\",\"biter\",\"fiche\",\"boors\",\"gaffe\",\"saxes\",\"recap\",\"synch\",\"facie\",\"dicey\",\"ouija\",\"hewer\",\"legit\",\"gurus\",\"edify\",\"tweak\",\"caron\",\"typos\",\"rerun\",\"polly\",\"surds\",\"hamza\",\"nulls\",\"hater\",\"lefty\",\"mogul\",\"mafia\",\"debug\",\"pates\",\"blabs\",\"splay\",\"talus\",\"porno\",\"moola\",\"nixed\",\"kilos\",\"snide\",\"horsy\",\"gesso\",\"jaggy\",\"trove\",\"nixes\",\"creel\",\"pater\",\"iotas\",\"cadge\",\"skyed\",\"hokum\",\"furze\",\"ankhs\",\"curie\",\"nutsy\",\"hilum\",\"remix\",\"angst\",\"burls\",\"jimmy\",\"veiny\",\"tryst\",\"codon\",\"befog\",\"gamed\",\"flume\",\"axman\",\"doozy\",\"lubes\",\"rheas\",\"bozos\",\"butyl\",\"kelly\",\"mynah\",\"jocks\",\"donut\",\"avian\",\"wurst\",\"chock\",\"quash\",\"quals\",\"hayed\",\"bombe\",\"cushy\",\"spacy\",\"puked\",\"leery\",\"thews\",\"prink\",\"amens\",\"tesla\",\"intro\",\"fiver\",\"frump\",\"capos\",\"opine\",\"coder\",\"namer\",\"jowly\",\"pukes\",\"haled\",\"chard\",\"duffs\",\"bruin\",\"reuse\",\"whang\",\"toons\",\"frats\",\"silty\",\"telex\",\"cutup\",\"nisei\",\"neato\",\"decaf\",\"softy\",\"bimbo\",\"adlib\",\"loony\",\"shoed\",\"agues\",\"peeve\",\"noway\",\"gamey\",\"sarge\",\"reran\",\"epact\",\"potty\",\"coned\",\"upend\",\"narco\",\"ikats\",\"whorl\",\"jinks\",\"tizzy\",\"weepy\",\"posit\",\"marge\",\"vegan\",\"clops\",\"numbs\",\"reeks\",\"rubes\",\"rower\",\"biped\",\"tiffs\",\"hocus\",\"hammy\",\"bunco\",\"fixit\",\"tykes\",\"chaws\",\"yucky\",\"hokey\",\"resew\",\"maven\",\"adman\",\"scuzz\",\"slogs\",\"souse\",\"nacho\",\"mimed\",\"melds\",\"boffo\",\"debit\",\"pinup\",\"vagus\",\"gulag\",\"randy\",\"bosun\",\"educe\",\"faxes\",\"auras\",\"pesto\",\"antsy\",\"betas\",\"fizzy\",\"dorky\",\"snits\",\"moxie\",\"thane\",\"mylar\",\"nobby\",\"gamin\",\"gouty\",\"esses\",\"goyim\",\"paned\",\"druid\",\"jades\",\"rehab\",\"gofer\",\"tzars\",\"octet\",\"homed\",\"socko\",\"dorks\",\"eared\",\"anted\",\"elide\",\"fazes\",\"oxbow\",\"dowse\",\"situs\",\"macaw\",\"scone\",\"drily\",\"hyper\",\"salsa\",\"mooch\",\"gated\",\"unjam\",\"lipid\",\"mitre\",\"venal\",\"knish\",\"ritzy\",\"divas\",\"torus\",\"mange\",\"dimer\",\"recut\",\"meson\",\"wined\",\"fends\",\"phage\",\"fiats\",\"caulk\",\"cavil\",\"panty\",\"roans\",\"bilks\",\"hones\",\"botch\",\"estop\",\"sully\",\"sooth\",\"gelds\",\"ahold\",\"raper\",\"pager\",\"fixer\",\"infix\",\"hicks\",\"tuxes\",\"plebe\",\"twits\",\"abash\",\"twixt\",\"wacko\",\"primp\",\"nabla\",\"girts\",\"miffs\",\"emote\",\"xerox\",\"rebid\",\"shahs\",\"rutty\",\"grout\",\"grift\",\"deify\",\"biddy\",\"kopek\",\"semis\",\"bries\",\"acmes\",\"piton\",\"hussy\",\"torts\",\"disco\",\"whore\",\"boozy\",\"gibed\",\"vamps\",\"amour\",\"soppy\",\"gonzo\",\"durst\",\"wader\",\"tutus\",\"perms\",\"catty\",\"glitz\",\"brigs\",\"nerds\",\"barmy\",\"gizmo\",\"owlet\",\"sayer\",\"molls\",\"shard\",\"whops\",\"comps\",\"corer\",\"colas\",\"matte\",\"droid\",\"ploys\",\"vapid\",\"cairn\",\"deism\",\"mixup\",\"yikes\",\"prosy\",\"raker\",\"flubs\",\"whish\",\"reify\",\"craps\",\"shags\",\"clone\",\"hazed\",\"macho\",\"recto\",\"refix\",\"drams\",\"biker\",\"aquas\",\"porky\",\"doyen\",\"exude\",\"goofs\",\"divvy\",\"noels\",\"jived\",\"hulky\",\"cager\",\"harpy\",\"oldie\",\"vivas\",\"admix\",\"codas\",\"zilch\",\"deist\",\"orcas\",\"retro\",\"pilaf\",\"parse\",\"rants\",\"zingy\",\"toddy\",\"chiff\",\"micro\",\"veeps\",\"girly\",\"nexus\",\"demos\",\"bibbs\",\"antes\",\"lulus\",\"gnarl\",\"zippy\",\"ivied\",\"epees\",\"wimps\",\"tromp\",\"grail\",\"yoyos\",\"poufs\",\"hales\",\"roust\",\"cabal\",\"rawer\",\"pampa\",\"mosey\",\"kefir\",\"burgs\",\"unmet\",\"cuspy\",\"boobs\",\"boons\",\"hypes\",\"dynes\",\"nards\",\"lanai\",\"yogis\",\"sepal\",\"quark\",\"toked\",\"prate\",\"ayins\",\"hawed\",\"swigs\",\"vitas\",\"toker\",\"doper\",\"bossa\",\"linty\",\"foist\",\"mondo\",\"stash\",\"kayos\",\"twerp\",\"zesty\",\"capon\",\"wimpy\",\"rewed\",\"fungo\",\"tarot\",\"frosh\",\"kabob\",\"pinko\",\"redid\",\"mimeo\",\"heist\",\"tarps\",\"lamas\",\"sutra\",\"dinar\",\"whams\",\"busty\",\"spays\",\"mambo\",\"nabob\",\"preps\",\"odour\",\"cabby\",\"conks\",\"sluff\",\"dados\",\"houri\",\"swart\",\"balms\",\"gutsy\",\"faxed\",\"egads\",\"pushy\",\"retry\",\"agora\",\"drubs\",\"daffy\",\"chits\",\"mufti\",\"karma\",\"lotto\",\"toffs\",\"burps\",\"deuce\",\"zings\",\"kappa\",\"clads\",\"doggy\",\"duper\",\"scams\",\"ogler\",\"mimes\",\"throe\",\"zetas\",\"waled\",\"promo\",\"blats\",\"muffs\",\"oinks\",\"viand\",\"coset\",\"finks\",\"faddy\",\"minis\",\"snafu\",\"sauna\",\"usury\",\"muxes\",\"craws\",\"stats\",\"condo\",\"coxes\",\"loopy\",\"dorms\",\"ascot\",\"dippy\",\"execs\",\"dopey\",\"envoi\",\"umpty\",\"gismo\",\"fazed\",\"strop\",\"jives\",\"slims\",\"batik\",\"pings\",\"sonly\",\"leggo\",\"pekoe\",\"prawn\",\"luaus\",\"campy\",\"oodle\",\"prexy\",\"proms\",\"touts\",\"ogles\",\"tweet\",\"toady\",\"naiad\",\"hider\",\"nuked\",\"fatso\",\"sluts\",\"obits\",\"narcs\",\"tyros\",\"delis\",\"wooer\",\"hyped\",\"poset\",\"byway\",\"texas\",\"scrod\",\"avows\",\"futon\",\"torte\",\"tuple\",\"carom\",\"kebab\",\"tamps\",\"jilts\",\"duals\",\"artsy\",\"repro\",\"modem\",\"toped\",\"psych\",\"sicko\",\"klutz\",\"tarns\",\"coxed\",\"drays\",\"cloys\",\"anded\",\"piker\",\"aimer\",\"suras\",\"limos\",\"flack\",\"hapax\",\"dutch\",\"mucky\",\"shire\",\"klieg\",\"staph\",\"layup\",\"tokes\",\"axing\",\"toper\",\"duvet\",\"cowry\",\"profs\",\"blahs\",\"addle\",\"sudsy\",\"batty\",\"coifs\",\"suety\",\"gabby\",\"hafta\",\"pitas\",\"gouda\",\"deice\",\"taupe\",\"topes\",\"duchy\",\"nitro\",\"carny\",\"limey\",\"orals\",\"hirer\",\"taxer\",\"roils\",\"ruble\",\"elate\",\"dolor\",\"wryer\",\"snots\",\"quais\",\"coked\",\"gimel\",\"gorse\",\"minas\",\"goest\",\"agape\",\"manta\",\"jings\",\"iliac\",\"admen\",\"offen\",\"cills\",\"offal\",\"lotta\",\"bolas\",\"thwap\",\"alway\",\"boggy\",\"donna\",\"locos\",\"belay\",\"gluey\",\"bitsy\",\"mimsy\",\"hilar\",\"outta\",\"vroom\",\"fetal\",\"raths\",\"renal\",\"dyads\",\"crocs\",\"vires\",\"culpa\",\"kivas\",\"feist\",\"teats\",\"thats\",\"yawls\",\"whens\",\"abaca\",\"ohhhh\",\"aphis\",\"fusty\",\"eclat\",\"perdu\",\"mayst\",\"exeat\",\"molly\",\"supra\",\"wetly\",\"plasm\",\"buffa\",\"semen\",\"pukka\",\"tagua\",\"paras\",\"stoat\",\"secco\",\"carte\",\"haute\",\"molal\",\"shads\",\"forma\",\"ovoid\",\"pions\",\"modus\",\"bueno\",\"rheum\",\"scurf\",\"parer\",\"ephah\",\"doest\",\"sprue\",\"flams\",\"molto\",\"dieth\",\"choos\",\"miked\",\"bronx\",\"goopy\",\"bally\",\"plumy\",\"moony\",\"morts\",\"yourn\",\"bipod\",\"spume\",\"algal\",\"ambit\",\"mucho\",\"spued\",\"dozer\",\"harum\",\"groat\",\"skint\",\"laude\",\"thrum\",\"pappy\",\"oncet\",\"rimed\",\"gigue\",\"limed\",\"plein\",\"redly\",\"humpf\",\"lites\",\"seest\",\"grebe\",\"absit\",\"thanx\",\"pshaw\",\"yawps\",\"plats\",\"payed\",\"areal\",\"tilth\",\"youse\",\"gwine\",\"thees\",\"watsa\",\"lento\",\"spitz\",\"yawed\",\"gipsy\",\"sprat\",\"cornu\",\"amahs\",\"blowy\",\"wahoo\",\"lubra\",\"mecum\",\"whooo\",\"coqui\",\"sabra\",\"edema\",\"mrads\",\"dicot\",\"astro\",\"kited\",\"ouzel\",\"didos\",\"grata\",\"bonne\",\"axmen\",\"klunk\",\"summa\",\"laves\",\"purls\",\"yawny\",\"teary\",\"masse\",\"largo\",\"bazar\",\"pssst\",\"sylph\",\"lulab\",\"toque\",\"fugit\",\"plunk\",\"ortho\",\"lucre\",\"cooch\",\"whipt\",\"folky\",\"tyres\",\"wheee\",\"corky\",\"injun\",\"solon\",\"didot\",\"kerfs\",\"rayed\",\"wassa\",\"chile\",\"begat\",\"nippy\",\"litre\",\"magna\",\"rebox\",\"hydro\",\"milch\",\"brent\",\"gyves\",\"lazed\",\"feued\",\"mavis\",\"inapt\",\"baulk\",\"casus\",\"scrum\",\"wised\",\"fossa\",\"dower\",\"kyrie\",\"bhoys\",\"scuse\",\"feuar\",\"ohmic\",\"juste\",\"ukase\",\"beaux\",\"tusky\",\"orate\",\"musta\",\"lardy\",\"intra\",\"quiff\",\"epsom\",\"neath\",\"ocher\",\"tared\",\"homme\",\"mezzo\",\"corms\",\"psoas\",\"beaky\",\"terry\",\"infra\",\"spivs\",\"tuans\",\"belli\",\"bergs\",\"anima\",\"weirs\",\"mahua\",\"scops\",\"manse\",\"titre\",\"curia\",\"kebob\",\"cycad\",\"talky\",\"fucks\",\"tapis\",\"amide\",\"dolce\",\"sloes\",\"jakes\",\"russe\",\"blash\",\"tutti\",\"pruta\",\"panga\",\"blebs\",\"tench\",\"swarf\",\"herem\",\"missy\",\"merse\",\"pawky\",\"limen\",\"vivre\",\"chert\",\"unsee\",\"tiros\",\"brack\",\"foots\",\"welsh\",\"fosse\",\"knops\",\"ileum\",\"noire\",\"firma\",\"podgy\",\"laird\",\"thunk\",\"shute\",\"rowan\",\"shoji\",\"poesy\",\"uncap\",\"fames\",\"glees\",\"costa\",\"turps\",\"fores\",\"solum\",\"imago\",\"byres\",\"fondu\",\"coney\",\"polis\",\"dictu\",\"kraal\",\"sherd\",\"mumbo\",\"wroth\",\"chars\",\"unbox\",\"vacuo\",\"slued\",\"weest\",\"hades\",\"wiled\",\"syncs\",\"muser\",\"excon\",\"hoars\",\"sibyl\",\"passe\",\"joeys\",\"lotsa\",\"lepta\",\"shays\",\"bocks\",\"endue\",\"darer\",\"nones\",\"ileus\",\"plash\",\"busby\",\"wheal\",\"buffo\",\"yobbo\",\"biles\",\"poxes\",\"rooty\",\"licit\",\"terce\",\"bromo\",\"hayey\",\"dweeb\",\"imbed\",\"saran\",\"bruit\",\"punky\",\"softs\",\"biffs\",\"loppy\",\"agars\",\"aquae\",\"livre\",\"biome\",\"bunds\",\"shews\",\"diems\",\"ginny\",\"degum\",\"polos\",\"desex\",\"unman\",\"dungy\",\"vitam\",\"wedgy\",\"glebe\",\"apers\",\"ridgy\",\"roids\",\"wifey\",\"vapes\",\"whoas\",\"bunko\",\"yolky\",\"ulnas\",\"reeky\",\"bodge\",\"brant\",\"davit\",\"deque\",\"liker\",\"jenny\",\"tacts\",\"fulls\",\"treap\",\"ligne\",\"acked\",\"refry\",\"vower\",\"aargh\",\"churl\",\"momma\",\"gaols\",\"whump\",\"arras\",\"marls\",\"tiler\",\"grogs\",\"memes\",\"midis\",\"tided\",\"haler\",\"duces\",\"twiny\",\"poste\",\"unrig\",\"prise\",\"drabs\",\"quids\",\"facer\",\"spier\",\"baric\",\"geoid\",\"remap\",\"trier\",\"gunks\",\"steno\",\"stoma\",\"airer\",\"ovate\",\"torah\",\"apian\",\"smuts\",\"pocks\",\"yurts\",\"exurb\",\"defog\",\"nuder\",\"bosky\",\"nimbi\",\"mothy\",\"joyed\",\"labia\",\"pards\",\"jammy\",\"bigly\",\"faxer\",\"hoppy\",\"nurbs\",\"cotes\",\"dishy\",\"vised\",\"celeb\",\"pismo\",\"casas\",\"withs\",\"dodgy\",\"scudi\",\"mungs\",\"muons\",\"ureas\",\"ioctl\",\"unhip\",\"krone\",\"sager\",\"verst\",\"expat\",\"gronk\",\"uvula\",\"shawm\",\"bilgy\",\"braes\",\"cento\",\"webby\",\"lippy\",\"gamic\",\"lordy\",\"mazed\",\"tings\",\"shoat\",\"faery\",\"wirer\",\"diazo\",\"carer\",\"rater\",\"greps\",\"rente\",\"zloty\",\"viers\",\"unapt\",\"poops\",\"fecal\",\"kepis\",\"taxon\",\"eyers\",\"wonts\",\"spina\",\"stoae\",\"yenta\",\"pooey\",\"buret\",\"japan\",\"bedew\",\"hafts\",\"selfs\",\"oared\",\"herby\",\"pryer\",\"oakum\",\"dinks\",\"titty\",\"sepoy\",\"penes\",\"fusee\",\"winey\",\"gimps\",\"nihil\",\"rille\",\"giber\",\"ousel\",\"umiak\",\"cuppy\",\"hames\",\"shits\",\"azine\",\"glads\",\"tacet\",\"bumph\",\"coyer\",\"honky\",\"gamer\",\"gooky\",\"waspy\",\"sedgy\",\"bents\",\"varia\",\"djinn\",\"junco\",\"pubic\",\"wilco\",\"lazes\",\"idyls\",\"lupus\",\"rives\",\"snood\",\"schmo\",\"spazz\",\"finis\",\"noter\",\"pavan\",\"orbed\",\"bates\",\"pipet\",\"baddy\",\"goers\",\"shako\",\"stets\",\"sebum\",\"seeth\",\"lobar\",\"raver\",\"ajuga\",\"riced\",\"velds\",\"dribs\",\"ville\",\"dhows\",\"unsew\",\"halma\",\"krona\",\"limby\",\"jiffs\",\"treys\",\"bauds\",\"pffft\",\"mimer\",\"plebs\",\"caner\",\"jiber\",\"cuppa\",\"washy\",\"chuff\",\"unarm\",\"yukky\",\"styes\",\"waker\",\"flaks\",\"maces\",\"rimes\",\"gimpy\",\"guano\",\"liras\",\"kapok\",\"scuds\",\"bwana\",\"oring\",\"aider\",\"prier\",\"klugy\",\"monte\",\"golem\",\"velar\",\"firer\",\"pieta\",\"umbel\",\"campo\",\"unpeg\",\"fovea\",\"abeam\",\"boson\",\"asker\",\"goths\",\"vocab\",\"vined\",\"trows\",\"tikis\",\"loper\",\"indie\",\"boffs\",\"spang\",\"grapy\",\"tater\",\"ichor\",\"kilty\",\"lochs\",\"supes\",\"degas\",\"flics\",\"torsi\",\"beths\",\"weber\",\"resaw\",\"lawny\",\"coven\",\"mujik\",\"relet\",\"therm\",\"heigh\",\"shnor\",\"trued\",\"zayin\",\"liest\",\"barfs\",\"bassi\",\"qophs\",\"roily\",\"flabs\",\"punny\",\"okras\",\"hanks\",\"dipso\",\"nerfs\",\"fauns\",\"calla\",\"pseud\",\"lurer\",\"magus\",\"obeah\",\"atria\",\"twink\",\"palmy\",\"pocky\",\"pends\",\"recta\",\"plonk\",\"slaws\",\"keens\",\"nicad\",\"pones\",\"inker\",\"whews\",\"groks\",\"mosts\",\"trews\",\"ulnar\",\"gyppy\",\"cocas\",\"expos\",\"eruct\",\"oiler\",\"vacua\",\"dreck\",\"dater\",\"arums\",\"tubal\",\"voxel\",\"dixit\",\"beery\",\"assai\",\"lades\",\"actin\",\"ghoti\",\"buzzy\",\"meads\",\"grody\",\"ribby\",\"clews\",\"creme\",\"email\",\"pyxie\",\"kulak\",\"bocci\",\"rived\",\"duddy\",\"hoper\",\"lapin\",\"wonks\",\"petri\",\"phial\",\"fugal\",\"holon\",\"boomy\",\"duomo\",\"musos\",\"shier\",\"hayer\",\"porgy\",\"hived\",\"litho\",\"fisty\",\"stagy\",\"luvya\",\"maria\",\"smogs\",\"asana\",\"yogic\",\"slomo\",\"fawny\",\"amine\",\"wefts\",\"gonad\",\"twirp\",\"brava\",\"plyer\",\"fermi\",\"loges\",\"niter\",\"revet\",\"unate\",\"gyved\",\"totty\",\"zappy\",\"honer\",\"giros\",\"dicer\",\"calks\",\"luxes\",\"monad\",\"cruft\",\"quoin\",\"fumer\",\"amped\",\"shlep\",\"vinca\",\"yahoo\",\"vulva\",\"zooey\",\"dryad\",\"nixie\",\"moper\",\"iambs\",\"lunes\",\"nudie\",\"limns\",\"weals\",\"nohow\",\"miaow\",\"gouts\",\"mynas\",\"mazer\",\"kikes\",\"oxeye\",\"stoup\",\"jujus\",\"debar\",\"pubes\",\"taels\",\"defun\",\"rands\",\"blear\",\"paver\",\"goosy\",\"sprog\",\"oleos\",\"toffy\",\"pawer\",\"maced\",\"crits\",\"kluge\",\"tubed\",\"sahib\",\"ganef\",\"scats\",\"sputa\",\"vaned\",\"acned\",\"taxol\",\"plink\",\"oweth\",\"tribs\",\"resay\",\"boule\",\"thous\",\"haply\",\"glans\",\"maxis\",\"bezel\",\"antis\",\"porks\",\"quoit\",\"alkyd\",\"glary\",\"beamy\",\"hexad\",\"bonks\",\"tecum\",\"kerbs\",\"filar\",\"frier\",\"redux\",\"abuzz\",\"fader\",\"shoer\",\"couth\",\"trues\",\"guyed\",\"goony\",\"booky\",\"fuzes\",\"hurly\",\"genet\",\"hodad\",\"calix\",\"filer\",\"pawls\",\"iodic\",\"utero\",\"henge\",\"unsay\",\"liers\",\"piing\",\"weald\",\"sexed\",\"folic\",\"poxed\",\"cunts\",\"anile\",\"kiths\",\"becks\",\"tatty\",\"plena\",\"rebar\",\"abled\",\"toyer\",\"attar\",\"teaks\",\"aioli\",\"awing\",\"anent\",\"feces\",\"redip\",\"wists\",\"prats\",\"mesne\",\"muter\",\"smurf\",\"owest\",\"bahts\",\"lossy\",\"ftped\",\"hunky\",\"hoers\",\"slier\",\"sicks\",\"fatly\",\"delft\",\"hiver\",\"himbo\",\"pengo\",\"busks\",\"loxes\",\"zonks\",\"ilium\",\"aport\",\"ikons\",\"mulct\",\"reeve\",\"civvy\",\"canna\",\"barfy\",\"kaiak\",\"scudo\",\"knout\",\"gaper\",\"bhang\",\"pease\",\"uteri\",\"lases\",\"paten\",\"rasae\",\"axels\",\"stoas\",\"ombre\",\"styli\",\"gunky\",\"hazer\",\"kenaf\",\"ahoys\",\"ammos\",\"weeny\",\"urger\",\"kudzu\",\"paren\",\"bolos\",\"fetor\",\"nitty\",\"techy\",\"lieth\",\"somas\",\"darky\",\"villi\",\"gluon\",\"janes\",\"cants\",\"farts\",\"socle\",\"jinns\",\"ruing\",\"slily\",\"ricer\",\"hadda\",\"wowee\",\"rices\",\"nerts\",\"cauls\",\"swive\",\"lilty\",\"micks\",\"arity\",\"pasha\",\"finif\",\"oinky\",\"gutty\",\"tetra\",\"wises\",\"wolds\",\"balds\",\"picot\",\"whats\",\"shiki\",\"bungs\",\"snarf\",\"legos\",\"dungs\",\"stogy\",\"berms\",\"tangs\",\"vails\",\"roods\",\"morel\",\"sware\",\"elans\",\"latus\",\"gules\",\"razer\",\"doxie\",\"buena\",\"overs\",\"gutta\",\"zincs\",\"nates\",\"kirks\",\"tikes\",\"donee\",\"jerry\",\"mohel\",\"ceder\",\"doges\",\"unmap\",\"folia\",\"rawly\",\"snark\",\"topoi\",\"ceils\",\"immix\",\"yores\",\"diest\",\"bubba\",\"pomps\",\"forky\",\"turdy\",\"lawzy\",\"poohs\",\"worts\",\"gloms\",\"beano\",\"muley\",\"barky\",\"tunny\",\"auric\",\"funks\",\"gaffs\",\"cordy\",\"curdy\",\"lisle\",\"toric\",\"soyas\",\"reman\",\"mungy\",\"carpy\",\"apish\",\"oaten\",\"gappy\",\"aurae\",\"bract\",\"rooky\",\"axled\",\"burry\",\"sizer\",\"proem\",\"turfy\",\"impro\",\"mashy\",\"miens\",\"nonny\",\"olios\",\"grook\",\"sates\",\"agley\",\"corgi\",\"dashy\",\"doser\",\"dildo\",\"apsos\",\"xored\",\"laker\",\"playa\",\"selah\",\"malty\",\"dulse\",\"frigs\",\"demit\",\"whoso\",\"rials\",\"sawer\",\"spics\",\"bedim\",\"snugs\",\"fanin\",\"azoic\",\"icers\",\"suers\",\"wizen\",\"koine\",\"topos\",\"shirr\",\"rifer\",\"feral\",\"laded\",\"lased\",\"turds\",\"swede\",\"easts\",\"cozen\",\"unhit\",\"pally\",\"aitch\",\"sedum\",\"coper\",\"ruche\",\"geeks\",\"swags\",\"etext\",\"algin\",\"offed\",\"ninja\",\"holer\",\"doter\",\"toter\",\"besot\",\"dicut\",\"macer\",\"peens\",\"pewit\",\"redox\",\"poler\",\"yecch\",\"fluky\",\"doeth\",\"twats\",\"cruds\",\"bebug\",\"bider\",\"stele\",\"hexer\",\"wests\",\"gluer\",\"pilau\",\"abaft\",\"whelm\",\"lacer\",\"inode\",\"tabus\",\"gator\",\"cuing\",\"refly\",\"luted\",\"cukes\",\"bairn\",\"bight\",\"arses\",\"crump\",\"loggy\",\"blini\",\"spoor\",\"toyon\",\"harks\",\"wazoo\",\"fenny\",\"naves\",\"keyer\",\"tufas\",\"morph\",\"rajas\",\"typal\",\"spiff\",\"oxlip\",\"unban\",\"mussy\",\"finny\",\"rimer\",\"login\",\"molas\",\"cirri\",\"huzza\",\"agone\",\"unsex\",\"unwon\",\"peats\",\"toile\",\"zombi\",\"dewed\",\"nooky\",\"alkyl\",\"ixnay\",\"dovey\",\"holey\",\"cuber\",\"amyls\",\"podia\",\"chino\",\"apnea\",\"prims\",\"lycra\",\"johns\",\"primo\",\"fatwa\",\"egger\",\"hempy\",\"snook\",\"hying\",\"fuzed\",\"barms\",\"crink\",\"moots\",\"yerba\",\"rhumb\",\"unarc\",\"direr\",\"munge\",\"eland\",\"nares\",\"wrier\",\"noddy\",\"atilt\",\"jukes\",\"ender\",\"thens\",\"unfix\",\"doggo\",\"zooks\",\"diddy\",\"shmoo\",\"brusk\",\"prest\",\"curer\",\"pasts\",\"kelpy\",\"bocce\",\"kicky\",\"taros\",\"lings\",\"dicky\",\"nerdy\",\"abend\",\"stela\",\"biggy\",\"laved\",\"baldy\",\"pubis\",\"gooks\",\"wonky\",\"stied\",\"hypos\",\"assed\",\"spumy\",\"osier\",\"roble\",\"rumba\",\"biffy\",\"pupal\"};        \r\n\tpublic List<String> dictionary = Arrays.asList(this.dict);\r\n        public static void main(String args[]){\r\n                if (args.length >= 2 && args[0].length() == WORDLENGTH  && args[1].length() == WORDLENGTH)\r\n\t\t\tnew WordLaddersOne(args[0], args[1]);\r\n\t\telse\r\n\t\t\tSystem.out.println(\"Please enter two 5 letter arguments\");\r\n\t}\r\n\tpublic WordLaddersOne(String startWord, String endWord){\r\n                if (!dictionary.contains(startWord) || !dictionary.contains(endWord))\r\n                {\r\n                    System.out.println(\"Dictionary does not contain start word or end word\");\r\n                    return;\r\n                }\r\n\t\tLinkedList<State> stack = new LinkedList<State>();\r\n                stack.add(new State(startWord));\r\n                boolean can = false;\r\n                State currentState;\r\n                while (true){\r\n                    currentState = stack.pop();\r\n                    if (currentState.word.equals(endWord)){\r\n                        can = true;\r\n                        break;\r\n                    }\r\n                    stack.addAll(currentState.getChildren());\r\n                    if (stack.isEmpty())\r\n                        break;\r\n                }\r\n                if (can){\r\n                    System.out.println(currentState.getPrintValue());\r\n                    State s = currentState;\r\n                    int count = 0;\r\n                    while (currentState.parent != null){\r\n                        currentState = currentState.parent;\r\n                        count++;\r\n                    }\r\n                    System.out.println(count);\r\n                }\r\n                else {\r\n                    System.out.println(startWord);\r\n                    System.out.println(0);\r\n                }                                    \r\n        }\r\n\tprivate class State{\r\n            public String word;\r\n            public State parent = null;\r\n            public Hashtable<String, String> previous = new Hashtable<String,String>();\r\n            public State(String word){\r\n                this.word = word;\r\n                previous.put(this.word, this.word);\r\n            }\r\n            private State(String word, State parent, Hashtable previous){\r\n                this.word = word;\r\n                this.parent = parent;\r\n                this.previous = previous;\r\n                previous.put(this.word, this.word);\r\n            }\r\n            public List<State> getChildren(){\r\n                ArrayList<State> children = new ArrayList<State>();\r\n                for (String word : dictionary){\r\n                    if (compareWords(this.word,word) && !previous.contains(word))\r\n                        children.add(new State(word, this, previous));\r\n                }\r\n                return children;\r\n            }\r\n            private boolean compareWords(String firstWord, String secondWord){\r\n                int numFalse = 0;\r\n                for (int i = 0; i < firstWord.length();i++)\r\n                {\r\n                    if (firstWord.charAt(i) != secondWord.charAt(i)){\r\n                        numFalse++;\r\n                        if (numFalse > 1)\r\n                            return false;\r\n                    }\r\n                }\r\n                if (numFalse == 1)\r\n                    return true;\r\n                return false;\r\n            }\r\n            public String getPrintValue(){\r\n                if (parent != null)\r\n                    return (parent.getPrintValue()+\"\\n\"+word);\r\n                else\r\n                    return (\"\\n\" + word);\r\n            }\r\n\r\n        }\r\n\r\n}", "problem": 5}}, {"pk": 63, "model": "challenges.solution", "fields": {"language": 16, "title": "Solution for Problem Two", "author": 66, "submitted": "2010-10-25", "source": "import java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Hashtable;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\n/**\r\n *\r\n * @author koryk\r\n */\r\npublic class WordLaddersTwo {\r\nprivate static final int WORDLENGTH = 5;\r\n        private String[] dict = {\"which\",\"there\",\"their\",\"about\",\"would\",\"these\",\"other\",\"words\",\"could\",\"write\",\"first\",\"water\",\"after\",\"where\",\"right\",\"think\",\"three\",\"years\",\"place\",\"sound\",\"great\",\"again\",\"still\",\"every\",\"small\",\"found\",\"those\",\"never\",\"under\",\"might\",\"while\",\"house\",\"world\",\"below\",\"asked\",\"going\",\"large\",\"until\",\"along\",\"shall\",\"being\",\"often\",\"earth\",\"began\",\"since\",\"study\",\"night\",\"light\",\"above\",\"paper\",\"parts\",\"young\",\"story\",\"point\",\"times\",\"heard\",\"whole\",\"white\",\"given\",\"means\",\"music\",\"miles\",\"thing\",\"today\",\"later\",\"using\",\"money\",\"lines\",\"order\",\"group\",\"among\",\"learn\",\"known\",\"space\",\"table\",\"early\",\"trees\",\"short\",\"hands\",\"state\",\"black\",\"shown\",\"stood\",\"front\",\"voice\",\"kinds\",\"makes\",\"comes\",\"close\",\"power\",\"lived\",\"vowel\",\"taken\",\"built\",\"heart\",\"ready\",\"quite\",\"class\",\"bring\",\"round\",\"horse\",\"shows\",\"piece\",\"green\",\"stand\",\"birds\",\"start\",\"river\",\"tried\",\"least\",\"field\",\"whose\",\"girls\",\"leave\",\"added\",\"color\",\"third\",\"hours\",\"moved\",\"plant\",\"doing\",\"names\",\"forms\",\"heavy\",\"ideas\",\"cried\",\"check\",\"floor\",\"begin\",\"woman\",\"alone\",\"plane\",\"spell\",\"watch\",\"carry\",\"wrote\",\"clear\",\"named\",\"books\",\"child\",\"glass\",\"human\",\"takes\",\"party\",\"build\",\"seems\",\"blood\",\"sides\",\"seven\",\"mouth\",\"solve\",\"north\",\"value\",\"death\",\"maybe\",\"happy\",\"tells\",\"gives\",\"looks\",\"shape\",\"lives\",\"steps\",\"areas\",\"sense\",\"speak\",\"force\",\"ocean\",\"speed\",\"women\",\"metal\",\"south\",\"grass\",\"scale\",\"cells\",\"lower\",\"sleep\",\"wrong\",\"pages\",\"ships\",\"needs\",\"rocks\",\"eight\",\"major\",\"level\",\"total\",\"ahead\",\"reach\",\"stars\",\"store\",\"sight\",\"terms\",\"catch\",\"works\",\"board\",\"cover\",\"songs\",\"equal\",\"stone\",\"waves\",\"guess\",\"dance\",\"spoke\",\"break\",\"cause\",\"radio\",\"weeks\",\"lands\",\"basic\",\"liked\",\"trade\",\"fresh\",\"final\",\"fight\",\"meant\",\"drive\",\"spent\",\"local\",\"waxes\",\"knows\",\"train\",\"bread\",\"homes\",\"teeth\",\"coast\",\"thick\",\"brown\",\"clean\",\"quiet\",\"sugar\",\"facts\",\"steel\",\"forth\",\"rules\",\"notes\",\"units\",\"peace\",\"month\",\"verbs\",\"seeds\",\"helps\",\"sharp\",\"visit\",\"woods\",\"chief\",\"walls\",\"cross\",\"wings\",\"grown\",\"cases\",\"foods\",\"crops\",\"fruit\",\"stick\",\"wants\",\"stage\",\"sheep\",\"nouns\",\"plain\",\"drink\",\"bones\",\"apart\",\"turns\",\"moves\",\"touch\",\"angle\",\"based\",\"range\",\"marks\",\"tired\",\"older\",\"farms\",\"spend\",\"shoes\",\"goods\",\"chair\",\"twice\",\"cents\",\"empty\",\"alike\",\"style\",\"broke\",\"pairs\",\"count\",\"enjoy\",\"score\",\"shore\",\"roots\",\"paint\",\"heads\",\"shook\",\"serve\",\"angry\",\"crowd\",\"wheel\",\"quick\",\"dress\",\"share\",\"alive\",\"noise\",\"solid\",\"cloth\",\"signs\",\"hills\",\"types\",\"drawn\",\"worth\",\"truck\",\"piano\",\"upper\",\"loved\",\"usual\",\"faces\",\"drove\",\"cabin\",\"boats\",\"towns\",\"proud\",\"court\",\"model\",\"prime\",\"fifty\",\"plans\",\"yards\",\"prove\",\"tools\",\"price\",\"sheet\",\"smell\",\"boxes\",\"raise\",\"match\",\"truth\",\"roads\",\"threw\",\"enemy\",\"lunch\",\"chart\",\"scene\",\"graph\",\"doubt\",\"guide\",\"winds\",\"block\",\"grain\",\"smoke\",\"mixed\",\"games\",\"wagon\",\"sweet\",\"topic\",\"extra\",\"plate\",\"title\",\"knife\",\"fence\",\"falls\",\"cloud\",\"wheat\",\"plays\",\"enter\",\"broad\",\"steam\",\"atoms\",\"press\",\"lying\",\"basis\",\"clock\",\"taste\",\"grows\",\"thank\",\"storm\",\"agree\",\"brain\",\"track\",\"smile\",\"funny\",\"beach\",\"stock\",\"hurry\",\"saved\",\"sorry\",\"giant\",\"trail\",\"offer\",\"ought\",\"rough\",\"daily\",\"avoid\",\"keeps\",\"throw\",\"allow\",\"cream\",\"laugh\",\"edges\",\"teach\",\"frame\",\"bells\",\"dream\",\"magic\",\"occur\",\"ended\",\"chord\",\"false\",\"skill\",\"holes\",\"dozen\",\"brave\",\"apple\",\"climb\",\"outer\",\"pitch\",\"ruler\",\"holds\",\"fixed\",\"costs\",\"calls\",\"blank\",\"staff\",\"labor\",\"eaten\",\"youth\",\"tones\",\"honor\",\"globe\",\"gases\",\"doors\",\"poles\",\"loose\",\"apply\",\"tears\",\"exact\",\"brush\",\"chest\",\"layer\",\"whale\",\"minor\",\"faith\",\"tests\",\"judge\",\"items\",\"worry\",\"waste\",\"hoped\",\"strip\",\"begun\",\"aside\",\"lakes\",\"bound\",\"depth\",\"candy\",\"event\",\"worse\",\"aware\",\"shell\",\"rooms\",\"ranch\",\"image\",\"snake\",\"aloud\",\"dried\",\"likes\",\"motor\",\"pound\",\"knees\",\"refer\",\"fully\",\"chain\",\"shirt\",\"flour\",\"drops\",\"spite\",\"orbit\",\"banks\",\"shoot\",\"curve\",\"tribe\",\"tight\",\"blind\",\"slept\",\"shade\",\"claim\",\"flies\",\"theme\",\"queen\",\"fifth\",\"union\",\"hence\",\"straw\",\"entry\",\"issue\",\"birth\",\"feels\",\"anger\",\"brief\",\"rhyme\",\"glory\",\"guard\",\"flows\",\"flesh\",\"owned\",\"trick\",\"yours\",\"sizes\",\"noted\",\"width\",\"burst\",\"route\",\"lungs\",\"uncle\",\"bears\",\"royal\",\"kings\",\"forty\",\"trial\",\"cards\",\"brass\",\"opera\",\"chose\",\"owner\",\"vapor\",\"beats\",\"mouse\",\"tough\",\"wires\",\"meter\",\"tower\",\"finds\",\"inner\",\"stuck\",\"arrow\",\"poems\",\"label\",\"swing\",\"solar\",\"truly\",\"tense\",\"beans\",\"split\",\"rises\",\"weigh\",\"hotel\",\"stems\",\"pride\",\"swung\",\"grade\",\"digit\",\"badly\",\"boots\",\"pilot\",\"sales\",\"swept\",\"lucky\",\"prize\",\"stove\",\"tubes\",\"acres\",\"wound\",\"steep\",\"slide\",\"trunk\",\"error\",\"porch\",\"slave\",\"exist\",\"faced\",\"mines\",\"marry\",\"juice\",\"raced\",\"waved\",\"goose\",\"trust\",\"fewer\",\"favor\",\"mills\",\"views\",\"joint\",\"eager\",\"spots\",\"blend\",\"rings\",\"adult\",\"index\",\"nails\",\"horns\",\"balls\",\"flame\",\"rates\",\"drill\",\"trace\",\"skins\",\"waxed\",\"seats\",\"stuff\",\"ratio\",\"minds\",\"dirty\",\"silly\",\"coins\",\"hello\",\"trips\",\"leads\",\"rifle\",\"hopes\",\"bases\",\"shine\",\"bench\",\"moral\",\"fires\",\"meals\",\"shake\",\"shops\",\"cycle\",\"movie\",\"slope\",\"canoe\",\"teams\",\"folks\",\"fired\",\"bands\",\"thumb\",\"shout\",\"canal\",\"habit\",\"reply\",\"ruled\",\"fever\",\"crust\",\"shelf\",\"walks\",\"midst\",\"crack\",\"print\",\"tales\",\"coach\",\"stiff\",\"flood\",\"verse\",\"awake\",\"rocky\",\"march\",\"fault\",\"swift\",\"faint\",\"civil\",\"ghost\",\"feast\",\"blade\",\"limit\",\"germs\",\"reads\",\"ducks\",\"dairy\",\"worst\",\"gifts\",\"lists\",\"stops\",\"rapid\",\"brick\",\"claws\",\"beads\",\"beast\",\"skirt\",\"cakes\",\"lions\",\"frogs\",\"tries\",\"nerve\",\"grand\",\"armed\",\"treat\",\"honey\",\"moist\",\"legal\",\"penny\",\"crown\",\"shock\",\"taxes\",\"sixty\",\"altar\",\"pulls\",\"sport\",\"drums\",\"talks\",\"dying\",\"dates\",\"drank\",\"blows\",\"lever\",\"wages\",\"proof\",\"drugs\",\"tanks\",\"sings\",\"tails\",\"pause\",\"herds\",\"arose\",\"hated\",\"clues\",\"novel\",\"shame\",\"burnt\",\"races\",\"flash\",\"weary\",\"heels\",\"token\",\"coats\",\"spare\",\"shiny\",\"alarm\",\"dimes\",\"sixth\",\"clerk\",\"mercy\",\"sunny\",\"guest\",\"float\",\"shone\",\"pipes\",\"worms\",\"bills\",\"sweat\",\"suits\",\"smart\",\"upset\",\"rains\",\"sandy\",\"rainy\",\"parks\",\"sadly\",\"fancy\",\"rider\",\"unity\",\"bunch\",\"rolls\",\"crash\",\"craft\",\"newly\",\"gates\",\"hatch\",\"paths\",\"funds\",\"wider\",\"grace\",\"grave\",\"tides\",\"admit\",\"shift\",\"sails\",\"pupil\",\"tiger\",\"angel\",\"cruel\",\"agent\",\"drama\",\"urged\",\"patch\",\"nests\",\"vital\",\"sword\",\"blame\",\"weeds\",\"screw\",\"vocal\",\"bacon\",\"chalk\",\"cargo\",\"crazy\",\"acted\",\"goats\",\"arise\",\"witch\",\"loves\",\"queer\",\"dwell\",\"backs\",\"ropes\",\"shots\",\"merry\",\"phone\",\"cheek\",\"peaks\",\"ideal\",\"beard\",\"eagle\",\"creek\",\"cries\",\"ashes\",\"stall\",\"yield\",\"mayor\",\"opens\",\"input\",\"fleet\",\"tooth\",\"cubic\",\"wives\",\"burns\",\"poets\",\"apron\",\"spear\",\"organ\",\"cliff\",\"stamp\",\"paste\",\"rural\",\"baked\",\"chase\",\"slice\",\"slant\",\"knock\",\"noisy\",\"sorts\",\"stays\",\"wiped\",\"blown\",\"piled\",\"clubs\",\"cheer\",\"widow\",\"twist\",\"tenth\",\"hides\",\"comma\",\"sweep\",\"spoon\",\"stern\",\"crept\",\"maple\",\"deeds\",\"rides\",\"muddy\",\"crime\",\"jelly\",\"ridge\",\"drift\",\"dusty\",\"devil\",\"tempo\",\"humor\",\"sends\",\"steal\",\"tents\",\"waist\",\"roses\",\"reign\",\"noble\",\"cheap\",\"dense\",\"linen\",\"geese\",\"woven\",\"posts\",\"hired\",\"wrath\",\"salad\",\"bowed\",\"tires\",\"shark\",\"belts\",\"grasp\",\"blast\",\"polar\",\"fungi\",\"tends\",\"pearl\",\"loads\",\"jokes\",\"veins\",\"frost\",\"hears\",\"loses\",\"hosts\",\"diver\",\"phase\",\"toads\",\"alert\",\"tasks\",\"seams\",\"coral\",\"focus\",\"naked\",\"puppy\",\"jumps\",\"spoil\",\"quart\",\"macro\",\"fears\",\"flung\",\"spark\",\"vivid\",\"brook\",\"steer\",\"spray\",\"decay\",\"ports\",\"socks\",\"urban\",\"goals\",\"grant\",\"minus\",\"films\",\"tunes\",\"shaft\",\"firms\",\"skies\",\"bride\",\"wreck\",\"flock\",\"stare\",\"hobby\",\"bonds\",\"dared\",\"faded\",\"thief\",\"crude\",\"pants\",\"flute\",\"votes\",\"tonal\",\"radar\",\"wells\",\"skull\",\"hairs\",\"argue\",\"wears\",\"dolls\",\"voted\",\"caves\",\"cared\",\"broom\",\"scent\",\"panel\",\"fairy\",\"olive\",\"bends\",\"prism\",\"lamps\",\"cable\",\"peach\",\"ruins\",\"rally\",\"schwa\",\"lambs\",\"sells\",\"cools\",\"draft\",\"charm\",\"limbs\",\"brake\",\"gazed\",\"cubes\",\"delay\",\"beams\",\"fetch\",\"ranks\",\"array\",\"harsh\",\"camel\",\"vines\",\"picks\",\"naval\",\"purse\",\"rigid\",\"crawl\",\"toast\",\"soils\",\"sauce\",\"basin\",\"ponds\",\"twins\",\"wrist\",\"fluid\",\"pools\",\"brand\",\"stalk\",\"robot\",\"reeds\",\"hoofs\",\"buses\",\"sheer\",\"grief\",\"bloom\",\"dwelt\",\"melts\",\"risen\",\"flags\",\"knelt\",\"fiber\",\"roofs\",\"freed\",\"armor\",\"piles\",\"aimed\",\"algae\",\"twigs\",\"lemon\",\"ditch\",\"drunk\",\"rests\",\"chill\",\"slain\",\"panic\",\"cords\",\"tuned\",\"crisp\",\"ledge\",\"dived\",\"swamp\",\"clung\",\"stole\",\"molds\",\"yarns\",\"liver\",\"gauge\",\"breed\",\"stool\",\"gulls\",\"awoke\",\"gross\",\"diary\",\"rails\",\"belly\",\"trend\",\"flask\",\"stake\",\"fried\",\"draws\",\"actor\",\"handy\",\"bowls\",\"haste\",\"scope\",\"deals\",\"knots\",\"moons\",\"essay\",\"thump\",\"hangs\",\"bliss\",\"dealt\",\"gains\",\"bombs\",\"clown\",\"palms\",\"cones\",\"roast\",\"tidal\",\"bored\",\"chant\",\"acids\",\"dough\",\"camps\",\"swore\",\"lover\",\"hooks\",\"males\",\"cocoa\",\"punch\",\"award\",\"reins\",\"ninth\",\"noses\",\"links\",\"drain\",\"fills\",\"nylon\",\"lunar\",\"pulse\",\"flown\",\"elbow\",\"fatal\",\"sites\",\"moths\",\"meats\",\"foxes\",\"mined\",\"attic\",\"fiery\",\"mount\",\"usage\",\"swear\",\"snowy\",\"rusty\",\"scare\",\"traps\",\"relax\",\"react\",\"valid\",\"robin\",\"cease\",\"gills\",\"prior\",\"safer\",\"polio\",\"loyal\",\"swell\",\"salty\",\"marsh\",\"vague\",\"weave\",\"mound\",\"seals\",\"mules\",\"virus\",\"scout\",\"acute\",\"windy\",\"stout\",\"folds\",\"seize\",\"hilly\",\"joins\",\"pluck\",\"stack\",\"lords\",\"dunes\",\"burro\",\"hawks\",\"trout\",\"feeds\",\"scarf\",\"halls\",\"coals\",\"towel\",\"souls\",\"elect\",\"buggy\",\"pumps\",\"loans\",\"spins\",\"files\",\"oxide\",\"pains\",\"photo\",\"rival\",\"flats\",\"syrup\",\"rodeo\",\"sands\",\"moose\",\"pints\",\"curly\",\"comic\",\"cloak\",\"onion\",\"clams\",\"scrap\",\"didst\",\"couch\",\"codes\",\"fails\",\"ounce\",\"lodge\",\"greet\",\"gypsy\",\"utter\",\"paved\",\"zones\",\"fours\",\"alley\",\"tiles\",\"bless\",\"crest\",\"elder\",\"kills\",\"yeast\",\"erect\",\"bugle\",\"medal\",\"roles\",\"hound\",\"snail\",\"alter\",\"ankle\",\"relay\",\"loops\",\"zeros\",\"bites\",\"modes\",\"debts\",\"realm\",\"glove\",\"rayon\",\"swims\",\"poked\",\"stray\",\"lifts\",\"maker\",\"lumps\",\"graze\",\"dread\",\"barns\",\"docks\",\"masts\",\"pours\",\"wharf\",\"curse\",\"plump\",\"robes\",\"seeks\",\"cedar\",\"curls\",\"jolly\",\"myths\",\"cages\",\"gloom\",\"locks\",\"pedal\",\"beets\",\"crows\",\"anode\",\"slash\",\"creep\",\"rowed\",\"chips\",\"fists\",\"wines\",\"cares\",\"valve\",\"newer\",\"motel\",\"ivory\",\"necks\",\"clamp\",\"barge\",\"blues\",\"alien\",\"frown\",\"strap\",\"crews\",\"shack\",\"gonna\",\"saves\",\"stump\",\"ferry\",\"idols\",\"cooks\",\"juicy\",\"glare\",\"carts\",\"alloy\",\"bulbs\",\"lawns\",\"lasts\",\"fuels\",\"oddly\",\"crane\",\"filed\",\"weird\",\"shawl\",\"slips\",\"troop\",\"bolts\",\"suite\",\"sleek\",\"quilt\",\"tramp\",\"blaze\",\"atlas\",\"odors\",\"scrub\",\"crabs\",\"probe\",\"logic\",\"adobe\",\"exile\",\"rebel\",\"grind\",\"sting\",\"spine\",\"cling\",\"desks\",\"grove\",\"leaps\",\"prose\",\"lofty\",\"agony\",\"snare\",\"tusks\",\"bulls\",\"moods\",\"humid\",\"finer\",\"dimly\",\"plank\",\"china\",\"pines\",\"guilt\",\"sacks\",\"brace\",\"quote\",\"lathe\",\"gaily\",\"fonts\",\"scalp\",\"adopt\",\"foggy\",\"ferns\",\"grams\",\"clump\",\"perch\",\"tumor\",\"teens\",\"crank\",\"fable\",\"hedge\",\"genes\",\"sober\",\"boast\",\"tract\",\"cigar\",\"unite\",\"owing\",\"thigh\",\"haiku\",\"swish\",\"dikes\",\"wedge\",\"booth\",\"eased\",\"frail\",\"cough\",\"tombs\",\"darts\",\"forts\",\"choir\",\"pouch\",\"pinch\",\"hairy\",\"buyer\",\"torch\",\"vigor\",\"waltz\",\"heats\",\"herbs\",\"users\",\"flint\",\"click\",\"madam\",\"bleak\",\"blunt\",\"aided\",\"lacks\",\"masks\",\"waded\",\"risks\",\"nurse\",\"chaos\",\"sewed\",\"cured\",\"ample\",\"lease\",\"steak\",\"sinks\",\"merit\",\"bluff\",\"bathe\",\"gleam\",\"bonus\",\"colts\",\"shear\",\"gland\",\"silky\",\"skate\",\"birch\",\"anvil\",\"sleds\",\"groan\",\"maids\",\"meets\",\"speck\",\"hymns\",\"hints\",\"drown\",\"bosom\",\"slick\",\"quest\",\"coils\",\"spied\",\"snows\",\"stead\",\"snack\",\"plows\",\"blond\",\"tamed\",\"thorn\",\"waits\",\"glued\",\"banjo\",\"tease\",\"arena\",\"bulky\",\"carve\",\"stunt\",\"warms\",\"shady\",\"razor\",\"folly\",\"leafy\",\"notch\",\"fools\",\"otter\",\"pears\",\"flush\",\"genus\",\"ached\",\"fives\",\"flaps\",\"spout\",\"smote\",\"fumes\",\"adapt\",\"cuffs\",\"tasty\",\"stoop\",\"clips\",\"disks\",\"sniff\",\"lanes\",\"brisk\",\"imply\",\"demon\",\"super\",\"furry\",\"raged\",\"growl\",\"texts\",\"hardy\",\"stung\",\"typed\",\"hates\",\"wiser\",\"timid\",\"serum\",\"beaks\",\"rotor\",\"casts\",\"baths\",\"glide\",\"plots\",\"trait\",\"resin\",\"slums\",\"lyric\",\"puffs\",\"decks\",\"brood\",\"mourn\",\"aloft\",\"abuse\",\"whirl\",\"edged\",\"ovary\",\"quack\",\"heaps\",\"slang\",\"await\",\"civic\",\"saint\",\"bevel\",\"sonar\",\"aunts\",\"packs\",\"froze\",\"tonic\",\"corps\",\"swarm\",\"frank\",\"repay\",\"gaunt\",\"wired\",\"niece\",\"cello\",\"needy\",\"chuck\",\"stony\",\"media\",\"surge\",\"hurts\",\"repel\",\"husky\",\"dated\",\"hunts\",\"mists\",\"exert\",\"dries\",\"mates\",\"sworn\",\"baker\",\"spice\",\"oasis\",\"boils\",\"spurs\",\"doves\",\"sneak\",\"paces\",\"colon\",\"siege\",\"strum\",\"drier\",\"cacao\",\"humus\",\"bales\",\"piped\",\"nasty\",\"rinse\",\"boxer\",\"shrub\",\"amuse\",\"tacks\",\"cited\",\"slung\",\"delta\",\"laden\",\"larva\",\"rents\",\"yells\",\"spool\",\"spill\",\"crush\",\"jewel\",\"snaps\",\"stain\",\"kicks\",\"tying\",\"slits\",\"rated\",\"eerie\",\"smash\",\"plums\",\"zebra\",\"earns\",\"bushy\",\"scary\",\"squad\",\"tutor\",\"silks\",\"slabs\",\"bumps\",\"evils\",\"fangs\",\"snout\",\"peril\",\"pivot\",\"yacht\",\"lobby\",\"jeans\",\"grins\",\"viola\",\"liner\",\"comet\",\"scars\",\"chops\",\"raids\",\"eater\",\"slate\",\"skips\",\"soles\",\"misty\",\"urine\",\"knobs\",\"sleet\",\"holly\",\"pests\",\"forks\",\"grill\",\"trays\",\"pails\",\"borne\",\"tenor\",\"wares\",\"carol\",\"woody\",\"canon\",\"wakes\",\"kitty\",\"miner\",\"polls\",\"shaky\",\"nasal\",\"scorn\",\"chess\",\"taxis\",\"crate\",\"shyly\",\"tulip\",\"forge\",\"nymph\",\"budge\",\"lowly\",\"abide\",\"depot\",\"oases\",\"asses\",\"sheds\",\"fudge\",\"pills\",\"rivet\",\"thine\",\"groom\",\"lanky\",\"boost\",\"broth\",\"heave\",\"gravy\",\"beech\",\"timed\",\"quail\",\"inert\",\"gears\",\"chick\",\"hinge\",\"trash\",\"clash\",\"sighs\",\"renew\",\"bough\",\"dwarf\",\"slows\",\"quill\",\"shave\",\"spore\",\"sixes\",\"chunk\",\"madly\",\"paced\",\"braid\",\"fuzzy\",\"motto\",\"spies\",\"slack\",\"mucus\",\"magma\",\"awful\",\"discs\",\"erase\",\"posed\",\"asset\",\"cider\",\"taper\",\"theft\",\"churn\",\"satin\",\"slots\",\"taxed\",\"bully\",\"sloth\",\"shale\",\"tread\",\"raked\",\"curds\",\"manor\",\"aisle\",\"bulge\",\"loins\",\"stair\",\"tapes\",\"leans\",\"bunks\",\"squat\",\"towed\",\"lance\",\"panes\",\"sakes\",\"heirs\",\"caste\",\"dummy\",\"pores\",\"fauna\",\"crook\",\"poise\",\"epoch\",\"risky\",\"warns\",\"fling\",\"berry\",\"grape\",\"flank\",\"drags\",\"squid\",\"pelts\",\"icing\",\"irony\",\"irons\",\"barks\",\"whoop\",\"choke\",\"diets\",\"whips\",\"tally\",\"dozed\",\"twine\",\"kites\",\"bikes\",\"ticks\",\"riots\",\"roars\",\"vault\",\"looms\",\"scold\",\"blink\",\"dandy\",\"pupae\",\"sieve\",\"spike\",\"ducts\",\"lends\",\"pizza\",\"brink\",\"widen\",\"plumb\",\"pagan\",\"feats\",\"bison\",\"soggy\",\"scoop\",\"argon\",\"nudge\",\"skiff\",\"amber\",\"sexes\",\"rouse\",\"salts\",\"hitch\",\"exalt\",\"leash\",\"dined\",\"chute\",\"snort\",\"gusts\",\"melon\",\"cheat\",\"reefs\",\"llama\",\"lasso\",\"debut\",\"quota\",\"oaths\",\"prone\",\"mixes\",\"rafts\",\"dives\",\"stale\",\"inlet\",\"flick\",\"pinto\",\"brows\",\"untie\",\"batch\",\"greed\",\"chore\",\"stirs\",\"blush\",\"onset\",\"barbs\",\"volts\",\"beige\",\"swoop\",\"paddy\",\"laced\",\"shove\",\"jerky\",\"poppy\",\"leaks\",\"fares\",\"dodge\",\"godly\",\"squaw\",\"affix\",\"brute\",\"nicer\",\"undue\",\"snarl\",\"merge\",\"doses\",\"showy\",\"daddy\",\"roost\",\"vases\",\"swirl\",\"petty\",\"colds\",\"curry\",\"cobra\",\"genie\",\"flare\",\"messy\",\"cores\",\"soaks\",\"ripen\",\"whine\",\"amino\",\"plaid\",\"spiny\",\"mowed\",\"baton\",\"peers\",\"vowed\",\"pious\",\"swans\",\"exits\",\"afoot\",\"plugs\",\"idiom\",\"chili\",\"rites\",\"serfs\",\"cleft\",\"berth\",\"grubs\",\"annex\",\"dizzy\",\"hasty\",\"latch\",\"wasps\",\"mirth\",\"baron\",\"plead\",\"aloof\",\"aging\",\"pixel\",\"bared\",\"mummy\",\"hotly\",\"auger\",\"buddy\",\"chaps\",\"badge\",\"stark\",\"fairs\",\"gully\",\"mumps\",\"emery\",\"filly\",\"ovens\",\"drone\",\"gauze\",\"idiot\",\"fussy\",\"annoy\",\"shank\",\"gouge\",\"bleed\",\"elves\",\"roped\",\"unfit\",\"baggy\",\"mower\",\"scant\",\"grabs\",\"fleas\",\"lousy\",\"album\",\"sawed\",\"cooky\",\"murky\",\"infer\",\"burly\",\"waged\",\"dingy\",\"brine\",\"kneel\",\"creak\",\"vanes\",\"smoky\",\"spurt\",\"combs\",\"easel\",\"laces\",\"humps\",\"rumor\",\"aroma\",\"horde\",\"swiss\",\"leapt\",\"opium\",\"slime\",\"afire\",\"pansy\",\"mares\",\"soaps\",\"husks\",\"snips\",\"hazel\",\"lined\",\"cafes\",\"naive\",\"wraps\",\"sized\",\"piers\",\"beset\",\"agile\",\"tongs\",\"steed\",\"fraud\",\"booty\",\"valor\",\"downy\",\"witty\",\"mossy\",\"psalm\",\"scuba\",\"tours\",\"polka\",\"milky\",\"gaudy\",\"shrug\",\"tufts\",\"wilds\",\"laser\",\"truss\",\"hares\",\"creed\",\"lilac\",\"siren\",\"tarry\",\"bribe\",\"swine\",\"muted\",\"flips\",\"cures\",\"sinew\",\"boxed\",\"hoops\",\"gasps\",\"hoods\",\"niche\",\"yucca\",\"glows\",\"sewer\",\"whack\",\"fuses\",\"gowns\",\"droop\",\"bucks\",\"pangs\",\"mails\",\"whisk\",\"haven\",\"clasp\",\"sling\",\"stint\",\"urges\",\"champ\",\"piety\",\"chirp\",\"pleat\",\"posse\",\"sunup\",\"menus\",\"howls\",\"quake\",\"knack\",\"plaza\",\"fiend\",\"caked\",\"bangs\",\"erupt\",\"poker\",\"olden\",\"cramp\",\"voter\",\"poses\",\"manly\",\"slump\",\"fined\",\"grips\",\"gaped\",\"purge\",\"hiked\",\"maize\",\"fluff\",\"strut\",\"sloop\",\"prowl\",\"roach\",\"cocks\",\"bland\",\"dials\",\"plume\",\"slaps\",\"soups\",\"dully\",\"wills\",\"foams\",\"solos\",\"skier\",\"eaves\",\"totem\",\"fused\",\"latex\",\"veils\",\"mused\",\"mains\",\"myrrh\",\"racks\",\"galls\",\"gnats\",\"bouts\",\"sisal\",\"shuts\",\"hoses\",\"dryly\",\"hover\",\"gloss\",\"seeps\",\"denim\",\"putty\",\"guppy\",\"leaky\",\"dusky\",\"filth\",\"oboes\",\"spans\",\"fowls\",\"adorn\",\"glaze\",\"haunt\",\"dares\",\"obeys\",\"bakes\",\"abyss\",\"smelt\",\"gangs\",\"aches\",\"trawl\",\"claps\",\"undid\",\"spicy\",\"hoist\",\"fades\",\"vicar\",\"acorn\",\"pussy\",\"gruff\",\"musty\",\"tarts\",\"snuff\",\"hunch\",\"truce\",\"tweed\",\"dryer\",\"loser\",\"sheaf\",\"moles\",\"lapse\",\"tawny\",\"vexed\",\"autos\",\"wager\",\"domes\",\"sheen\",\"clang\",\"spade\",\"sowed\",\"broil\",\"slyly\",\"studs\",\"grunt\",\"donor\",\"slugs\",\"aspen\",\"homer\",\"croak\",\"tithe\",\"halts\",\"avert\",\"havoc\",\"hogan\",\"glint\",\"ruddy\",\"jeeps\",\"flaky\",\"ladle\",\"taunt\",\"snore\",\"fines\",\"props\",\"prune\",\"pesos\",\"radii\",\"pokes\",\"tiled\",\"daisy\",\"heron\",\"villa\",\"farce\",\"binds\",\"cites\",\"fixes\",\"jerks\",\"livid\",\"waked\",\"inked\",\"booms\",\"chews\",\"licks\",\"hyena\",\"scoff\",\"lusty\",\"sonic\",\"smith\",\"usher\",\"tucks\",\"vigil\",\"molts\",\"sects\",\"spars\",\"dumps\",\"scaly\",\"wisps\",\"sores\",\"mince\",\"panda\",\"flier\",\"axles\",\"plied\",\"booby\",\"patio\",\"rabbi\",\"petal\",\"polyp\",\"tints\",\"grate\",\"troll\",\"tolls\",\"relic\",\"phony\",\"bleat\",\"flaws\",\"flake\",\"snags\",\"aptly\",\"drawl\",\"ulcer\",\"soapy\",\"bossy\",\"monks\",\"crags\",\"caged\",\"twang\",\"diner\",\"taped\",\"cadet\",\"grids\",\"spawn\",\"guile\",\"noose\",\"mores\",\"girth\",\"slimy\",\"aides\",\"spasm\",\"burrs\",\"alibi\",\"lymph\",\"saucy\",\"muggy\",\"liter\",\"joked\",\"goofy\",\"exams\",\"enact\",\"stork\",\"lured\",\"toxic\",\"omens\",\"nears\",\"covet\",\"wrung\",\"forum\",\"venom\",\"moody\",\"alder\",\"sassy\",\"flair\",\"guild\",\"prays\",\"wrens\",\"hauls\",\"stave\",\"tilts\",\"pecks\",\"stomp\",\"gales\",\"tempt\",\"capes\",\"mesas\",\"omits\",\"tepee\",\"harry\",\"wring\",\"evoke\",\"limes\",\"cluck\",\"lunge\",\"highs\",\"canes\",\"giddy\",\"lithe\",\"verge\",\"khaki\",\"queue\",\"loath\",\"foyer\",\"outdo\",\"fared\",\"deter\",\"crumb\",\"astir\",\"spire\",\"jumpy\",\"extol\",\"buoys\",\"stubs\",\"lucid\",\"thong\",\"afore\",\"whiff\",\"maxim\",\"hulls\",\"clogs\",\"slats\",\"jiffy\",\"arbor\",\"cinch\",\"igloo\",\"goody\",\"gazes\",\"dowel\",\"calms\",\"bitch\",\"scowl\",\"gulps\",\"coded\",\"waver\",\"mason\",\"lobes\",\"ebony\",\"flail\",\"isles\",\"clods\",\"dazed\",\"adept\",\"oozed\",\"sedan\",\"clays\",\"warts\",\"ketch\",\"skunk\",\"manes\",\"adore\",\"sneer\",\"mango\",\"fiord\",\"flora\",\"roomy\",\"minks\",\"thaws\",\"watts\",\"freer\",\"exult\",\"plush\",\"paled\",\"twain\",\"clink\",\"scamp\",\"pawed\",\"grope\",\"bravo\",\"gable\",\"stink\",\"sever\",\"waned\",\"rarer\",\"regal\",\"wards\",\"fawns\",\"babes\",\"unify\",\"amend\",\"oaken\",\"glade\",\"visor\",\"hefty\",\"nines\",\"throb\",\"pecan\",\"butts\",\"pence\",\"sills\",\"jails\",\"flyer\",\"saber\",\"nomad\",\"miter\",\"beeps\",\"domed\",\"gulfs\",\"curbs\",\"heath\",\"moors\",\"aorta\",\"larks\",\"tangy\",\"wryly\",\"cheep\",\"rages\",\"evade\",\"lures\",\"freak\",\"vogue\",\"tunic\",\"slams\",\"knits\",\"dumpy\",\"mania\",\"spits\",\"firth\",\"hikes\",\"trots\",\"nosed\",\"clank\",\"dogma\",\"bloat\",\"balsa\",\"graft\",\"middy\",\"stile\",\"keyed\",\"finch\",\"sperm\",\"chaff\",\"wiles\",\"amigo\",\"copra\",\"amiss\",\"eying\",\"twirl\",\"lurch\",\"popes\",\"chins\",\"smock\",\"tines\",\"guise\",\"grits\",\"junks\",\"shoal\",\"cache\",\"tapir\",\"atoll\",\"deity\",\"toils\",\"spree\",\"mocks\",\"scans\",\"shorn\",\"revel\",\"raven\",\"hoary\",\"reels\",\"scuff\",\"mimic\",\"weedy\",\"corny\",\"truer\",\"rouge\",\"ember\",\"floes\",\"torso\",\"wipes\",\"edict\",\"sulky\",\"recur\",\"groin\",\"baste\",\"kinks\",\"surer\",\"piggy\",\"moldy\",\"franc\",\"liars\",\"inept\",\"gusty\",\"facet\",\"jetty\",\"equip\",\"leper\",\"slink\",\"soars\",\"cater\",\"dowry\",\"sided\",\"yearn\",\"decoy\",\"taboo\",\"ovals\",\"heals\",\"pleas\",\"beret\",\"spilt\",\"gayly\",\"rover\",\"endow\",\"pygmy\",\"carat\",\"abbey\",\"vents\",\"waken\",\"chimp\",\"fumed\",\"sodas\",\"vinyl\",\"clout\",\"wades\",\"mites\",\"smirk\",\"bores\",\"bunny\",\"surly\",\"frock\",\"foray\",\"purer\",\"milks\",\"query\",\"mired\",\"blare\",\"froth\",\"gruel\",\"navel\",\"paler\",\"puffy\",\"casks\",\"grime\",\"derby\",\"mamma\",\"gavel\",\"teddy\",\"vomit\",\"moans\",\"allot\",\"defer\",\"wield\",\"viper\",\"louse\",\"erred\",\"hewed\",\"abhor\",\"wrest\",\"waxen\",\"adage\",\"ardor\",\"stabs\",\"pored\",\"rondo\",\"loped\",\"fishy\",\"bible\",\"hires\",\"foals\",\"feuds\",\"jambs\",\"thuds\",\"jeers\",\"knead\",\"quirk\",\"rugby\",\"expel\",\"greys\",\"rigor\",\"ester\",\"lyres\",\"aback\",\"glues\",\"lotus\",\"lurid\",\"rungs\",\"hutch\",\"thyme\",\"valet\",\"tommy\",\"yokes\",\"epics\",\"trill\",\"pikes\",\"ozone\",\"caper\",\"chime\",\"frees\",\"famed\",\"leech\",\"smite\",\"neigh\",\"erode\",\"robed\",\"hoard\",\"salve\",\"conic\",\"gawky\",\"craze\",\"jacks\",\"gloat\",\"mushy\",\"rumps\",\"fetus\",\"wince\",\"pinks\",\"shalt\",\"toots\",\"glens\",\"cooed\",\"rusts\",\"stews\",\"shred\",\"parka\",\"chugs\",\"winks\",\"clots\",\"shrew\",\"booed\",\"filmy\",\"juror\",\"dents\",\"gummy\",\"grays\",\"hooky\",\"butte\",\"dogie\",\"poled\",\"reams\",\"fifes\",\"spank\",\"gayer\",\"tepid\",\"spook\",\"taint\",\"flirt\",\"rogue\",\"spiky\",\"opals\",\"miser\",\"cocky\",\"coyly\",\"balmy\",\"slosh\",\"brawl\",\"aphid\",\"faked\",\"hydra\",\"brags\",\"chide\",\"yanks\",\"allay\",\"video\",\"altos\",\"eases\",\"meted\",\"chasm\",\"longs\",\"excel\",\"taffy\",\"impel\",\"savor\",\"koala\",\"quays\",\"dawns\",\"proxy\",\"clove\",\"duets\",\"dregs\",\"tardy\",\"briar\",\"grimy\",\"ultra\",\"meaty\",\"halve\",\"wails\",\"suede\",\"mauve\",\"envoy\",\"arson\",\"coves\",\"gooey\",\"brews\",\"sofas\",\"chums\",\"amaze\",\"zooms\",\"abbot\",\"halos\",\"scour\",\"suing\",\"cribs\",\"sagas\",\"enema\",\"wordy\",\"harps\",\"coupe\",\"molar\",\"flops\",\"weeps\",\"mints\",\"ashen\",\"felts\",\"askew\",\"munch\",\"mewed\",\"divan\",\"vices\",\"jumbo\",\"blobs\",\"blots\",\"spunk\",\"acrid\",\"topaz\",\"cubed\",\"clans\",\"flees\",\"slurs\",\"gnaws\",\"welds\",\"fords\",\"emits\",\"agate\",\"pumas\",\"mends\",\"darks\",\"dukes\",\"plies\",\"canny\",\"hoots\",\"oozes\",\"lamed\",\"fouls\",\"clefs\",\"nicks\",\"mated\",\"skims\",\"brunt\",\"tuber\",\"tinge\",\"fates\",\"ditty\",\"thins\",\"frets\",\"eider\",\"bayou\",\"mulch\",\"fasts\",\"amass\",\"damps\",\"morns\",\"friar\",\"palsy\",\"vista\",\"croon\",\"conch\",\"udder\",\"tacos\",\"skits\",\"mikes\",\"quits\",\"preen\",\"aster\",\"adder\",\"elegy\",\"pulpy\",\"scows\",\"baled\",\"hovel\",\"lavas\",\"crave\",\"optic\",\"welts\",\"busts\",\"knave\",\"razed\",\"shins\",\"totes\",\"scoot\",\"dears\",\"crock\",\"mutes\",\"trims\",\"skein\",\"doted\",\"shuns\",\"veers\",\"fakes\",\"yoked\",\"wooed\",\"hacks\",\"sprig\",\"wands\",\"lulls\",\"seers\",\"snobs\",\"nooks\",\"pined\",\"perky\",\"mooed\",\"frill\",\"dines\",\"booze\",\"tripe\",\"prong\",\"drips\",\"odder\",\"levee\",\"antic\",\"sidle\",\"pithy\",\"corks\",\"yelps\",\"joker\",\"fleck\",\"buffs\",\"scram\",\"tiers\",\"bogey\",\"doled\",\"irate\",\"vales\",\"coped\",\"hails\",\"elude\",\"bulks\",\"aired\",\"vying\",\"stags\",\"strew\",\"cocci\",\"pacts\",\"scabs\",\"silos\",\"dusts\",\"yodel\",\"terse\",\"jaded\",\"baser\",\"jibes\",\"foils\",\"sways\",\"forgo\",\"slays\",\"preys\",\"treks\",\"quell\",\"peeks\",\"assay\",\"lurks\",\"eject\",\"boars\",\"trite\",\"belch\",\"gnash\",\"wanes\",\"lutes\",\"whims\",\"dosed\",\"chewy\",\"snipe\",\"umbra\",\"teems\",\"dozes\",\"kelps\",\"upped\",\"brawn\",\"doped\",\"shush\",\"rinds\",\"slush\",\"moron\",\"voile\",\"woken\",\"fjord\",\"sheik\",\"jests\",\"kayak\",\"slews\",\"toted\",\"saner\",\"drape\",\"patty\",\"raves\",\"sulfa\",\"grist\",\"skied\",\"vixen\",\"civet\",\"vouch\",\"tiara\",\"homey\",\"moped\",\"runts\",\"serge\",\"kinky\",\"rills\",\"corns\",\"brats\",\"pries\",\"amble\",\"fries\",\"loons\",\"tsars\",\"datum\",\"musky\",\"pigmy\",\"gnome\",\"ravel\",\"ovule\",\"icily\",\"liken\",\"lemur\",\"frays\",\"silts\",\"sifts\",\"plods\",\"ramps\",\"tress\",\"earls\",\"dudes\",\"waive\",\"karat\",\"jolts\",\"peons\",\"beers\",\"horny\",\"pales\",\"wreak\",\"lairs\",\"lynch\",\"stank\",\"swoon\",\"idler\",\"abort\",\"blitz\",\"ensue\",\"atone\",\"bingo\",\"roves\",\"kilts\",\"scald\",\"adios\",\"cynic\",\"dulls\",\"memos\",\"elfin\",\"dales\",\"peels\",\"peals\",\"bares\",\"sinus\",\"crone\",\"sable\",\"hinds\",\"shirk\",\"enrol\",\"wilts\",\"roams\",\"duped\",\"cysts\",\"mitts\",\"safes\",\"spats\",\"coops\",\"filet\",\"knell\",\"refit\",\"covey\",\"punks\",\"kilns\",\"fitly\",\"abate\",\"talcs\",\"heeds\",\"duels\",\"wanly\",\"ruffs\",\"gauss\",\"lapel\",\"jaunt\",\"whelp\",\"cleat\",\"gauzy\",\"dirge\",\"edits\",\"wormy\",\"moats\",\"smear\",\"prods\",\"bowel\",\"frisk\",\"vests\",\"bayed\",\"rasps\",\"tames\",\"delve\",\"embed\",\"befit\",\"wafer\",\"ceded\",\"novas\",\"feign\",\"spews\",\"larch\",\"huffs\",\"doles\",\"mamas\",\"hulks\",\"pried\",\"brims\",\"irked\",\"aspic\",\"swipe\",\"mealy\",\"skimp\",\"bluer\",\"slake\",\"dowdy\",\"penis\",\"brays\",\"pupas\",\"egret\",\"flunk\",\"phlox\",\"gripe\",\"peony\",\"douse\",\"blurs\",\"darns\",\"slunk\",\"lefts\",\"chats\",\"inane\",\"vials\",\"stilt\",\"rinks\",\"woofs\",\"wowed\",\"bongs\",\"frond\",\"ingot\",\"evict\",\"singe\",\"shyer\",\"flied\",\"slops\",\"dolts\",\"drool\",\"dells\",\"whelk\",\"hippy\",\"feted\",\"ether\",\"cocos\",\"hives\",\"jibed\",\"mazes\",\"trios\",\"sirup\",\"squab\",\"laths\",\"leers\",\"pasta\",\"rifts\",\"lopes\",\"alias\",\"whirs\",\"diced\",\"slags\",\"lodes\",\"foxed\",\"idled\",\"prows\",\"plait\",\"malts\",\"chafe\",\"cower\",\"toyed\",\"chefs\",\"keels\",\"sties\",\"racer\",\"etude\",\"sucks\",\"sulks\",\"micas\",\"czars\",\"copse\",\"ailed\",\"abler\",\"rabid\",\"golds\",\"croup\",\"snaky\",\"visas\",\"palls\",\"mopes\",\"boned\",\"wispy\",\"raved\",\"swaps\",\"junky\",\"doily\",\"pawns\",\"tamer\",\"poach\",\"baits\",\"damns\",\"gumbo\",\"daunt\",\"prank\",\"hunks\",\"buxom\",\"heres\",\"honks\",\"stows\",\"unbar\",\"idles\",\"routs\",\"sages\",\"goads\",\"remit\",\"copes\",\"deign\",\"culls\",\"girds\",\"haves\",\"lucks\",\"stunk\",\"dodos\",\"shams\",\"snubs\",\"icons\",\"usurp\",\"dooms\",\"hells\",\"soled\",\"comas\",\"paves\",\"maths\",\"perks\",\"limps\",\"wombs\",\"blurb\",\"daubs\",\"cokes\",\"sours\",\"stuns\",\"cased\",\"musts\",\"coeds\",\"cowed\",\"aping\",\"zoned\",\"rummy\",\"fetes\",\"skulk\",\"quaff\",\"rajah\",\"deans\",\"reaps\",\"galas\",\"tills\",\"roved\",\"kudos\",\"toned\",\"pared\",\"scull\",\"vexes\",\"punts\",\"snoop\",\"bails\",\"dames\",\"hazes\",\"lores\",\"marts\",\"voids\",\"ameba\",\"rakes\",\"adzes\",\"harms\",\"rears\",\"satyr\",\"swill\",\"hexes\",\"colic\",\"leeks\",\"hurls\",\"yowls\",\"ivies\",\"plops\",\"musks\",\"papaw\",\"jells\",\"bused\",\"cruet\",\"bided\",\"filch\",\"zests\",\"rooks\",\"laxly\",\"rends\",\"loams\",\"basks\",\"sires\",\"carps\",\"pokey\",\"flits\",\"muses\",\"bawls\",\"shuck\",\"viler\",\"lisps\",\"peeps\",\"sorer\",\"lolls\",\"prude\",\"diked\",\"floss\",\"flogs\",\"scums\",\"dopes\",\"bogie\",\"pinky\",\"leafs\",\"tubas\",\"scads\",\"lowed\",\"yeses\",\"biked\",\"qualm\",\"evens\",\"caned\",\"gawks\",\"whits\",\"wooly\",\"gluts\",\"romps\",\"bests\",\"dunce\",\"crony\",\"joist\",\"tunas\",\"boner\",\"malls\",\"parch\",\"avers\",\"crams\",\"pares\",\"dally\",\"bigot\",\"kales\",\"flays\",\"leach\",\"gushy\",\"pooch\",\"huger\",\"slyer\",\"golfs\",\"mires\",\"flues\",\"loafs\",\"arced\",\"acnes\",\"neons\",\"fiefs\",\"dints\",\"dazes\",\"pouts\",\"cored\",\"yules\",\"lilts\",\"beefs\",\"mutts\",\"fells\",\"cowls\",\"spuds\",\"lames\",\"jawed\",\"dupes\",\"deads\",\"bylaw\",\"noons\",\"nifty\",\"clued\",\"vireo\",\"gapes\",\"metes\",\"cuter\",\"maims\",\"droll\",\"cupid\",\"mauls\",\"sedge\",\"papas\",\"wheys\",\"eking\",\"loots\",\"hilts\",\"meows\",\"beaus\",\"dices\",\"peppy\",\"riper\",\"fogey\",\"gists\",\"yogas\",\"gilts\",\"skews\",\"cedes\",\"zeals\",\"alums\",\"okays\",\"elope\",\"grump\",\"wafts\",\"soots\",\"blimp\",\"hefts\",\"mulls\",\"hosed\",\"cress\",\"doffs\",\"ruder\",\"pixie\",\"waifs\",\"ousts\",\"pucks\",\"biers\",\"gulch\",\"suets\",\"hobos\",\"lints\",\"brans\",\"teals\",\"garbs\",\"pewee\",\"helms\",\"turfs\",\"quips\",\"wends\",\"banes\",\"napes\",\"icier\",\"swats\",\"bagel\",\"hexed\",\"ogres\",\"goner\",\"gilds\",\"pyres\",\"lards\",\"bides\",\"paged\",\"talon\",\"flout\",\"medic\",\"veals\",\"putts\",\"dirks\",\"dotes\",\"tippy\",\"blurt\",\"piths\",\"acing\",\"barer\",\"whets\",\"gaits\",\"wools\",\"dunks\",\"heros\",\"swabs\",\"dirts\",\"jutes\",\"hemps\",\"surfs\",\"okapi\",\"chows\",\"shoos\",\"dusks\",\"parry\",\"decal\",\"furls\",\"cilia\",\"sears\",\"novae\",\"murks\",\"warps\",\"slues\",\"lamer\",\"saris\",\"weans\",\"purrs\",\"dills\",\"togas\",\"newts\",\"meany\",\"bunts\",\"razes\",\"goons\",\"wicks\",\"ruses\",\"vends\",\"geode\",\"drake\",\"judos\",\"lofts\",\"pulps\",\"lauds\",\"mucks\",\"vises\",\"mocha\",\"oiled\",\"roman\",\"ethyl\",\"gotta\",\"fugue\",\"smack\",\"gourd\",\"bumpy\",\"radix\",\"fatty\",\"borax\",\"cubit\",\"cacti\",\"gamma\",\"focal\",\"avail\",\"papal\",\"golly\",\"elite\",\"versa\",\"billy\",\"adieu\",\"annum\",\"howdy\",\"rhino\",\"norms\",\"bobby\",\"axiom\",\"setup\",\"yolks\",\"terns\",\"mixer\",\"genre\",\"knoll\",\"abode\",\"junta\",\"gorge\",\"combo\",\"alpha\",\"overt\",\"kinda\",\"spelt\",\"prick\",\"nobly\",\"ephod\",\"audio\",\"modal\",\"veldt\",\"warty\",\"fluke\",\"bonny\",\"bream\",\"rosin\",\"bolls\",\"doers\",\"downs\",\"beady\",\"motif\",\"humph\",\"fella\",\"mould\",\"crepe\",\"kerns\",\"aloha\",\"glyph\",\"azure\",\"riser\",\"blest\",\"locus\",\"lumpy\",\"beryl\",\"wanna\",\"brier\",\"tuner\",\"rowdy\",\"mural\",\"timer\",\"canst\",\"krill\",\"quoth\",\"lemme\",\"triad\",\"tenon\",\"amply\",\"deeps\",\"padre\",\"leant\",\"pacer\",\"octal\",\"dolly\",\"trans\",\"sumac\",\"foamy\",\"lolly\",\"giver\",\"quipu\",\"codex\",\"manna\",\"unwed\",\"vodka\",\"ferny\",\"salon\",\"duple\",\"boron\",\"revue\",\"crier\",\"alack\",\"inter\",\"dilly\",\"whist\",\"cults\",\"spake\",\"reset\",\"loess\",\"decor\",\"mover\",\"verve\",\"ethic\",\"gamut\",\"lingo\",\"dunno\",\"align\",\"sissy\",\"incur\",\"reedy\",\"avant\",\"piper\",\"waxer\",\"calyx\",\"basil\",\"coons\",\"seine\",\"piney\",\"lemma\",\"trams\",\"winch\",\"whirr\",\"saith\",\"ionic\",\"heady\",\"harem\",\"tummy\",\"sally\",\"shied\",\"dross\",\"farad\",\"saver\",\"tilde\",\"jingo\",\"bower\",\"serif\",\"facto\",\"belle\",\"inset\",\"bogus\",\"caved\",\"forte\",\"sooty\",\"bongo\",\"toves\",\"credo\",\"basal\",\"yella\",\"aglow\",\"glean\",\"gusto\",\"hymen\",\"ethos\",\"terra\",\"brash\",\"scrip\",\"swash\",\"aleph\",\"tinny\",\"itchy\",\"wanta\",\"trice\",\"jowls\",\"gongs\",\"garde\",\"boric\",\"twill\",\"sower\",\"henry\",\"awash\",\"libel\",\"spurn\",\"sabre\",\"rebut\",\"penal\",\"obese\",\"sonny\",\"quirt\",\"mebbe\",\"tacit\",\"greek\",\"xenon\",\"hullo\",\"pique\",\"roger\",\"negro\",\"hadst\",\"gecko\",\"beget\",\"uncut\",\"aloes\",\"louis\",\"quint\",\"clunk\",\"raped\",\"salvo\",\"diode\",\"matey\",\"hertz\",\"xylem\",\"kiosk\",\"apace\",\"cawed\",\"peter\",\"wench\",\"cohos\",\"sorta\",\"gamba\",\"bytes\",\"tango\",\"nutty\",\"axial\",\"aleck\",\"natal\",\"clomp\",\"gored\",\"siree\",\"bandy\",\"gunny\",\"runic\",\"whizz\",\"rupee\",\"fated\",\"wiper\",\"bards\",\"briny\",\"staid\",\"hocks\",\"ochre\",\"yummy\",\"gents\",\"soupy\",\"roper\",\"swath\",\"cameo\",\"edger\",\"spate\",\"gimme\",\"ebbed\",\"breve\",\"theta\",\"deems\",\"dykes\",\"servo\",\"telly\",\"tabby\",\"tares\",\"blocs\",\"welch\",\"ghoul\",\"vitae\",\"cumin\",\"dinky\",\"bronc\",\"tabor\",\"teeny\",\"comer\",\"borer\",\"sired\",\"privy\",\"mammy\",\"deary\",\"gyros\",\"sprit\",\"conga\",\"quire\",\"thugs\",\"furor\",\"bloke\",\"runes\",\"bawdy\",\"cadre\",\"toxin\",\"annul\",\"egged\",\"anion\",\"nodes\",\"picky\",\"stein\",\"jello\",\"audit\",\"echos\",\"fagot\",\"letup\",\"eyrie\",\"fount\",\"caped\",\"axons\",\"amuck\",\"banal\",\"riled\",\"petit\",\"umber\",\"miler\",\"fibre\",\"agave\",\"bated\",\"bilge\",\"vitro\",\"feint\",\"pudgy\",\"mater\",\"manic\",\"umped\",\"pesky\",\"strep\",\"slurp\",\"pylon\",\"puree\",\"caret\",\"temps\",\"newel\",\"yawns\",\"seedy\",\"treed\",\"coups\",\"rangy\",\"brads\",\"mangy\",\"loner\",\"circa\",\"tibia\",\"afoul\",\"mommy\",\"titer\",\"carne\",\"kooky\",\"motes\",\"amity\",\"suave\",\"hippo\",\"curvy\",\"samba\",\"newsy\",\"anise\",\"imams\",\"tulle\",\"aways\",\"liven\",\"hallo\",\"wales\",\"opted\",\"canto\",\"idyll\",\"bodes\",\"curio\",\"wrack\",\"hiker\",\"chive\",\"yokel\",\"dotty\",\"demur\",\"cusps\",\"specs\",\"quads\",\"laity\",\"toner\",\"decry\",\"writs\",\"saute\",\"clack\",\"aught\",\"logos\",\"tipsy\",\"natty\",\"ducal\",\"bidet\",\"bulgy\",\"metre\",\"lusts\",\"unary\",\"goeth\",\"baler\",\"sited\",\"shies\",\"hasps\",\"brung\",\"holed\",\"swank\",\"looky\",\"melee\",\"huffy\",\"loamy\",\"pimps\",\"titan\",\"binge\",\"shunt\",\"femur\",\"libra\",\"seder\",\"honed\",\"annas\",\"coypu\",\"shims\",\"zowie\",\"jihad\",\"savvy\",\"nadir\",\"basso\",\"monic\",\"maned\",\"mousy\",\"omega\",\"laver\",\"prima\",\"picas\",\"folio\",\"mecca\",\"reals\",\"troth\",\"testy\",\"balky\",\"crimp\",\"chink\",\"abets\",\"splat\",\"abaci\",\"vaunt\",\"cutie\",\"pasty\",\"moray\",\"levis\",\"ratty\",\"islet\",\"joust\",\"motet\",\"viral\",\"nukes\",\"grads\",\"comfy\",\"voila\",\"woozy\",\"blued\",\"whomp\",\"sward\",\"metro\",\"skeet\",\"chine\",\"aerie\",\"bowie\",\"tubby\",\"emirs\",\"coati\",\"unzip\",\"slobs\",\"trike\",\"funky\",\"ducat\",\"dewey\",\"skoal\",\"wadis\",\"oomph\",\"taker\",\"minim\",\"getup\",\"stoic\",\"synod\",\"runty\",\"flyby\",\"braze\",\"inlay\",\"venue\",\"louts\",\"peaty\",\"orlon\",\"humpy\",\"radon\",\"beaut\",\"raspy\",\"unfed\",\"crick\",\"nappy\",\"vizor\",\"yipes\",\"rebus\",\"divot\",\"kiwis\",\"vetch\",\"squib\",\"sitar\",\"kiddo\",\"dyers\",\"cotta\",\"matzo\",\"lager\",\"zebus\",\"crass\",\"dacha\",\"kneed\",\"dicta\",\"fakir\",\"knurl\",\"runny\",\"unpin\",\"julep\",\"globs\",\"nudes\",\"sushi\",\"tacky\",\"stoke\",\"kaput\",\"butch\",\"hulas\",\"croft\",\"achoo\",\"genii\",\"nodal\",\"outgo\",\"spiel\",\"viols\",\"fetid\",\"cagey\",\"fudgy\",\"epoxy\",\"leggy\",\"hanky\",\"lapis\",\"felon\",\"beefy\",\"coots\",\"melba\",\"caddy\",\"segue\",\"betel\",\"frizz\",\"drear\",\"kooks\",\"turbo\",\"hoagy\",\"moult\",\"helix\",\"zonal\",\"arias\",\"nosey\",\"paean\",\"lacey\",\"banns\",\"swain\",\"fryer\",\"retch\",\"tenet\",\"gigas\",\"whiny\",\"ogled\",\"rumen\",\"begot\",\"cruse\",\"abuts\",\"riven\",\"balks\",\"sines\",\"sigma\",\"abase\",\"ennui\",\"gores\",\"unset\",\"augur\",\"sated\",\"odium\",\"latin\",\"dings\",\"moire\",\"scion\",\"henna\",\"kraut\",\"dicks\",\"lifer\",\"prigs\",\"bebop\",\"gages\",\"gazer\",\"fanny\",\"gibes\",\"aural\",\"tempi\",\"hooch\",\"rapes\",\"snuck\",\"harts\",\"techs\",\"emend\",\"ninny\",\"guava\",\"scarp\",\"liege\",\"tufty\",\"sepia\",\"tomes\",\"carob\",\"emcee\",\"prams\",\"poser\",\"verso\",\"hubba\",\"joule\",\"baize\",\"blips\",\"scrim\",\"cubby\",\"clave\",\"winos\",\"rearm\",\"liens\",\"lumen\",\"chump\",\"nanny\",\"trump\",\"fichu\",\"chomp\",\"homos\",\"purty\",\"maser\",\"woosh\",\"patsy\",\"shill\",\"rusks\",\"avast\",\"swami\",\"boded\",\"ahhhh\",\"lobed\",\"natch\",\"shish\",\"tansy\",\"snoot\",\"payer\",\"altho\",\"sappy\",\"laxer\",\"hubby\",\"aegis\",\"riles\",\"ditto\",\"jazzy\",\"dingo\",\"quasi\",\"septa\",\"peaky\",\"lorry\",\"heerd\",\"bitty\",\"payee\",\"seamy\",\"apses\",\"imbue\",\"belie\",\"chary\",\"spoof\",\"phyla\",\"clime\",\"babel\",\"wacky\",\"sumps\",\"skids\",\"khans\",\"crypt\",\"inure\",\"nonce\",\"outen\",\"faire\",\"hooey\",\"anole\",\"kazoo\",\"calve\",\"limbo\",\"argot\",\"ducky\",\"faker\",\"vibes\",\"gassy\",\"unlit\",\"nervy\",\"femme\",\"biter\",\"fiche\",\"boors\",\"gaffe\",\"saxes\",\"recap\",\"synch\",\"facie\",\"dicey\",\"ouija\",\"hewer\",\"legit\",\"gurus\",\"edify\",\"tweak\",\"caron\",\"typos\",\"rerun\",\"polly\",\"surds\",\"hamza\",\"nulls\",\"hater\",\"lefty\",\"mogul\",\"mafia\",\"debug\",\"pates\",\"blabs\",\"splay\",\"talus\",\"porno\",\"moola\",\"nixed\",\"kilos\",\"snide\",\"horsy\",\"gesso\",\"jaggy\",\"trove\",\"nixes\",\"creel\",\"pater\",\"iotas\",\"cadge\",\"skyed\",\"hokum\",\"furze\",\"ankhs\",\"curie\",\"nutsy\",\"hilum\",\"remix\",\"angst\",\"burls\",\"jimmy\",\"veiny\",\"tryst\",\"codon\",\"befog\",\"gamed\",\"flume\",\"axman\",\"doozy\",\"lubes\",\"rheas\",\"bozos\",\"butyl\",\"kelly\",\"mynah\",\"jocks\",\"donut\",\"avian\",\"wurst\",\"chock\",\"quash\",\"quals\",\"hayed\",\"bombe\",\"cushy\",\"spacy\",\"puked\",\"leery\",\"thews\",\"prink\",\"amens\",\"tesla\",\"intro\",\"fiver\",\"frump\",\"capos\",\"opine\",\"coder\",\"namer\",\"jowly\",\"pukes\",\"haled\",\"chard\",\"duffs\",\"bruin\",\"reuse\",\"whang\",\"toons\",\"frats\",\"silty\",\"telex\",\"cutup\",\"nisei\",\"neato\",\"decaf\",\"softy\",\"bimbo\",\"adlib\",\"loony\",\"shoed\",\"agues\",\"peeve\",\"noway\",\"gamey\",\"sarge\",\"reran\",\"epact\",\"potty\",\"coned\",\"upend\",\"narco\",\"ikats\",\"whorl\",\"jinks\",\"tizzy\",\"weepy\",\"posit\",\"marge\",\"vegan\",\"clops\",\"numbs\",\"reeks\",\"rubes\",\"rower\",\"biped\",\"tiffs\",\"hocus\",\"hammy\",\"bunco\",\"fixit\",\"tykes\",\"chaws\",\"yucky\",\"hokey\",\"resew\",\"maven\",\"adman\",\"scuzz\",\"slogs\",\"souse\",\"nacho\",\"mimed\",\"melds\",\"boffo\",\"debit\",\"pinup\",\"vagus\",\"gulag\",\"randy\",\"bosun\",\"educe\",\"faxes\",\"auras\",\"pesto\",\"antsy\",\"betas\",\"fizzy\",\"dorky\",\"snits\",\"moxie\",\"thane\",\"mylar\",\"nobby\",\"gamin\",\"gouty\",\"esses\",\"goyim\",\"paned\",\"druid\",\"jades\",\"rehab\",\"gofer\",\"tzars\",\"octet\",\"homed\",\"socko\",\"dorks\",\"eared\",\"anted\",\"elide\",\"fazes\",\"oxbow\",\"dowse\",\"situs\",\"macaw\",\"scone\",\"drily\",\"hyper\",\"salsa\",\"mooch\",\"gated\",\"unjam\",\"lipid\",\"mitre\",\"venal\",\"knish\",\"ritzy\",\"divas\",\"torus\",\"mange\",\"dimer\",\"recut\",\"meson\",\"wined\",\"fends\",\"phage\",\"fiats\",\"caulk\",\"cavil\",\"panty\",\"roans\",\"bilks\",\"hones\",\"botch\",\"estop\",\"sully\",\"sooth\",\"gelds\",\"ahold\",\"raper\",\"pager\",\"fixer\",\"infix\",\"hicks\",\"tuxes\",\"plebe\",\"twits\",\"abash\",\"twixt\",\"wacko\",\"primp\",\"nabla\",\"girts\",\"miffs\",\"emote\",\"xerox\",\"rebid\",\"shahs\",\"rutty\",\"grout\",\"grift\",\"deify\",\"biddy\",\"kopek\",\"semis\",\"bries\",\"acmes\",\"piton\",\"hussy\",\"torts\",\"disco\",\"whore\",\"boozy\",\"gibed\",\"vamps\",\"amour\",\"soppy\",\"gonzo\",\"durst\",\"wader\",\"tutus\",\"perms\",\"catty\",\"glitz\",\"brigs\",\"nerds\",\"barmy\",\"gizmo\",\"owlet\",\"sayer\",\"molls\",\"shard\",\"whops\",\"comps\",\"corer\",\"colas\",\"matte\",\"droid\",\"ploys\",\"vapid\",\"cairn\",\"deism\",\"mixup\",\"yikes\",\"prosy\",\"raker\",\"flubs\",\"whish\",\"reify\",\"craps\",\"shags\",\"clone\",\"hazed\",\"macho\",\"recto\",\"refix\",\"drams\",\"biker\",\"aquas\",\"porky\",\"doyen\",\"exude\",\"goofs\",\"divvy\",\"noels\",\"jived\",\"hulky\",\"cager\",\"harpy\",\"oldie\",\"vivas\",\"admix\",\"codas\",\"zilch\",\"deist\",\"orcas\",\"retro\",\"pilaf\",\"parse\",\"rants\",\"zingy\",\"toddy\",\"chiff\",\"micro\",\"veeps\",\"girly\",\"nexus\",\"demos\",\"bibbs\",\"antes\",\"lulus\",\"gnarl\",\"zippy\",\"ivied\",\"epees\",\"wimps\",\"tromp\",\"grail\",\"yoyos\",\"poufs\",\"hales\",\"roust\",\"cabal\",\"rawer\",\"pampa\",\"mosey\",\"kefir\",\"burgs\",\"unmet\",\"cuspy\",\"boobs\",\"boons\",\"hypes\",\"dynes\",\"nards\",\"lanai\",\"yogis\",\"sepal\",\"quark\",\"toked\",\"prate\",\"ayins\",\"hawed\",\"swigs\",\"vitas\",\"toker\",\"doper\",\"bossa\",\"linty\",\"foist\",\"mondo\",\"stash\",\"kayos\",\"twerp\",\"zesty\",\"capon\",\"wimpy\",\"rewed\",\"fungo\",\"tarot\",\"frosh\",\"kabob\",\"pinko\",\"redid\",\"mimeo\",\"heist\",\"tarps\",\"lamas\",\"sutra\",\"dinar\",\"whams\",\"busty\",\"spays\",\"mambo\",\"nabob\",\"preps\",\"odour\",\"cabby\",\"conks\",\"sluff\",\"dados\",\"houri\",\"swart\",\"balms\",\"gutsy\",\"faxed\",\"egads\",\"pushy\",\"retry\",\"agora\",\"drubs\",\"daffy\",\"chits\",\"mufti\",\"karma\",\"lotto\",\"toffs\",\"burps\",\"deuce\",\"zings\",\"kappa\",\"clads\",\"doggy\",\"duper\",\"scams\",\"ogler\",\"mimes\",\"throe\",\"zetas\",\"waled\",\"promo\",\"blats\",\"muffs\",\"oinks\",\"viand\",\"coset\",\"finks\",\"faddy\",\"minis\",\"snafu\",\"sauna\",\"usury\",\"muxes\",\"craws\",\"stats\",\"condo\",\"coxes\",\"loopy\",\"dorms\",\"ascot\",\"dippy\",\"execs\",\"dopey\",\"envoi\",\"umpty\",\"gismo\",\"fazed\",\"strop\",\"jives\",\"slims\",\"batik\",\"pings\",\"sonly\",\"leggo\",\"pekoe\",\"prawn\",\"luaus\",\"campy\",\"oodle\",\"prexy\",\"proms\",\"touts\",\"ogles\",\"tweet\",\"toady\",\"naiad\",\"hider\",\"nuked\",\"fatso\",\"sluts\",\"obits\",\"narcs\",\"tyros\",\"delis\",\"wooer\",\"hyped\",\"poset\",\"byway\",\"texas\",\"scrod\",\"avows\",\"futon\",\"torte\",\"tuple\",\"carom\",\"kebab\",\"tamps\",\"jilts\",\"duals\",\"artsy\",\"repro\",\"modem\",\"toped\",\"psych\",\"sicko\",\"klutz\",\"tarns\",\"coxed\",\"drays\",\"cloys\",\"anded\",\"piker\",\"aimer\",\"suras\",\"limos\",\"flack\",\"hapax\",\"dutch\",\"mucky\",\"shire\",\"klieg\",\"staph\",\"layup\",\"tokes\",\"axing\",\"toper\",\"duvet\",\"cowry\",\"profs\",\"blahs\",\"addle\",\"sudsy\",\"batty\",\"coifs\",\"suety\",\"gabby\",\"hafta\",\"pitas\",\"gouda\",\"deice\",\"taupe\",\"topes\",\"duchy\",\"nitro\",\"carny\",\"limey\",\"orals\",\"hirer\",\"taxer\",\"roils\",\"ruble\",\"elate\",\"dolor\",\"wryer\",\"snots\",\"quais\",\"coked\",\"gimel\",\"gorse\",\"minas\",\"goest\",\"agape\",\"manta\",\"jings\",\"iliac\",\"admen\",\"offen\",\"cills\",\"offal\",\"lotta\",\"bolas\",\"thwap\",\"alway\",\"boggy\",\"donna\",\"locos\",\"belay\",\"gluey\",\"bitsy\",\"mimsy\",\"hilar\",\"outta\",\"vroom\",\"fetal\",\"raths\",\"renal\",\"dyads\",\"crocs\",\"vires\",\"culpa\",\"kivas\",\"feist\",\"teats\",\"thats\",\"yawls\",\"whens\",\"abaca\",\"ohhhh\",\"aphis\",\"fusty\",\"eclat\",\"perdu\",\"mayst\",\"exeat\",\"molly\",\"supra\",\"wetly\",\"plasm\",\"buffa\",\"semen\",\"pukka\",\"tagua\",\"paras\",\"stoat\",\"secco\",\"carte\",\"haute\",\"molal\",\"shads\",\"forma\",\"ovoid\",\"pions\",\"modus\",\"bueno\",\"rheum\",\"scurf\",\"parer\",\"ephah\",\"doest\",\"sprue\",\"flams\",\"molto\",\"dieth\",\"choos\",\"miked\",\"bronx\",\"goopy\",\"bally\",\"plumy\",\"moony\",\"morts\",\"yourn\",\"bipod\",\"spume\",\"algal\",\"ambit\",\"mucho\",\"spued\",\"dozer\",\"harum\",\"groat\",\"skint\",\"laude\",\"thrum\",\"pappy\",\"oncet\",\"rimed\",\"gigue\",\"limed\",\"plein\",\"redly\",\"humpf\",\"lites\",\"seest\",\"grebe\",\"absit\",\"thanx\",\"pshaw\",\"yawps\",\"plats\",\"payed\",\"areal\",\"tilth\",\"youse\",\"gwine\",\"thees\",\"watsa\",\"lento\",\"spitz\",\"yawed\",\"gipsy\",\"sprat\",\"cornu\",\"amahs\",\"blowy\",\"wahoo\",\"lubra\",\"mecum\",\"whooo\",\"coqui\",\"sabra\",\"edema\",\"mrads\",\"dicot\",\"astro\",\"kited\",\"ouzel\",\"didos\",\"grata\",\"bonne\",\"axmen\",\"klunk\",\"summa\",\"laves\",\"purls\",\"yawny\",\"teary\",\"masse\",\"largo\",\"bazar\",\"pssst\",\"sylph\",\"lulab\",\"toque\",\"fugit\",\"plunk\",\"ortho\",\"lucre\",\"cooch\",\"whipt\",\"folky\",\"tyres\",\"wheee\",\"corky\",\"injun\",\"solon\",\"didot\",\"kerfs\",\"rayed\",\"wassa\",\"chile\",\"begat\",\"nippy\",\"litre\",\"magna\",\"rebox\",\"hydro\",\"milch\",\"brent\",\"gyves\",\"lazed\",\"feued\",\"mavis\",\"inapt\",\"baulk\",\"casus\",\"scrum\",\"wised\",\"fossa\",\"dower\",\"kyrie\",\"bhoys\",\"scuse\",\"feuar\",\"ohmic\",\"juste\",\"ukase\",\"beaux\",\"tusky\",\"orate\",\"musta\",\"lardy\",\"intra\",\"quiff\",\"epsom\",\"neath\",\"ocher\",\"tared\",\"homme\",\"mezzo\",\"corms\",\"psoas\",\"beaky\",\"terry\",\"infra\",\"spivs\",\"tuans\",\"belli\",\"bergs\",\"anima\",\"weirs\",\"mahua\",\"scops\",\"manse\",\"titre\",\"curia\",\"kebob\",\"cycad\",\"talky\",\"fucks\",\"tapis\",\"amide\",\"dolce\",\"sloes\",\"jakes\",\"russe\",\"blash\",\"tutti\",\"pruta\",\"panga\",\"blebs\",\"tench\",\"swarf\",\"herem\",\"missy\",\"merse\",\"pawky\",\"limen\",\"vivre\",\"chert\",\"unsee\",\"tiros\",\"brack\",\"foots\",\"welsh\",\"fosse\",\"knops\",\"ileum\",\"noire\",\"firma\",\"podgy\",\"laird\",\"thunk\",\"shute\",\"rowan\",\"shoji\",\"poesy\",\"uncap\",\"fames\",\"glees\",\"costa\",\"turps\",\"fores\",\"solum\",\"imago\",\"byres\",\"fondu\",\"coney\",\"polis\",\"dictu\",\"kraal\",\"sherd\",\"mumbo\",\"wroth\",\"chars\",\"unbox\",\"vacuo\",\"slued\",\"weest\",\"hades\",\"wiled\",\"syncs\",\"muser\",\"excon\",\"hoars\",\"sibyl\",\"passe\",\"joeys\",\"lotsa\",\"lepta\",\"shays\",\"bocks\",\"endue\",\"darer\",\"nones\",\"ileus\",\"plash\",\"busby\",\"wheal\",\"buffo\",\"yobbo\",\"biles\",\"poxes\",\"rooty\",\"licit\",\"terce\",\"bromo\",\"hayey\",\"dweeb\",\"imbed\",\"saran\",\"bruit\",\"punky\",\"softs\",\"biffs\",\"loppy\",\"agars\",\"aquae\",\"livre\",\"biome\",\"bunds\",\"shews\",\"diems\",\"ginny\",\"degum\",\"polos\",\"desex\",\"unman\",\"dungy\",\"vitam\",\"wedgy\",\"glebe\",\"apers\",\"ridgy\",\"roids\",\"wifey\",\"vapes\",\"whoas\",\"bunko\",\"yolky\",\"ulnas\",\"reeky\",\"bodge\",\"brant\",\"davit\",\"deque\",\"liker\",\"jenny\",\"tacts\",\"fulls\",\"treap\",\"ligne\",\"acked\",\"refry\",\"vower\",\"aargh\",\"churl\",\"momma\",\"gaols\",\"whump\",\"arras\",\"marls\",\"tiler\",\"grogs\",\"memes\",\"midis\",\"tided\",\"haler\",\"duces\",\"twiny\",\"poste\",\"unrig\",\"prise\",\"drabs\",\"quids\",\"facer\",\"spier\",\"baric\",\"geoid\",\"remap\",\"trier\",\"gunks\",\"steno\",\"stoma\",\"airer\",\"ovate\",\"torah\",\"apian\",\"smuts\",\"pocks\",\"yurts\",\"exurb\",\"defog\",\"nuder\",\"bosky\",\"nimbi\",\"mothy\",\"joyed\",\"labia\",\"pards\",\"jammy\",\"bigly\",\"faxer\",\"hoppy\",\"nurbs\",\"cotes\",\"dishy\",\"vised\",\"celeb\",\"pismo\",\"casas\",\"withs\",\"dodgy\",\"scudi\",\"mungs\",\"muons\",\"ureas\",\"ioctl\",\"unhip\",\"krone\",\"sager\",\"verst\",\"expat\",\"gronk\",\"uvula\",\"shawm\",\"bilgy\",\"braes\",\"cento\",\"webby\",\"lippy\",\"gamic\",\"lordy\",\"mazed\",\"tings\",\"shoat\",\"faery\",\"wirer\",\"diazo\",\"carer\",\"rater\",\"greps\",\"rente\",\"zloty\",\"viers\",\"unapt\",\"poops\",\"fecal\",\"kepis\",\"taxon\",\"eyers\",\"wonts\",\"spina\",\"stoae\",\"yenta\",\"pooey\",\"buret\",\"japan\",\"bedew\",\"hafts\",\"selfs\",\"oared\",\"herby\",\"pryer\",\"oakum\",\"dinks\",\"titty\",\"sepoy\",\"penes\",\"fusee\",\"winey\",\"gimps\",\"nihil\",\"rille\",\"giber\",\"ousel\",\"umiak\",\"cuppy\",\"hames\",\"shits\",\"azine\",\"glads\",\"tacet\",\"bumph\",\"coyer\",\"honky\",\"gamer\",\"gooky\",\"waspy\",\"sedgy\",\"bents\",\"varia\",\"djinn\",\"junco\",\"pubic\",\"wilco\",\"lazes\",\"idyls\",\"lupus\",\"rives\",\"snood\",\"schmo\",\"spazz\",\"finis\",\"noter\",\"pavan\",\"orbed\",\"bates\",\"pipet\",\"baddy\",\"goers\",\"shako\",\"stets\",\"sebum\",\"seeth\",\"lobar\",\"raver\",\"ajuga\",\"riced\",\"velds\",\"dribs\",\"ville\",\"dhows\",\"unsew\",\"halma\",\"krona\",\"limby\",\"jiffs\",\"treys\",\"bauds\",\"pffft\",\"mimer\",\"plebs\",\"caner\",\"jiber\",\"cuppa\",\"washy\",\"chuff\",\"unarm\",\"yukky\",\"styes\",\"waker\",\"flaks\",\"maces\",\"rimes\",\"gimpy\",\"guano\",\"liras\",\"kapok\",\"scuds\",\"bwana\",\"oring\",\"aider\",\"prier\",\"klugy\",\"monte\",\"golem\",\"velar\",\"firer\",\"pieta\",\"umbel\",\"campo\",\"unpeg\",\"fovea\",\"abeam\",\"boson\",\"asker\",\"goths\",\"vocab\",\"vined\",\"trows\",\"tikis\",\"loper\",\"indie\",\"boffs\",\"spang\",\"grapy\",\"tater\",\"ichor\",\"kilty\",\"lochs\",\"supes\",\"degas\",\"flics\",\"torsi\",\"beths\",\"weber\",\"resaw\",\"lawny\",\"coven\",\"mujik\",\"relet\",\"therm\",\"heigh\",\"shnor\",\"trued\",\"zayin\",\"liest\",\"barfs\",\"bassi\",\"qophs\",\"roily\",\"flabs\",\"punny\",\"okras\",\"hanks\",\"dipso\",\"nerfs\",\"fauns\",\"calla\",\"pseud\",\"lurer\",\"magus\",\"obeah\",\"atria\",\"twink\",\"palmy\",\"pocky\",\"pends\",\"recta\",\"plonk\",\"slaws\",\"keens\",\"nicad\",\"pones\",\"inker\",\"whews\",\"groks\",\"mosts\",\"trews\",\"ulnar\",\"gyppy\",\"cocas\",\"expos\",\"eruct\",\"oiler\",\"vacua\",\"dreck\",\"dater\",\"arums\",\"tubal\",\"voxel\",\"dixit\",\"beery\",\"assai\",\"lades\",\"actin\",\"ghoti\",\"buzzy\",\"meads\",\"grody\",\"ribby\",\"clews\",\"creme\",\"email\",\"pyxie\",\"kulak\",\"bocci\",\"rived\",\"duddy\",\"hoper\",\"lapin\",\"wonks\",\"petri\",\"phial\",\"fugal\",\"holon\",\"boomy\",\"duomo\",\"musos\",\"shier\",\"hayer\",\"porgy\",\"hived\",\"litho\",\"fisty\",\"stagy\",\"luvya\",\"maria\",\"smogs\",\"asana\",\"yogic\",\"slomo\",\"fawny\",\"amine\",\"wefts\",\"gonad\",\"twirp\",\"brava\",\"plyer\",\"fermi\",\"loges\",\"niter\",\"revet\",\"unate\",\"gyved\",\"totty\",\"zappy\",\"honer\",\"giros\",\"dicer\",\"calks\",\"luxes\",\"monad\",\"cruft\",\"quoin\",\"fumer\",\"amped\",\"shlep\",\"vinca\",\"yahoo\",\"vulva\",\"zooey\",\"dryad\",\"nixie\",\"moper\",\"iambs\",\"lunes\",\"nudie\",\"limns\",\"weals\",\"nohow\",\"miaow\",\"gouts\",\"mynas\",\"mazer\",\"kikes\",\"oxeye\",\"stoup\",\"jujus\",\"debar\",\"pubes\",\"taels\",\"defun\",\"rands\",\"blear\",\"paver\",\"goosy\",\"sprog\",\"oleos\",\"toffy\",\"pawer\",\"maced\",\"crits\",\"kluge\",\"tubed\",\"sahib\",\"ganef\",\"scats\",\"sputa\",\"vaned\",\"acned\",\"taxol\",\"plink\",\"oweth\",\"tribs\",\"resay\",\"boule\",\"thous\",\"haply\",\"glans\",\"maxis\",\"bezel\",\"antis\",\"porks\",\"quoit\",\"alkyd\",\"glary\",\"beamy\",\"hexad\",\"bonks\",\"tecum\",\"kerbs\",\"filar\",\"frier\",\"redux\",\"abuzz\",\"fader\",\"shoer\",\"couth\",\"trues\",\"guyed\",\"goony\",\"booky\",\"fuzes\",\"hurly\",\"genet\",\"hodad\",\"calix\",\"filer\",\"pawls\",\"iodic\",\"utero\",\"henge\",\"unsay\",\"liers\",\"piing\",\"weald\",\"sexed\",\"folic\",\"poxed\",\"cunts\",\"anile\",\"kiths\",\"becks\",\"tatty\",\"plena\",\"rebar\",\"abled\",\"toyer\",\"attar\",\"teaks\",\"aioli\",\"awing\",\"anent\",\"feces\",\"redip\",\"wists\",\"prats\",\"mesne\",\"muter\",\"smurf\",\"owest\",\"bahts\",\"lossy\",\"ftped\",\"hunky\",\"hoers\",\"slier\",\"sicks\",\"fatly\",\"delft\",\"hiver\",\"himbo\",\"pengo\",\"busks\",\"loxes\",\"zonks\",\"ilium\",\"aport\",\"ikons\",\"mulct\",\"reeve\",\"civvy\",\"canna\",\"barfy\",\"kaiak\",\"scudo\",\"knout\",\"gaper\",\"bhang\",\"pease\",\"uteri\",\"lases\",\"paten\",\"rasae\",\"axels\",\"stoas\",\"ombre\",\"styli\",\"gunky\",\"hazer\",\"kenaf\",\"ahoys\",\"ammos\",\"weeny\",\"urger\",\"kudzu\",\"paren\",\"bolos\",\"fetor\",\"nitty\",\"techy\",\"lieth\",\"somas\",\"darky\",\"villi\",\"gluon\",\"janes\",\"cants\",\"farts\",\"socle\",\"jinns\",\"ruing\",\"slily\",\"ricer\",\"hadda\",\"wowee\",\"rices\",\"nerts\",\"cauls\",\"swive\",\"lilty\",\"micks\",\"arity\",\"pasha\",\"finif\",\"oinky\",\"gutty\",\"tetra\",\"wises\",\"wolds\",\"balds\",\"picot\",\"whats\",\"shiki\",\"bungs\",\"snarf\",\"legos\",\"dungs\",\"stogy\",\"berms\",\"tangs\",\"vails\",\"roods\",\"morel\",\"sware\",\"elans\",\"latus\",\"gules\",\"razer\",\"doxie\",\"buena\",\"overs\",\"gutta\",\"zincs\",\"nates\",\"kirks\",\"tikes\",\"donee\",\"jerry\",\"mohel\",\"ceder\",\"doges\",\"unmap\",\"folia\",\"rawly\",\"snark\",\"topoi\",\"ceils\",\"immix\",\"yores\",\"diest\",\"bubba\",\"pomps\",\"forky\",\"turdy\",\"lawzy\",\"poohs\",\"worts\",\"gloms\",\"beano\",\"muley\",\"barky\",\"tunny\",\"auric\",\"funks\",\"gaffs\",\"cordy\",\"curdy\",\"lisle\",\"toric\",\"soyas\",\"reman\",\"mungy\",\"carpy\",\"apish\",\"oaten\",\"gappy\",\"aurae\",\"bract\",\"rooky\",\"axled\",\"burry\",\"sizer\",\"proem\",\"turfy\",\"impro\",\"mashy\",\"miens\",\"nonny\",\"olios\",\"grook\",\"sates\",\"agley\",\"corgi\",\"dashy\",\"doser\",\"dildo\",\"apsos\",\"xored\",\"laker\",\"playa\",\"selah\",\"malty\",\"dulse\",\"frigs\",\"demit\",\"whoso\",\"rials\",\"sawer\",\"spics\",\"bedim\",\"snugs\",\"fanin\",\"azoic\",\"icers\",\"suers\",\"wizen\",\"koine\",\"topos\",\"shirr\",\"rifer\",\"feral\",\"laded\",\"lased\",\"turds\",\"swede\",\"easts\",\"cozen\",\"unhit\",\"pally\",\"aitch\",\"sedum\",\"coper\",\"ruche\",\"geeks\",\"swags\",\"etext\",\"algin\",\"offed\",\"ninja\",\"holer\",\"doter\",\"toter\",\"besot\",\"dicut\",\"macer\",\"peens\",\"pewit\",\"redox\",\"poler\",\"yecch\",\"fluky\",\"doeth\",\"twats\",\"cruds\",\"bebug\",\"bider\",\"stele\",\"hexer\",\"wests\",\"gluer\",\"pilau\",\"abaft\",\"whelm\",\"lacer\",\"inode\",\"tabus\",\"gator\",\"cuing\",\"refly\",\"luted\",\"cukes\",\"bairn\",\"bight\",\"arses\",\"crump\",\"loggy\",\"blini\",\"spoor\",\"toyon\",\"harks\",\"wazoo\",\"fenny\",\"naves\",\"keyer\",\"tufas\",\"morph\",\"rajas\",\"typal\",\"spiff\",\"oxlip\",\"unban\",\"mussy\",\"finny\",\"rimer\",\"login\",\"molas\",\"cirri\",\"huzza\",\"agone\",\"unsex\",\"unwon\",\"peats\",\"toile\",\"zombi\",\"dewed\",\"nooky\",\"alkyl\",\"ixnay\",\"dovey\",\"holey\",\"cuber\",\"amyls\",\"podia\",\"chino\",\"apnea\",\"prims\",\"lycra\",\"johns\",\"primo\",\"fatwa\",\"egger\",\"hempy\",\"snook\",\"hying\",\"fuzed\",\"barms\",\"crink\",\"moots\",\"yerba\",\"rhumb\",\"unarc\",\"direr\",\"munge\",\"eland\",\"nares\",\"wrier\",\"noddy\",\"atilt\",\"jukes\",\"ender\",\"thens\",\"unfix\",\"doggo\",\"zooks\",\"diddy\",\"shmoo\",\"brusk\",\"prest\",\"curer\",\"pasts\",\"kelpy\",\"bocce\",\"kicky\",\"taros\",\"lings\",\"dicky\",\"nerdy\",\"abend\",\"stela\",\"biggy\",\"laved\",\"baldy\",\"pubis\",\"gooks\",\"wonky\",\"stied\",\"hypos\",\"assed\",\"spumy\",\"osier\",\"roble\",\"rumba\",\"biffy\",\"pupal\"};\r\n\tpublic List<String> dictionary = Arrays.asList(this.dict);\r\n        public static void main(String args[]){\r\n                if (args.length >= 1 && args[0].length() == WORDLENGTH)\r\n\t\t\tnew WordLaddersTwo(args[0]);\r\n\t\telse\r\n\t\t\tSystem.out.println(\"Please enter a 5 letter argument\");\r\n\t}\r\n\tpublic WordLaddersTwo(String startWord){\r\n                if (!dictionary.contains(startWord))\r\n                {\r\n                    System.out.println(\"Dictionary does not contain word\");\r\n                    return;\r\n                }\r\n\t\tLinkedList<State> stack = new LinkedList<State>();\r\n                stack.add(new State(startWord));\r\n                boolean can = false;\r\n                State currentState;\r\n                while (true){\r\n                    currentState = stack.pop();\r\n                    stack.addAll(currentState.getChildren());\r\n                    if (stack.isEmpty()){\r\n                        can = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (can){\r\n                    System.out.println(currentState.getPrintValue());\r\n                    State s = currentState;\r\n                    int count = 0;\r\n                    while (currentState.parent != null){\r\n                        currentState = currentState.parent;\r\n                        count++;\r\n                    }\r\n                    System.out.println(count);\r\n                }\r\n                else {\r\n                    System.out.println(startWord);\r\n                    System.out.println(0);\r\n                }\r\n        }\r\n\tprivate class State{\r\n            public String word;\r\n            public State parent = null;\r\n            public Hashtable<String, String> previous = new Hashtable<String,String>();\r\n            public State(String word){\r\n                this.word = word;\r\n                previous.put(this.word, this.word);\r\n            }\r\n            private State(String word, State parent, Hashtable previous){\r\n                this.word = word;\r\n                this.parent = parent;\r\n                this.previous = previous;\r\n                previous.put(this.word, this.word);\r\n            }\r\n            public List<State> getChildren(){\r\n                ArrayList<State> children = new ArrayList<State>();\r\n                for (String word : dictionary){\r\n                    if (compareWords(this.word,word) && !previous.contains(word))\r\n                        children.add(new State(word, this, previous));\r\n                }\r\n                return children;\r\n            }\r\n            private boolean compareWords(String firstWord, String secondWord){\r\n                int numFalse = 0;\r\n                for (int i = 0; i < firstWord.length();i++)\r\n                {\r\n                    if (firstWord.charAt(i) != secondWord.charAt(i)){\r\n                        numFalse++;\r\n                        if (numFalse > 1)\r\n                            return false;\r\n                    }\r\n                }\r\n                if (numFalse == 1)\r\n                    return true;\r\n                return false;\r\n            }\r\n            public String getPrintValue(){\r\n                if (parent != null)\r\n                    return (parent.getPrintValue()+\"\\n\"+word);\r\n                else\r\n                    return (\"\\n\" + word);\r\n            }\r\n\r\n        }\r\n}", "problem": 5}}, {"pk": 64, "model": "challenges.solution", "fields": {"language": 5, "title": "P1 ", "author": 65, "submitted": "2010-10-25", "source": "/* File: quiz5.cpp\r\n * Author: synx\r\n * Date: 10/24/2010\r\n */\r\n\r\n#include <iostream>\r\n#include <time.h>\r\n#include <fstream>\r\n#include <algorithm>\r\n#include <map>\r\n#include <string>\r\n#include <vector>\r\n\r\n#define NULL_STRING \"\"\r\n#define DEBUG 1\r\n\r\nclass wordLadder {\r\n  std::vector<std::string> wordList;\r\n  std::map<std::string, std::vector<std::string> > neighbors;\r\n  std::vector<std::string> solution;\r\n\r\n  bool isInDict(std::string);\r\n  bool isNeighbor(std::string, std::string);\r\n  void populateNeighborsAsWeGo(std::string);\r\npublic:\r\n  void printResult();\r\n  void go(std::string begin, std::string end);\r\n  void populateWords();\r\n};\r\n\r\nvoid wordLadder::printResult()\r\n{\r\n  for(int i=solution.size()-1; i>=0; i--)\r\n    std::cout << solution[i] << std::endl;\r\n  std::cout << solution.size()-1 << std::endl;\r\n}\r\n\r\nvoid wordLadder::go(std::string begin, std::string end)\r\n{\r\n  std::map<std::string, std::string> previous;\r\n  std::vector<std::string> queue;\r\n  queue.push_back(begin);\r\n  while( queue.size() )\r\n    {\r\n      //all distances same\r\n      std::string cur = queue[0];\r\n      //if at end, no need to search more.\r\n      if(cur == end) break;\r\n      queue.erase(queue.begin());\r\n      std::vector<std::string> curNeighbor = neighbors[cur];\r\n      if( neighbors.count(cur) != 0 && curNeighbor.size() != 0)\r\n\t{\r\n\t  for(int i=0; i<curNeighbor.size(); i++)\r\n\t    {\r\n\t      if(previous[curNeighbor[i]] == NULL_STRING)\r\n\t\t{\r\n\t\t  previous[curNeighbor[i]] = cur;\r\n\t\t  queue.push_back(curNeighbor[i]);\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n\r\n\r\n  //destroy rest\r\n  previous[begin] = NULL_STRING;\r\n  std::string solutionStr = end;\r\n  while(previous[solutionStr] != NULL_STRING && previous.count(solutionStr) != 0)\r\n    {\r\n      solution.push_back(solutionStr);\r\n      solutionStr = previous[solutionStr];\r\n    }\r\n  solution.push_back(begin);\r\n}\r\n \r\nbool wordLadder::isNeighbor(std::string a, std::string b)\r\n{\r\n  int c = 0;\r\n  for(int i=0; i<a.length(); i++)\r\n      if(a[i] != b[i]) { if(++c>1) return false; }\r\n  return c == 1;\r\n} \r\n\r\nbool wordLadder::isInDict(std::string word)\r\n{\r\n  for(int i=0; i<wordList.size(); i++)\r\n    {\r\n      if(wordList[i] == word) return true;\r\n    }\r\n  return false;\r\n}\r\n\r\nvoid wordLadder::populateNeighborsAsWeGo(std::string a)\r\n{\r\n  for(int i=0; i<wordList.size(); i++)\r\n    if( isNeighbor(wordList[i], a) && wordList[i] != a )\r\n      {\r\n\tneighbors[wordList[i]].push_back(a);\r\n\tneighbors[a].push_back(wordList[i]);\r\n      }\r\n}\r\n\r\nvoid wordLadder::populateWords()\r\n{\r\n  std::ifstream cin(\"words.txt\");\r\n  std::string temp;\r\n  while(cin >> temp) { wordList.push_back(temp); populateNeighborsAsWeGo(temp); }\r\n  \r\n}\r\n\r\n\r\nint main(int argc, char ** argv, char ** envp)\r\n{\r\n  wordLadder solve;\r\n  clock_t init=clock();\r\n  solve.populateWords();\r\n  if(DEBUG)\r\n    std::cout << \"Populated in: \" << (double)(clock() - init) / ((double)CLOCKS_PER_SEC) << std::endl;\r\n  init = clock();\r\n  solve.go(\"scale\", \"cloud\");\r\n  //  solve.go(\"snail\", \"zebra\");\r\n  solve.printResult();\r\n  if(DEBUG)\r\n    std::cout << \"Shortest path in: \" << (double)(clock() - init) / ((double)CLOCKS_PER_SEC) << std::endl;\r\n}\r\n  \r\n", "problem": 5}}, {"pk": 65, "model": "challenges.solution", "fields": {"language": 23, "title": "ryanWIN's solution", "author": 68, "submitted": "2010-10-29", "source": "# This basically does a breadth-first search through a graph\r\n# that is built from building all 1-letter-change candidates,\r\n# walking through them, and keeping a list of visited words\r\n# It traverses the graph fairly quickly, though it does take\r\n# FOREVER to build the initial search graph.  </3 CPython\r\n\r\n\r\nimport sys\r\nimport string\r\n\r\nsys.setrecursionlimit(100000)\r\n\r\ndef search(words, graph, visited, parents, word,word2,depth):\r\n    if not words:\r\n        return\r\n    nodes = []\r\n    leafs = []\r\n    found = 0\r\n    for lookup in words:\r\n        if lookup == word2:\r\n            lollers=lookup\r\n            while found==0:\r\n                lollers = parents[lollers]\r\n                if lollers==\"LOL\":\r\n                    found = 1\r\n                else:\r\n                    print lollers\r\n            return depth       \r\n        else:\r\n            if visited[lookup]==1 or lookup==word:\r\n                lol = 1\r\n            else:\r\n                visited[lookup] = 1\r\n                nodes += [lookup]\r\n    for branch in nodes:\r\n        leafs += graph[branch]\r\n        for i in graph[branch]:\r\n            if parents[i]!=\"LOL\" and parents[i]==\"none\":\r\n                parents[i] = branch\r\n    if not leafs:\r\n        return 0\r\n    return search(leafs,graph,visited,parents,word,word2,depth+1)\r\n\r\ndef getlinks(word,word2,graph,words):\r\n    visited = dict((x, 0) for x in words)\r\n    parents = dict((x, \"none\") for x in words)\r\n    parents[word] = \"LOL\"\r\n    visited[word] = 1\r\n    for i in graph[word]:\r\n        if parents[i]!=\"LOL\" and parents[i]==\"none\":\r\n            parents[i] = word\r\n    print word2\r\n    print search(graph[word],graph,visited,parents,word,word2,1)\r\n\r\ndef main(word,word2):\r\n    words = set(open(\"words.txt\").read().split('\\n'))\r\n    graph = {}\r\n    if not word in words or not word2 in words:\r\n            print \"ERRRRRRRRRRRROR: One of these words are not found: \",word,\" \",word2\r\n            return\r\n    for i in words:\r\n        difference = list(i)\r\n        for j in range(len(difference)):\r\n            templetters = list(string.letters[:26])[:]\r\n            templetters.remove(difference[j])\r\n            tempdifference = difference[:]\r\n            del tempdifference[j]\r\n            for k in templetters:\r\n                tempword = [difference[x] for x in range(len(difference)) if x < j] + [k] + [difference[y] for y in range(len(difference)) if y > j]\r\n                tempwordstring = \"\".join(tempword)\r\n                if tempwordstring in words:\r\n                    try:\r\n                        graph[i] += [tempwordstring]\r\n                    except:\r\n                        graph[i] = [tempwordstring]\r\n    getlinks(word2,word,graph,words)\r\n\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    main(sys.argv[1],sys.argv[2])", "problem": 5}}, {"pk": 66, "model": "challenges.solution", "fields": {"language": 23, "title": "simple python p1", "author": 1, "submitted": "2010-10-30", "source": "import collections\r\n\r\ndef is_linked(w1,w2):\r\n    \"\"\"\r\n    Test if two words differ by one character.\r\n    \"\"\"\r\n    n = 0\r\n    for a,b in zip(w1,w2):\r\n        if a is not b: n += 1\r\n        if n > 1: return False\r\n    return n == 1\r\n\r\n\r\ndef hamming_distance(w1,w2):\r\n    \"\"\"\r\n    Find the minimum number of substitutions required to change one string into the other.\r\n    \"\"\"\r\n    return sum(map(lambda (a,b): a is not b, zip(w1, w2)))\r\n\r\n    \r\ndef build_hamming_graph(filename):\r\n    \"\"\"\r\n    Creates a cyclic hamming graph from a list of words.\r\n    \"\"\"    \r\n    graph = {}\r\n    with open(filename) as f:\r\n        for w1 in f.readlines():\r\n            w1 = w1.strip()\r\n            graph[w1] = []\r\n            for w2 in graph.keys():                \r\n                if is_linked(w1,w2):\r\n                    graph[w1].append(w2)\r\n                    graph[w2].append(w1)\r\n    return graph\r\n\r\n    \r\ndef rebuild_path(came_from, goal):\r\n    \"\"\"\r\n    Takes a dictionary of visited nodes and reconstructs a path.\r\n    \"\"\"\r\n    path = []\r\n    node = goal\r\n    while node in came_from:        \r\n        path.insert(0, node)\r\n        node = came_from[node]\r\n    return [node] + path\r\n\r\n    \r\ndef find_path(graph, start, goal):\r\n    \"\"\"\r\n    Find the shortest path using A*\r\n    \"\"\"\r\n    score = {}\r\n    score[start] = collections.namedtuple('Score', 'g h f')\r\n    score[start].g = 0\r\n    score[start].h = hamming_distance(start, goal)\r\n    score[start].f = score[start].h\r\n    closed_set = set()\r\n    open_set = [start]\r\n    came_from = {}\r\n    while open_set:\r\n        open_set.sort(key=lambda word: score[word].f)\r\n        x = open_set.pop(0)\r\n        if x == goal:\r\n            return rebuild_path(came_from, goal)            \r\n        closed_set.add(x)\r\n        for y in graph[x]:\r\n            if y in closed_set:\r\n                continue\r\n            potential_g = score[x].g + 1\r\n            if y not in open_set:\r\n                open_set.append(y)\r\n                tentative_is_better = True\r\n            elif potential_g < score[y].g:\r\n                tentative_is_better = True\r\n            else:\r\n                tentative_is_better = False                \r\n            if tentative_is_better:\r\n                came_from[y] = x\r\n                score[y] = collections.namedtuple('Score', 'g h f')\r\n                score[y].g = potential_g\r\n                score[y].h = hamming_distance(y, goal)\r\n                score[y].f = score[y].g + score[y].h                    \r\n        \r\n    # failure\r\n    return [ start ]     \r\n\r\n\r\nif __name__ == '__main__':\r\n    \r\n    import sys\r\n    import pickle\r\n    \r\n    start = sys.argv[1]\r\n    goal = sys.argv[2]    \r\n    filename = 'words.txt'\r\n    pfilename = filename + '.p'\r\n    \r\n    try:\r\n        with open(pfilename, 'r') as f:\r\n            graph = pickle.load(f)\r\n    except:    \r\n        print 'Building Hamming graph...'\r\n        graph = build_hamming_graph(filename)\r\n        print 'Pickling...'\r\n        with open(pfilename, 'w') as f:\r\n            pickle.dump(graph, f)\r\n        \r\n    print 'Finding path...'\r\n    path = find_path(graph, start, goal)\r\n        \r\n    for n in path: print n\r\n    print len(path)-1", "problem": 5}}, {"pk": 69, "model": "challenges.solution", "fields": {"language": 16, "title": "A Boring Solution", "author": 60, "submitted": "2011-08-05", "source": "\r\nimport java.util.Scanner;\r\n\r\npublic class R2A {\r\n\tprivate static final String[] tokens = new String[] { \"M\", \"CM\", \"D\", \"CD\",\r\n\t\t\t\"CCC\", \"CC\", \"C\", \"XC\", \"L\", \"XL\", \"XXX\", \"XX\", \"X\", \"IX\", \"V\",\r\n\t\t\t\"IV\", \"III\", \"II\", \"I\" };\r\n\tprivate static final int[] values = new int[] { 1000, 900, 500, 400, 300,\r\n\t\t\t200, 100, 90, 50, 40, 30, 20, 10, 9, 5, 4, 3, 2, 1 };\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\tSystem.out.println(\"Input the empty string at any time to exit.\");\r\n\t\twhile (true) {\r\n\t\t\tSystem.out.print(\"Enter the Roman string: \");\r\n\t\t\tString rome = s.nextLine();\r\n\t\t\tif (rome.length() == 0)\r\n\t\t\t\tbreak;\r\n\t\t\tint calc = calculate(rome);\r\n\t\t\tif (calc < 0)\r\n\t\t\t\tSystem.out.println(\"Invalid roman numeral string.\");\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.println(calc);\r\n\t\t\t\tSystem.out.println(\"Other: \" + reverse(calc));\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(\"Bye!\");\r\n\t}\r\n\r\n\tpublic static int calculate(String rome) {\r\n\t\tint currentPosition = 0;\r\n\t\tint val = 0;\r\n\t\tint lastToken = -1;\r\n\r\n\t\twhile (currentPosition < rome.length()) {\r\n\t\t\tint currToken = -1;\r\n\t\t\tfor (int i = 0; i < tokens.length; i++)\r\n\t\t\t\tif (rome.indexOf(tokens[i], currentPosition) == currentPosition) {\r\n\t\t\t\t\tcurrToken = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\tif (currToken < 0)\r\n\t\t\t\treturn -1;\r\n\r\n\t\t\tif (lastToken > 0)\r\n\t\t\t\tif (values[lastToken] < values[currToken])\r\n\t\t\t\t\treturn -2;\r\n\r\n\t\t\tcurrentPosition += tokens[currToken].length();\r\n\t\t\tval += values[currToken];\r\n\t\t\tlastToken = currToken;\r\n\t\t}\r\n\r\n\t\treturn val;\r\n\t}\r\n\r\n\tpublic static String reverse(int val) {\r\n\t\tString buf = \"\";\r\n\t\twhile (val > 0) {\r\n\t\t\tfor (int i = 0; i < values.length; i++) {\r\n\t\t\t\tif (values[i] <= val) {\r\n\t\t\t\t\tval -= values[i];\r\n\t\t\t\t\tbuf += tokens[i];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Curr buffer: \" + buf + \" val: \" + val);\r\n\t\t}\r\n\t\treturn buf;\r\n\t}\r\n}\r\n", "problem": 7}}, {"pk": 67, "model": "challenges.solution", "fields": {"language": 4, "title": "the easy method", "author": 1, "submitted": "2011-08-05", "source": "#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n\r\n/* this would be faster with a hashmap */\r\n\r\nstruct symbol_table {\r\n\tint num;\r\n\tchar sym[3];\r\n};\r\n\r\nstruct symbol_table symbols[] = {\r\n\t{1000,\t\"M\"},\r\n\t{900,\t\"CM\"},\r\n\t{500, \t\"L\"},\r\n\t{400, \t\"CD\"},\r\n\t{100, \t\"C\"},\r\n\t{90, \t\"XC\"},\r\n\t{50, \t\"L\"},\r\n\t{40, \t\"XL\"},\r\n\t{10, \t\"X\"},\r\n\t{9, \t\"IX\"},\r\n\t{5, \t\"V\"},\r\n\t{4, \t\"IV\"},\r\n\t{1, \t\"I\"}\r\n};\r\n\r\nint \r\nroman_to_arabic(const char *s) \r\n{\r\n\tint total, num, s_len, p_len;\r\n\tstruct symbol_table *sym;\r\n\tchar buf[3];\r\n\tchar *p;\r\n\t\r\n\ts_len = strlen(s);\r\n\tp = (char *) s;\r\n\tp_len = 2;\r\n\ttotal = 0;\r\n\t\t\r\n\twhile (p < s+s_len) {\t\r\n\t\tnum = 0;\t\r\n\t\tstrncpy(buf, p, p_len);\r\n\t\tbuf[p_len] = '\\0';\r\n\t\t\r\n\t\t/* check if the symbol is in the table */\r\n\t\tfor(sym=symbols; sym<symbols+13 && !num; sym++) {\r\n\t\t\tif (strcmp(buf, sym->sym) == 0)\r\n\t\t\t\tnum = sym->num;\r\n\t\t}\r\n\t\t\r\n\t\tif (num) {\r\n\t\t\t/* we found a symbol */\r\n\t\t\ttotal += num;\r\n\t\t\tp += p_len;\r\n\t\t\tp_len = 2;\t\t\t\r\n\t\t\tcontinue; \r\n\t\t} else if (--p_len == 0) {\r\n\t\t\t/* didn't find a symbol, move to the next one */\r\n\t\t\tprintf(\"invalid symbol! %s\\n\", buf);\r\n\t\t\tp_len = 2;\r\n\t\t\tp++;\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\treturn total;\r\n}\r\n\r\nvoid\r\narabic_to_roman(int d, char *buf) \r\n{\r\n\r\n\tstruct symbol_table *sym;\t\r\n\tbuf[0] = '\\0';\r\n\t\t\r\n\twhile (d > 0) {\t\t\r\n\t\tfor(sym=symbols; sym<symbols+13; sym++) {\r\n\t\t\tif (d >= sym->num) {\r\n\t\t\t\tstrcat(buf, sym->sym);\r\n\t\t\t\td -= sym->num;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\nint\r\nmain(int argc, char** argv)\r\n{\r\n\tchar buf[50];\r\n\tint i;\r\n\t\r\n\tfor (i=1; i<=3999; i++) {\t\t\r\n\t\tarabic_to_roman(i, buf);\r\n\t\tprintf(\"%5d -> %-20s\", i, buf);\r\n\t\tprintf(\"%s -> %d\\n\", buf, roman_to_arabic(buf));\r\n\t}\t\r\n\t\r\n\treturn 0;\r\n}", "problem": 7}}, {"pk": 72, "model": "challenges.solution", "fields": {"language": 23, "title": "RAAR", "author": 81, "submitted": "2011-08-05", "source": "\"\"\"\r\nAwesome solution that works with historical examples that don't follow the arbitrarily strict modern spec.\r\n\r\nHas docs and tests too.\r\n\"\"\"\r\nM = 1000\r\nD = 500\r\nC = 100\r\nL = 50\r\nX = 10\r\nV = 5\r\nI = 1\r\n\r\n_val_in_order = sorted(\r\n\t['M', 'D', 'C', 'L', 'X', 'V', 'I'],\r\n\tlambda x, y: locals().get(x) < locals().get(y),\r\n)\r\n_val_dict = dict([(i, locals().get(i)) for i in _val_in_order])\r\n\r\nclass RAAR(object):\r\n\t@staticmethod\r\n\tdef r2a(r):\r\n\t\t\"\"\"\r\n\t\tConvert roman numeral to int\r\n\t\t\"\"\"\r\n\t\tr = r.upper().strip()\r\n\t\tif len(r):\r\n\t\t\t_r = RAAR._fission(r)\r\n\t\t\treturn sum(i[0]*i[1] for i in _r)\r\n\t\traise ValueError\r\n\r\n\t@staticmethod\r\n\tdef _fission(r):\r\n\t\t\"\"\"\r\n\t\tReduces romain numeral from right to left chunks preceded by smaller chunks.\r\n\t\t\"\"\"\r\n\t\tchunks = RAAR._r_chunk(r)\r\n\t\tret = None\r\n\t\twhile 1:\r\n\t\t\tif len(chunks) is 0:\r\n\t\t\t\treturn ret\r\n\t\t\t_cur = chunks.pop()\r\n\t\t\tif ret is None:\r\n\t\t\t\tret = []\r\n\t\t\t\tret.append(_cur)\r\n\t\t\t\tcontinue\r\n\t\t\told = ret.pop()\r\n\t\t\tif old[0] > _cur[0]:\r\n\t\t\t\tnew = (_cur[0], (old[0]/_cur[0] * old[1]) - _cur[1])\r\n\t\t\t\tret.append(new)\r\n\t\t\telse:\r\n\t\t\t\tret.append(old)\r\n\t\t\t\tret.append(_cur)\r\n\r\n\t@staticmethod\r\n\tdef _r_chunk(r):\r\n\t\t\"\"\"\r\n\t\tTakes a string of atoms and returns a list of\r\n\t\tchunks of similiar atoms in same order.\r\n\r\n\t\tThe return value is a list of (value, num_in_chunk) tuples\r\n\t\t\"\"\"\r\n\t\tret = []\r\n\t\t_cur = None\r\n\t\ti = 0\r\n\t\twhile i < len(r):\r\n\t\t\tr_val = RAAR.r_val(r[i])\r\n\t\t\tif _cur is None:\r\n\t\t\t\t_cur = (r_val, 1)\r\n\t\t\telif r_val == _cur[0]:\r\n\t\t\t\t_cur = (_cur[0], _cur[1] + 1)\r\n\t\t\telse:\r\n\t\t\t\tret.append(_cur)\r\n\t\t\t\t_cur = (r_val, 1)\r\n\t\t\ti = i+1\r\n\t\tret.append(_cur)\r\n\t\treturn ret\r\n\r\n\t@staticmethod\r\n\tdef a2r(a):\r\n\t\t\"\"\"\r\n\t\tConvert int to string containing roman numeral representation\r\n\t\t\"\"\"\r\n\t\tchunks = RAAR._a_chunk(a)\r\n\t\tret = \"\".join(RAAR.a_val(i[0])* i[1] for i in chunks)\r\n\t\treturn RAAR._fusion(ret)\r\n\r\n\t@staticmethod\r\n\tdef _fusion(r):\r\n\t\t\"\"\"\r\n\t\tTake replacable chunks and fuse them together\r\n\t\t\"\"\"\r\n\t\tfusable = [\r\n\t\t\t('DCCCC', 'CM'),\r\n\t\t\t('CCCC', 'CD'),\r\n\t\t\t('LXXXX', 'XC'),\r\n\t\t\t('XXXX', 'XL'),\r\n\t\t\t('VIIII', 'IX'),\r\n\t\t\t('IIII', 'IV'),\r\n\t\t]\r\n\t\tfor i, j in fusable:\r\n\t\t\tif i in r:\r\n\t\t\t\tret = r.split(i, 1)\r\n\t\t\t\treturn ret[0] + j + RAAR._fusion(ret[1])\r\n\t\treturn r\r\n\r\n\t@staticmethod\r\n\tdef _a_chunk(a):\r\n\t\t\"\"\"\r\n\t\tTakes a integer and returns a list of\r\n\t\tchunks of basic value atoms.\r\n\r\n\t\tThe return value is a list of (value, num_in_chunk) tuples\r\n\t\t\"\"\"\r\n\t\tret = []\r\n\t\trem = a\r\n\t\tfor i in _val_in_order:\r\n\t\t\tv = RAAR.r_val(i)\r\n\t\t\tn_i = rem/v\r\n \t\t\tret.append((v, n_i))\r\n\t\t\trem = rem % v\r\n\t\treturn ret\r\n\r\n\t@staticmethod\r\n\tdef r_val(r):\r\n\t\treturn _val_dict.get(r)\r\n\r\n\t@staticmethod\r\n\tdef a_val(a):\r\n\t\treturn [k for k, v in _val_dict.iteritems() if v == a][0]\r\n\r\nif __name__ == '__main__':\r\n\tr2a_tests = {\r\n\t\t'MCCCCCCVI': 1606,\r\n\t\t'XXVIIII': 29,\r\n\t\t'IIX': 8,\r\n\t\t'IX': 9,\r\n\t\t'IIII': 4,\r\n\t\t'XC': 90,\r\n\t\t'VV': 10,\r\n\t\t'XLIIII': 44,\r\n\t\t'XCIX': 99,\r\n\t\t'MDCCCCX': 1910,\r\n\t\t'MCMLIV': 1954,\r\n\t\t'I': 1,\r\n\t\t'II': 2,\r\n\t\t'III': 3,\r\n\t\t'IV': 4,\r\n\t\t'V': 5,\r\n\t}\r\n\tfor r, a in r2a_tests.iteritems():\r\n\t\tassert RAAR.r2a(r) == a\r\n\r\n\ta2r_tests = {\r\n\t\t'I': 1,\r\n\t\t'II': 2,\r\n\t\t'III': 3,\r\n\t\t'IV': 4,\r\n\t\t'V': 5,\r\n\t\t'VI': 6,\r\n\t\t'VII': 7,\r\n\t\t'VIII': 8,\r\n\t\t'IX': 9,\r\n\t\t'X': 10,\r\n\t\t'MCMLXXXV': 1985,\r\n\t\t'MCMLIV': 1954,\r\n\t\t'XCIX': 99,\r\n\t}\r\n\tfor r, a in a2r_tests.iteritems():\r\n\t\tassert RAAR.a2r(a) == r\r\n", "problem": 7}}, {"pk": 74, "model": "challenges.solution", "fields": {"language": 5, "title": "Swapping Hillclimber v2", "author": 41, "submitted": "2012-01-10", "source": "#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\n#define INDEX(R,C)\t((R<<2)+C)\r\n#define ABS(A)\t\t((A)<0? -(A):(A))\r\n#define MIN(A,B)\t((A)<(B)? (A):(B))\r\n\r\n#define MAX_WORDS\t5500\r\n#define MAX_LEN\t\t32\r\n\r\n//maxiumum number of each letter to swap around\r\n#define MAX_LTR\t\t4\r\n\r\n#ifndef toupper\r\n#define toupper(C) ((C>0x60 && C<0x7B)? C-0x20:C)\r\n#endif\r\n\r\n#ifndef strupr\r\nchar *strupr(char* s) {\r\n\tchar *p=s;\r\n\twhile(*p=toupper(*p)) p++;\r\n\treturn s;\r\n}\r\n#endif\r\n\r\n#define SWAP(A,B,T)\t\t{T=A; A=B; B=T;}\r\n#define FindLetter(L,M) {for(iIndex=0; iIndex<16; iIndex++) M[iIndex]=(szLetters[iIndex]==L);}\r\n\r\n//best scores found: 44, 30, 38, 396, 1064\r\n\r\nclass cBoggle {\r\npublic:\r\n\tcBoggle() {Clear();}\r\n\t\r\n\t//clear words & letters\r\n\tvoid Clear() {\r\n\t\tiNumWords=0;\r\n\t\tmemset(lprgcFound,0,sizeof(lprgcFound));\r\n\t\tmemset(lprgcCharCount,0,sizeof(lprgcCharCount));\r\n\t\tmemset(lprgcChain,0,sizeof(lprgcChain));\r\n\t\tszLetters[0]='\\0';\r\n\r\n\t\t//set adjecent table lookup\r\n\t\tfor(int iIndex1=0; iIndex1<16; iIndex1++) \r\n\t\t\tfor(int iIndex2=0; iIndex2<16; iIndex2++) \r\n\t\t\t\tbAdjecent[iIndex1][iIndex2]=AreAdjacent(iIndex1,iIndex2);\r\n\t}\r\n\t\r\n\t//determine if two indicies are adjacent\r\n\tint AreAdjacent(int iIndex1, int iIndex2) {\r\n\t\tif(iIndex1<0 || iIndex2<0) return 1;\r\n\r\n\t\tif(iIndex1==iIndex2) return 0;\r\n\r\n\t\tint iRow1=(iIndex1>>2);\r\n\t\tint iCol1=iIndex1%4;\r\n\t\t\r\n\t\tint iRow2=(iIndex2>>2);\r\n\t\tint iCol2=iIndex2%4;\r\n\t\t\r\n\t\tif(ABS(iRow1-iRow2)>1 || ABS(iCol1-iCol2)>1) return 0;\r\n\t\telse return 1;\r\n\t}\r\n\t\r\n\tvoid AddWord(const char *szWord) { //add a word to search for\r\n\t\tstrcpy(lprgszWords[iNumWords++],szWord);\r\n\t\t\r\n\t\tfor(unsigned int iChar=0; iChar<strlen(szWord); iChar++) //add characters in word to count\r\n\t\t\tif(lprgcCharCount[szWord[iChar]]<255)\r\n\t\t\t\tlprgcCharCount[szWord[iChar]]++;\r\n\t}\r\n\t\r\n\tvoid SetLetters() {//set the swap letters by the words\r\n\t\tint iIndex=0;\r\n\t\t\r\n\t\tfor(int iChar=0; iChar<256; iChar++) \r\n\t\t\tfor(int iCount=0; iCount<MIN(MAX_LTR,lprgcCharCount[iChar]); iCount++) \r\n\t\t\t\tszLetters[iIndex++]=iChar;\r\n\t\t\r\n\t\tszLetters[iIndex]='\\0';\r\n\t}\r\n\t\r\n\t//recursively find adjacent letters in a word\r\n\tint FindWordRec(const char *szWord, unsigned int iLetter, int iPrevIndex) {\r\n\t\tchar lprgcMatch[16];\r\n\t\tint iFound=0;\r\n\t\t\r\n\t\tif(!szWord[iLetter]) return 1; //reached the end of the word, found it\r\n\t\t\r\n\t\tFindLetter(szWord[iLetter],lprgcMatch); //find this letter\r\n\t\t\r\n\t\tfor(int iFindIndex=0; iFindIndex<16; iFindIndex++) {\r\n\t\t\tif(!lprgcChain[iFindIndex]) //not already used in this chain\r\n\t\t\t\tif(lprgcMatch[iFindIndex]) //board  letter is a match for this word letter\r\n\t\t\t\t\tif(iPrevIndex<0 || bAdjecent[iFindIndex][iPrevIndex]) { //is adjecent to previous letter\r\n\t\t\t\t\t\tlprgcChain[iFindIndex]=true; //* mark letter as used in this chain\r\n\t\t\t\t\t\tiFound=FindWordRec(szWord,iLetter+1,iFindIndex); //find next adjecent letter in word\r\n\t\t\t\t\t\tlprgcChain[iFindIndex]=false; //* unmark letter\r\n\t\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn iFound;\r\n\t}\r\n\t\r\n\t\r\n\tint FindWord(int iWord) { //find word\r\n\t\tint iFound=FindWordRec(lprgszWords[iWord],0,-1);\r\n\t\tlprgcFound[iWord]=iFound;\r\n\t\treturn iFound;\r\n\t}\r\n\t\r\n\t//get score\r\n\tint Score(FILE *pfFile=stdout) {\r\n\t\tiScore=0;\r\n\t\t\r\n\t\tfor(int iWord=0; iWord<iNumWords; iWord++)\r\n\t\t\tif(FindWord(iWord)) \r\n\t\t\t\tiScore+=strlen(lprgszWords[iWord]);\r\n\t\t\r\n\t\treturn iScore;\r\n\t}\r\n\r\n\t//return number of round words\r\n\tint Found() {\r\n\t\tint iFound=0;\r\n\t\tfor(int iWord=0; iWord<iNumWords; iWord++)\r\n\t\t\tif(lprgcFound[iWord]) iFound++;\r\n\r\n\t\treturn iFound;\r\n\t}\r\n\t\r\n\tvoid PrintCharCount() {\r\n\t\tprintf(\"  A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\\n\");\r\n\t\tfor(int iChar='A'; iChar<='Z'; iChar++)\r\n\t\t\tprintf(\"%3i\",lprgcCharCount[iChar]);\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\t\r\n\tvoid Print(int iFull=false) { //print info\r\n\t\tif(iFull) { //print board & words\r\n\t\t\t//print words\r\n\t\t\tfprintf(stdout,\"\\n\");\r\n\t\t\tfor(int iWord=0; iWord<iNumWords; iWord++) \r\n\t\t\t\tfprintf(stdout,\"%c %s\\n\",(lprgcFound[iWord]? '*':' '),lprgszWords[iWord]);\r\n\r\n\t\t\tfprintf(stdout,\"\\n* * * * * *\\n\");\r\n\t\t\tfor(int iRow=0; iRow<4; iRow++) {\r\n\t\t\t\tfprintf(stdout,\"* \");\r\n\t\t\t\tfor(int iCol=0; iCol<4; iCol++)\r\n\t\t\t\t\tfprintf(stdout,\"%c \",szLetters[INDEX(iRow,iCol)]);\r\n\t\t\t\tfprintf(stdout,\"*\\n\");\r\n\t\t\t}\r\n\t\t\tfprintf(stdout,\"* * * * * *\\n\\n\");\r\n\t\t}\r\n\r\n\t\t//print letters & score\r\n\t\tfprintf(stdout,\"\\n%s\\n\",szLetters);\r\n\t\tfprintf(stdout,\"\\nScore: %i\\n\\n------------------------\\n\",iScore);\r\n\t}\r\n\r\n\tvoid Output(FILE *pfFile) { //output to solution file\r\n\t\tfor(int iRow=0; iRow<4; iRow++) {\r\n\t\t\tfor(int iCol=0; iCol<4; iCol++)\r\n\t\t\t\tfprintf(pfFile,\"%c\",szLetters[INDEX(iRow,iCol)]);\r\n\t\t\tfprintf(pfFile,\"\\n\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t#define Swap(A,B) \t\t{SWAP(szLetters[A],szLetters[B],cTemp)}\r\n\t#define StoreBest()\t\t{strcpy(szBest,szLetters);}\r\n\t#define RestoreBest()\t{strcpy(szLetters,szBest);}\r\n\t#define NewBest() \t\t{iFail=0; iBestScore=iLastScore; /*reset fail counter, store best score*/ \\\r\n\t\t\t\t\t\t\tStoreBest(); Print();} /*store best solution & print*/\r\n\t#define RandSwap()\t\t{iIndex1=rand()%16; iIndex2=rand()%iLength; Swap(iIndex1,iIndex2);}\r\n\r\n\tint Hillclimb(int iMaxFail, int iMaxTime) {\r\n\t\tint iCurScore, iLastScore, iBestScore, iFail=0;\r\n\t\tint iBetterMove, iStartTime, iEndTime=0;\r\n\t\tunsigned int iIndex1, iIndex2, iLength;\r\n\t\t\r\n\t\tSetLetters();\r\n\t\tiLength=strlen(szLetters);\r\n\t\t\r\n\t\tiCurScore=iLastScore=iBestScore=Score(); //initial score\r\n\t\tStoreBest();\r\n\t\tiStartTime=time(0); \r\n\t\r\n\t\twhile(Found()<iNumWords && iFail<iMaxFail && (iEndTime-iStartTime)<iMaxTime) { \r\n\r\n\t\t\tiBetterMove=false;\t//init good & bad moves\r\n\r\n\t\t\tfor(iIndex1=0; iIndex1<iLength; iIndex1++) { //swap iteration\r\n\t\t\t\tfor(iIndex2=0; iIndex2<iLength; iIndex2++) { //swap each set of\r\n\t\t\t\t\tif(szLetters[iIndex1]==szLetters[iIndex2]) continue; //same letter in both positions\r\n\t\t\t\t\tif(iIndex1>16 && iIndex2>16) continue; //both indicies beyond board\r\n\r\n\t\t\t\t\tSwap(iIndex1,iIndex2); iCurScore=Score(); //do swap & score\r\n\t\t\t\t\tif(iCurScore>iLastScore) //move improves the score\r\n\t\t\t\t\t\t{iLastScore=iCurScore; iBetterMove=true;} \r\n\t\t\t\t\tif(iCurScore<iLastScore) Swap(iIndex1,iIndex2); //undo swap if decreased score\r\n\r\n\t\t\t\t\tif(iCurScore>iBestScore) {NewBest();} //new best position\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tiLastScore=Score();\r\n\t\t\tif(iLastScore>iBestScore) {NewBest();} //new best position\r\n\t\r\n\t\t\t#define RAND_SWAP\t2\r\n\t\t\telse {\r\n\t\t\t\tiFail++;\r\n\t\t\t\t\r\n\t\t\t\tif(!(iFail%16)) { //failed to improve for a while\r\n\t\t\t\t\tRestoreBest(); //go back to best\r\n\t\t\t\t\tfor(int iSwap=0; iSwap<(iFail>>2)+2; iSwap++) {RandSwap();} //random swaps\r\n\t\t\t\t\tprintf(\"*\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tiLastScore=Score(); //set score\r\n\t\t\tiEndTime=time(0);\r\n\t\t}\r\n\t\t\r\n\t\tRestoreBest();\r\n\t\treturn iBestScore;\r\n\t}\r\n\t\r\n\tchar lprgszWords[MAX_WORDS][MAX_LEN]; //array of words\r\n\tchar lprgcFound[MAX_WORDS]; //if word is found\r\n\tunsigned char lprgcCharCount[256]; //count for each character in all words\r\n\tchar szLetters[512]; //letter swap area (first 16 is board)\r\n\tchar szBest[512]; //best result\r\n\tchar lprgcChain[16]; //letter used in chain flags\r\n\tchar bAdjecent[16][16]; //table lookup for adjecent letters\r\n\tchar cTemp;\r\n\tint iNumWords, iScore, iIndex;\r\n};\r\n\r\nint main(int argc, char *argv[]) {\r\n\tFILE *pfInput, *pfOutput;\r\n\tchar szFilename[1024], szWord[32];\r\n\tcBoggle bBoggle;\r\n\t\r\n\tif(argc<2) return -1; //no argument\r\n\t\r\n\t//open file\r\n\tstrcpy(szFilename,argv[1]);\r\n\tif(!(pfInput=fopen(szFilename,\"r\"))) return -1; //error opening file\r\n\t\r\n\t//read words from file\r\n\twhile(fscanf(pfInput,\"%[^\\n]\\n\",szWord)==1) {\r\n\t\tstrupr(szWord);\r\n\t\tbBoggle.AddWord(szWord);\r\n\t}\r\n\tfclose(pfInput);\r\n\t\r\n\t//bBoggle.PrintCharCount(); system(\"pause\");\r\n\t\r\n\t//find best score with hillclimber\r\n\tint iCurScore=0, iBestScore=0; \r\n\tint iMaxFail=5000, iMaxTime=120, iStartTime, iEndTime;\r\n\tsrand(time(0));\r\n\t\r\n\tiStartTime=time(0); iBestScore=bBoggle.Hillclimb(iMaxFail,iMaxTime); iEndTime=time(0); //find solution\r\n\t\r\n\tbBoggle.Score(); bBoggle.Print(true); \r\n\tprintf(\"\\nTime: %i seconds\\n\\n\",iEndTime-iStartTime); //print board & execution time\r\n\r\n\tsprintf(szFilename+strlen(szFilename),\"-%i\",iBestScore); //append final distance to original filename\r\n\tpfOutput=fopen(szFilename,\"w\"); bBoggle.Output(pfOutput); fclose(pfOutput); //print solution to output file\r\n\r\n\tsystem(\"pause\");\r\n\t\r\n\treturn 0;\r\n}\r\n", "problem": 8}}, {"pk": 75, "model": "challenges.solution", "fields": {"language": 23, "title": "Weighted scorer solver", "author": 81, "submitted": "2012-01-20", "source": "from weighted_scorer import score\r\nimport random\r\nimport itertools\r\nimport sys\r\nfrom collections import Counter\r\n\r\n\"\"\"\r\nThis file itself requires some associated files available at:\r\n        https://bitbucket.org/sirpengi/proggitquiz8\r\n\r\nYou might as well just clone that repo and then run it out of\r\nthere if you want to test this.\r\n\r\nDo something like:\r\n  cat 1.txt | python weightedgrid_solution.py\r\n\r\nor\r\n  sh runall.sh\r\n\r\nMake sure you're using 2.7 (2.6 might work)\r\n\"\"\"\r\n\r\nclass words_picker(object):\r\n        \"\"\"Creates a picker object that will randomly emit\r\n        letters based on how common each letter is from\r\n        the dictionary.\"\"\"\r\n        def __init__(self, words):\r\n                chars = Counter()\r\n                for word in words:\r\n                        chars.update(word)\r\n                self.chars = \"\".join([c*v for c,v in chars.iteritems()])\r\n\r\n        def get(self, i):\r\n                return \"\".join(random.sample(self.chars, i))\r\n\r\ndef make_random_grid(picker):\r\n        \"\"\"Make a random grid\"\"\"\r\n        letters = picker.get(16)\r\n        return [letters[:4], letters[4:8], letters[8:12], letters[12:]]\r\n\r\ndef replace_low_scores(grid, weights, picker):\r\n        \"\"\"Takes the weighted score, and replace all\r\n        low scores in the grid with new characters.\"\"\"\r\n        top_weight = max(itertools.chain(*weights))\r\n        cut_off = top_weight / 2\r\n        num_replace = sum(1 for i in itertools.chain(*weights) if i <= cut_off)\r\n        replace_chars = list(picker.get(num_replace))\r\n        new_grid = []\r\n        for i in range(4):\r\n                row = []\r\n                for j in range(4):\r\n                        if weights[i][j] <= cut_off:\r\n                                row.append(replace_chars.pop())\r\n                        else:\r\n                                row.append(grid[i][j])\r\n                new_grid.append(\"\".join(row))\r\n        return new_grid\r\n\r\n\r\ndef run(words = None):\r\n        \"\"\"Solve problem using a weighted scoring system.\r\n        Instead of just scoring a grid, this method also keeps\r\n        track of which element of the grid contributes the most\r\n        to the final score.\r\n        \"\"\"\r\n        picker = words_picker(words)\r\n        weighted_grid = None\r\n        top_weight = 0\r\n        grid = None\r\n        points = 0\r\n\r\n        for i in xrange(1000):\r\n                \"\"\"First, create a sample of grids and chose the one\r\n                with the highest top weighted score\"\"\"\r\n                new_grid = make_random_grid(picker)\r\n                new_points, new_weighted_grid = score(new_grid, words)\r\n                new_top_weight = max(itertools.chain(*new_weighted_grid))\r\n                i += 1\r\n                if (new_top_weight > top_weight) or \\\r\n                        (new_top_weight == top_weight and new_points > points):\r\n                        points = new_points\r\n                        grid = new_grid\r\n                        weighted_grid = new_weighted_grid\r\n                        top_weight = new_top_weight\r\n\r\n        for i in xrange(1000):\r\n                \"\"\"Replace the low scoring portions of the grid\r\n                with new characters, and see if it raised the score\r\n                or not.\"\"\"\r\n                new_grid = replace_low_scores(grid, weighted_grid, picker)\r\n                new_points, new_weighted_grid = score(new_grid, words)\r\n                if new_points > points:\r\n                        grid = new_grid\r\n                        points = new_points\r\n                        weighted_grid = new_weighted_grid\r\n        return points, grid\r\n\r\nif __name__ == '__main__':\r\n        data = []\r\n        for line in sys.stdin.readlines():\r\n                data.append(line.strip())\r\n        points, grid = run(data[1:])\r\n        print \"\\n\".join(grid)\r\n        print \"(points:{0})\".format(points)", "problem": 8}}, {"pk": 80, "model": "challenges.solution", "fields": {"language": 4, "title": "random", "author": 80, "submitted": "2012-02-25", "source": "// works well up to 9x10x4\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nchar **grid;\r\nint x, y, n;\r\n\r\nvoid alloc_grid()\r\n{\r\n\tgrid = calloc(x, sizeof(char*));\r\n\tfor (int i=0; i<x; i++) {\r\n\t\tgrid[i] = calloc(y, sizeof(char));\r\n\t}\r\n}\r\n\r\nvoid rand_grid()\r\n{\r\n\tfor (int i=0; i<x; i++) {\r\n\t\tfor (int j=0; j<y; j++) {\r\n\t\t\tgrid[i][j] = rand() % n;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid print_grid()\r\n{\r\n\tfor (int i=0; i<x; i++) {\r\n\t\tfor (int j=0; j<y; j++) {\r\n\t\t\tprintf(\"%d \", grid[i][j]);\r\n\t\t}\r\n\t\tputs(\"\");\r\n\t}\r\n}\r\n\r\nint i_, j_, ii_, jj_;\r\n\r\nint find_rect()\r\n{\r\n\tfor (int i=0; i<x-1; i++) {\r\n\t\tfor (int j=0; j<y-1; j++) {\r\n\t\t\tfor (int ii=i+1; ii<x; ii++) {\r\n\t\t\t\tif (grid[i][j] != grid[ii][j]) continue;\r\n\t\t\t\tfor (int jj=j+1; jj<y; jj++) {\r\n\t\t\t\t\tif (grid[i][j] == grid[i][jj] &&\r\n\t\t\t\t\t\tgrid[i][j] == grid[ii][jj])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ti_ = i;\r\n\t\t\t\t\t\tj_ = j;\r\n\t\t\t\t\t\tii_ = ii;\r\n\t\t\t\t\t\tjj_ = jj;\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\tif (argc < 4) {\r\n\t\tprintf(\"%s x y n\\n\", argv[0]);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tx = atoi(argv[1]);\r\n\ty = atoi(argv[2]);\r\n\tn = atoi(argv[3]);\r\n\r\n\tsrand(time(0));\r\n\r\n\talloc_grid();\r\n\trand_grid();\r\n\r\n\twhile (find_rect()) {\r\n\t\tgrid[i_][j_] = rand() % n;\r\n\t\tgrid[i_][jj_] = rand() % n;\r\n\t\tgrid[ii_][j_] = rand() % n;\r\n\t\tgrid[ii_][jj_] = rand() % n;\r\n\t}\r\n\r\n\tprint_grid();\r\n\r\n\treturn 0;\r\n}", "problem": 9}}, {"pk": 81, "model": "challenges.solution", "fields": {"language": 4, "title": "sup hos", "author": 65, "submitted": "2012-02-28", "source": "/* https://github.com/hornd/monochrome */", "problem": 9}}, {"pk": 197, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-06-05 13:56:26", "object_repr": "Perfect Tic Tac Toe AI", "object_id": "10", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 196, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-06-05 13:55:09", "object_repr": "Perfect Tic Tac Toe AI", "object_id": "10", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 195, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-03-01 11:07:30", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 194, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 16:36:24", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 193, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 16:35:13", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 192, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 16:19:42", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 191, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:39:47", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed status.", "user": 81, "content_type": 13}}, {"pk": 190, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:39:12", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed status.", "user": 81, "content_type": 13}}, {"pk": 189, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:37:01", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 188, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:32:55", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 187, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:31:59", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 186, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:31:37", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body, status, started and completed.", "user": 81, "content_type": 13}}, {"pk": 185, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:25:43", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed body.", "user": 81, "content_type": 13}}, {"pk": 184, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-02-13 15:23:18", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "Changed preamble and body.", "user": 81, "content_type": 13}}, {"pk": 183, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2012-02-13 15:07:01", "object_repr": "N-coloring grid with no monochromatic rectangles", "object_id": "9", "change_message": "", "user": 81, "content_type": 13}}, {"pk": 182, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-23 10:39:54", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 181, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-11 10:35:02", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed completed.", "user": 1, "content_type": 13}}, {"pk": 180, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 16:44:40", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed example.", "user": 1, "content_type": 13}}, {"pk": 179, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 16:16:54", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 178, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 16:16:10", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 177, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 16:15:20", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 176, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 15:35:32", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed started and completed.", "user": 1, "content_type": 13}}, {"pk": 175, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 14:33:04", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed example.", "user": 1, "content_type": 13}}, {"pk": 174, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 14:31:01", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 173, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 14:27:46", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 172, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 14:27:07", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 171, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:50:26", "object_repr": "sirpengi", "object_id": "81", "change_message": "Changed is_staff and is_superuser.", "user": 1, "content_type": 3}}, {"pk": 170, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:38:56", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 169, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:37:23", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 168, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:36:06", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed output and example.", "user": 1, "content_type": 13}}, {"pk": 167, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:33:55", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed example.", "user": 1, "content_type": 13}}, {"pk": 166, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:32:30", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 165, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:21:40", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 164, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:21:10", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 163, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:17:29", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 162, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:17:02", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 161, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:16:44", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 160, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:16:14", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble, body and output.", "user": 1, "content_type": 13}}, {"pk": 159, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:15:01", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body and example.", "user": 1, "content_type": 13}}, {"pk": 158, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:11:37", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed input, output and example.", "user": 1, "content_type": 13}}, {"pk": 157, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:05:17", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body and example.", "user": 1, "content_type": 13}}, {"pk": 156, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 12:03:43", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body and example.", "user": 1, "content_type": 13}}, {"pk": 155, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:59:47", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 154, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:58:47", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 153, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:57:07", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body, input, output and example.", "user": 1, "content_type": 13}}, {"pk": 152, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:56:09", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 151, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:54:37", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 150, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:52:34", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble and body.", "user": 1, "content_type": 13}}, {"pk": 149, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 11:46:22", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 148, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:43:08", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble and body.", "user": 1, "content_type": 13}}, {"pk": 147, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:41:06", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body and example.", "user": 1, "content_type": 13}}, {"pk": 146, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:40:11", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed preamble and body.", "user": 1, "content_type": 13}}, {"pk": 145, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:39:34", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 144, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:37:53", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 143, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:37:20", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body, input, output and example.", "user": 1, "content_type": 13}}, {"pk": 142, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:36:34", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body, input, output and example.", "user": 1, "content_type": 13}}, {"pk": 141, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:34:28", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 140, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:33:22", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 139, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:32:46", "object_repr": "Reverse Boggle Challenge", "object_id": "8", "change_message": "Changed title, preamble and body.", "user": 1, "content_type": 13}}, {"pk": 138, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:29:37", "object_repr": "Reverse Boggle", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 137, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:29:09", "object_repr": "Reverse Boggle", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 136, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2012-01-04 01:27:40", "object_repr": "Reverse Boggle", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 135, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-12-08 22:51:52", "object_repr": "Reverse Boggle", "object_id": "8", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 134, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2011-12-08 22:50:35", "object_repr": "Reverse Boggle", "object_id": "8", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 133, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-06 03:04:23", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 132, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 18:49:02", "object_repr": "flex solution for the first part", "object_id": "70", "change_message": "Changed language.", "user": 1, "content_type": 15}}, {"pk": 131, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 18:47:58", "object_repr": "the easy method", "object_id": "67", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 130, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:38:47", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 129, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:37:52", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed author.", "user": 1, "content_type": 13}}, {"pk": 128, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:37:24", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 127, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:35:10", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 126, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:35:03", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 125, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:34:39", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 124, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:34:27", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 123, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:34:14", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 122, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:33:57", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 121, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:33:20", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 120, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:33:08", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 119, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:32:53", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 118, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:30:34", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 117, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:30:10", "object_repr": "Roman Numerals Mini Challenge", "object_id": "7", "change_message": "Changed title.", "user": 1, "content_type": 13}}, {"pk": 116, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:29:15", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 115, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:29:01", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 114, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:28:26", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 113, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:28:17", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 112, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:27:59", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "No fields changed.", "user": 1, "content_type": 13}}, {"pk": 111, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:27:59", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 110, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:27:19", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 109, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:26:55", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 108, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:26:27", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 107, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:25:47", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 106, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:24:57", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body and input.", "user": 1, "content_type": 13}}, {"pk": 105, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:22:36", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 104, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:22:14", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed body and input.", "user": 1, "content_type": 13}}, {"pk": 103, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:20:50", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 102, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:20:29", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 101, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-08-05 13:19:39", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "Changed completed.", "user": 1, "content_type": 13}}, {"pk": 100, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2011-08-05 13:19:16", "object_repr": "Miniquiz: Roman Numerals", "object_id": "7", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 99, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:58:59", "object_repr": "13 Plots AI (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed input and output.", "user": 1, "content_type": 13}}, {"pk": 98, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:57:14", "object_repr": "13 Plots AI (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed title.", "user": 1, "content_type": 13}}, {"pk": 97, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:56:55", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed input and output.", "user": 1, "content_type": 13}}, {"pk": 96, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:55:28", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 95, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:54:16", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed input and output.", "user": 1, "content_type": 13}}, {"pk": 94, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:53:40", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body, input and output.", "user": 1, "content_type": 13}}, {"pk": 93, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:51:29", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 92, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:51:11", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 91, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 21:49:44", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 90, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:55:58", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "No fields changed.", "user": 1, "content_type": 13}}, {"pk": 89, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:48:19", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 88, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:07:49", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 87, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:07:35", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed preamble.", "user": 1, "content_type": 13}}, {"pk": 86, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:04:11", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 85, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 18:02:15", "object_repr": "13 Plots (aka Martian Goofspiel)", "object_id": "6", "change_message": "Changed title.", "user": 1, "content_type": 13}}, {"pk": 84, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:51:52", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 83, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:51:34", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 82, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:51:10", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 81, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:50:36", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 80, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:49:45", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 79, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:48:32", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 78, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2011-06-17 16:47:50", "object_repr": "13 Plots", "object_id": "6", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 77, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2011-06-17 16:45:01", "object_repr": "13 Plots", "object_id": "6", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 76, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-30 02:24:37", "object_repr": "Decoder Ring", "object_id": "2", "change_message": "Changed author.", "user": 1, "content_type": 13}}, {"pk": 75, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-10-30 02:01:05", "object_repr": "simple python p1", "object_id": "66", "change_message": "", "user": 1, "content_type": 15}}, {"pk": 74, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-30 01:56:11", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 73, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 19:40:11", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 72, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:49:23", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 71, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:47:50", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 70, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:43:20", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed status and completed.", "user": 1, "content_type": 13}}, {"pk": 69, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:33:42", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 68, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:27:05", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 67, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:23:38", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 66, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:23:10", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 65, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-10-22 16:22:44", "object_repr": "Word Ladders Mini Challenge", "object_id": "5", "change_message": "Changed title and output.", "user": 1, "content_type": 13}}, {"pk": 64, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-10-22 16:21:16", "object_repr": "Word Ladders", "object_id": "5", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 63, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-16 17:37:13", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 2, "content_type": 13}}, {"pk": 62, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-11 16:31:51", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed completed.", "user": 1, "content_type": 13}}, {"pk": 61, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-11 01:36:53", "object_repr": "BaconizeMe", "object_id": "10", "change_message": "No fields changed.", "user": 1, "content_type": 15}}, {"pk": 60, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-11 00:55:47", "object_repr": "I hope this works", "object_id": "9", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 59, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-10 18:04:52", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed output.", "user": 1, "content_type": 13}}, {"pk": 58, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-10 18:03:30", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 57, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-10 18:02:56", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 56, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-10 14:50:23", "object_repr": "cheezey", "object_id": "3", "change_message": "Changed author.", "user": 2, "content_type": 15}}, {"pk": 55, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 20:27:00", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 54, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 20:15:46", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 53, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 19:57:56", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 52, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 19:57:27", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 51, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 19:54:41", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 50, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 19:48:23", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body and input.", "user": 1, "content_type": 13}}, {"pk": 49, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 18:57:15", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 48, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 18:56:31", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 47, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 16:45:34", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 46, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 16:44:20", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input.", "user": 1, "content_type": 13}}, {"pk": 45, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 16:42:46", "object_repr": "Decoder Ring", "object_id": "2", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 44, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 16:42:25", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed input, output, status and started.", "user": 1, "content_type": 13}}, {"pk": 43, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:45:53", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 42, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:45:46", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body, input, output and status.", "user": 1, "content_type": 13}}, {"pk": 41, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:29:39", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 40, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:29:14", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 39, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:20:39", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body, input, output and example.", "user": 1, "content_type": 13}}, {"pk": 38, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:11:47", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 37, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:11:40", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 36, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:11:30", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 35, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:09:23", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 34, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:09:16", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed body and status.", "user": 1, "content_type": 13}}, {"pk": 33, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:05:57", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 32, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-07-09 15:05:47", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 31, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-07-09 14:41:32", "object_repr": "Bacon Graph", "object_id": "4", "change_message": "", "user": 1, "content_type": 13}}, {"pk": 30, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-22 11:08:29", "object_repr": "", "object_id": "5", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 29, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-17 18:23:24", "object_repr": "", "object_id": "5", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 28, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-17 18:22:39", "object_repr": "", "object_id": "5", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 27, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-06-17 18:20:42", "object_repr": "", "object_id": "5", "change_message": "", "user": 1, "content_type": 15}}, {"pk": 26, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-17 18:18:21", "object_repr": "Dice Notation", "object_id": "1", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 25, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-17 17:55:47", "object_repr": "Dice Notation", "object_id": "1", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 24, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-10 04:03:41", "object_repr": "proggitquiz.com", "object_id": "1", "change_message": "Changed domain.", "user": 1, "content_type": 10}}, {"pk": 23, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 22:55:12", "object_repr": "The Dungeons of Proggit", "object_id": "3", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 22, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 22:54:17", "object_repr": "The Dungeons of Proggit", "object_id": "3", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 21, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 21:30:01", "object_repr": "Decoder Ring", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 20, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 21:29:23", "object_repr": "Decoder Ring", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 19, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 20:42:15", "object_repr": "ryanWIN", "object_id": "2", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 18, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 20:41:32", "object_repr": "ryanWIN", "object_id": "2", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 17, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 20:39:02", "object_repr": "ryanWIN", "object_id": "2", "change_message": "Changed source.", "user": 1, "content_type": 15}}, {"pk": 16, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 20:31:05", "object_repr": "pq.sixthgear.ca", "object_id": "1", "change_message": "Changed domain and name.", "user": 1, "content_type": 10}}, {"pk": 15, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2010-06-09 19:54:38", "object_repr": "joe", "object_id": "3", "change_message": "", "user": 1, "content_type": 3}}, {"pk": 14, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2010-06-09 19:54:38", "object_repr": "dan", "object_id": "4", "change_message": "", "user": 1, "content_type": 3}}, {"pk": 13, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-06-09 19:54:18", "object_repr": "sixthgear dice", "object_id": "1", "change_message": "", "user": 1, "content_type": 15}}, {"pk": 12, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 19:46:21", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 11, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-09 19:45:17", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 10, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 23:22:13", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 9, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 23:21:17", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 8, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 23:20:24", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 7, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 16:56:49", "object_repr": "mjard", "object_id": "2", "change_message": "Changed is_staff and is_superuser.", "user": 1, "content_type": 3}}, {"pk": 6, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2010-06-08 16:56:36", "object_repr": "mjard", "object_id": "2", "change_message": "", "user": 1, "content_type": 3}}, {"pk": 5, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 01:26:34", "object_repr": "Dice Notation", "object_id": "3", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 4, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-08 01:20:25", "object_repr": "The Dungeons of Proggit", "object_id": "2", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 3, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-07 21:24:12", "object_repr": "The Dungeons of Proggit", "object_id": "2", "change_message": "Changed status.", "user": 1, "content_type": 13}}, {"pk": 2, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-07 21:17:03", "object_repr": "Decoder Ring", "object_id": "1", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 1, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2010-06-07 21:15:28", "object_repr": "The Dungeons of Proggit", "object_id": "2", "change_message": "Changed body.", "user": 1, "content_type": 13}}, {"pk": 13, "model": "auth.permission", "fields": {"codename": "add_logentry", "name": "Can add log entry", "content_type": 5}}, {"pk": 14, "model": "auth.permission", "fields": {"codename": "change_logentry", "name": "Can change log entry", "content_type": 5}}, {"pk": 15, "model": "auth.permission", "fields": {"codename": "delete_logentry", "name": "Can delete log entry", "content_type": 5}}, {"pk": 4, "model": "auth.permission", "fields": {"codename": "add_group", "name": "Can add group", "content_type": 2}}, {"pk": 5, "model": "auth.permission", "fields": {"codename": "change_group", "name": "Can change group", "content_type": 2}}, {"pk": 6, "model": "auth.permission", "fields": {"codename": "delete_group", "name": "Can delete group", "content_type": 2}}, {"pk": 10, "model": "auth.permission", "fields": {"codename": "add_message", "name": "Can add message", "content_type": 4}}, {"pk": 11, "model": "auth.permission", "fields": {"codename": "change_message", "name": "Can change message", "content_type": 4}}, {"pk": 12, "model": "auth.permission", "fields": {"codename": "delete_message", "name": "Can delete message", "content_type": 4}}, {"pk": 1, "model": "auth.permission", "fields": {"codename": "add_permission", "name": "Can add permission", "content_type": 1}}, {"pk": 2, "model": "auth.permission", "fields": {"codename": "change_permission", "name": "Can change permission", "content_type": 1}}, {"pk": 3, "model": "auth.permission", "fields": {"codename": "delete_permission", "name": "Can delete permission", "content_type": 1}}, {"pk": 7, "model": "auth.permission", "fields": {"codename": "add_user", "name": "Can add user", "content_type": 3}}, {"pk": 8, "model": "auth.permission", "fields": {"codename": "change_user", "name": "Can change user", "content_type": 3}}, {"pk": 9, "model": "auth.permission", "fields": {"codename": "delete_user", "name": "Can delete user", "content_type": 3}}, {"pk": 41, "model": "auth.permission", "fields": {"codename": "add_language", "name": "Can add language", "content_type": 14}}, {"pk": 42, "model": "auth.permission", "fields": {"codename": "change_language", "name": "Can change language", "content_type": 14}}, {"pk": 43, "model": "auth.permission", "fields": {"codename": "delete_language", "name": "Can delete language", "content_type": 14}}, {"pk": 38, "model": "auth.permission", "fields": {"codename": "add_problem", "name": "Can add problem", "content_type": 13}}, {"pk": 39, "model": "auth.permission", "fields": {"codename": "change_problem", "name": "Can change problem", "content_type": 13}}, {"pk": 40, "model": "auth.permission", "fields": {"codename": "delete_problem", "name": "Can delete problem", "content_type": 13}}, {"pk": 44, "model": "auth.permission", "fields": {"codename": "add_solution", "name": "Can add solution", "content_type": 15}}, {"pk": 45, "model": "auth.permission", "fields": {"codename": "change_solution", "name": "Can change solution", "content_type": 15}}, {"pk": 46, "model": "auth.permission", "fields": {"codename": "delete_solution", "name": "Can delete solution", "content_type": 15}}, {"pk": 16, "model": "auth.permission", "fields": {"codename": "add_comment", "name": "Can add comment", "content_type": 6}}, {"pk": 19, "model": "auth.permission", "fields": {"codename": "can_moderate", "name": "Can moderate comments", "content_type": 6}}, {"pk": 17, "model": "auth.permission", "fields": {"codename": "change_comment", "name": "Can change comment", "content_type": 6}}, {"pk": 18, "model": "auth.permission", "fields": {"codename": "delete_comment", "name": "Can delete comment", "content_type": 6}}, {"pk": 20, "model": "auth.permission", "fields": {"codename": "add_commentflag", "name": "Can add comment flag", "content_type": 7}}, {"pk": 21, "model": "auth.permission", "fields": {"codename": "change_commentflag", "name": "Can change comment flag", "content_type": 7}}, {"pk": 22, "model": "auth.permission", "fields": {"codename": "delete_commentflag", "name": "Can delete comment flag", "content_type": 7}}, {"pk": 23, "model": "auth.permission", "fields": {"codename": "add_contenttype", "name": "Can add content type", "content_type": 8}}, {"pk": 24, "model": "auth.permission", "fields": {"codename": "change_contenttype", "name": "Can change content type", "content_type": 8}}, {"pk": 25, "model": "auth.permission", "fields": {"codename": "delete_contenttype", "name": "Can delete content type", "content_type": 8}}, {"pk": 35, "model": "auth.permission", "fields": {"codename": "add_registrationprofile", "name": "Can add registration profile", "content_type": 12}}, {"pk": 36, "model": "auth.permission", "fields": {"codename": "change_registrationprofile", "name": "Can change registration profile", "content_type": 12}}, {"pk": 37, "model": "auth.permission", "fields": {"codename": "delete_registrationprofile", "name": "Can delete registration profile", "content_type": 12}}, {"pk": 26, "model": "auth.permission", "fields": {"codename": "add_session", "name": "Can add session", "content_type": 9}}, {"pk": 27, "model": "auth.permission", "fields": {"codename": "change_session", "name": "Can change session", "content_type": 9}}, {"pk": 28, "model": "auth.permission", "fields": {"codename": "delete_session", "name": "Can delete session", "content_type": 9}}, {"pk": 29, "model": "auth.permission", "fields": {"codename": "add_site", "name": "Can add site", "content_type": 10}}, {"pk": 30, "model": "auth.permission", "fields": {"codename": "change_site", "name": "Can change site", "content_type": 10}}, {"pk": 31, "model": "auth.permission", "fields": {"codename": "delete_site", "name": "Can delete site", "content_type": 10}}, {"pk": 32, "model": "auth.permission", "fields": {"codename": "add_migrationhistory", "name": "Can add migration history", "content_type": 11}}, {"pk": 33, "model": "auth.permission", "fields": {"codename": "change_migrationhistory", "name": "Can change migration history", "content_type": 11}}, {"pk": 34, "model": "auth.permission", "fields": {"codename": "delete_migrationhistory", "name": "Can delete migration history", "content_type": 11}}, {"pk": 19, "model": "auth.user", "fields": {"username": "apkessl1", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 18:54:20", "groups": [], "user_permissions": [], "password": "sha1$3ec5c$3c7e0cb0991376ef513dac91e385a568ac0fbfb9", "email": "apkessler@gmail.com", "date_joined": "2010-07-10 18:54:20"}}, {"pk": 20, "model": "auth.user", "fields": {"username": "jcchurch", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 19:45:54", "groups": [], "user_permissions": [], "password": "sha1$772ce$ddb69655ce7f78a100825676f09039a9730b294b", "email": "jcchurch@gmail.com", "date_joined": "2010-07-10 19:45:54"}}, {"pk": 21, "model": "auth.user", "fields": {"username": "pepsi_can", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 23:15:30", "groups": [], "user_permissions": [], "password": "sha1$54d2c$772e114d04b1acff5a57f6774e9a9883e325e9f9", "email": "francisco.licea@gmail.com", "date_joined": "2010-07-10 23:15:30"}}, {"pk": 22, "model": "auth.user", "fields": {"username": "Owner_", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 23:58:20", "groups": [], "user_permissions": [], "password": "sha1$b2130$481f0a16c73d7dc7cda60c79e42913100c2fc5a2", "email": "oopjosh@yahoo.com", "date_joined": "2010-07-10 23:58:20"}}, {"pk": 23, "model": "auth.user", "fields": {"username": "idevelop", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 03:32:14", "groups": [], "user_permissions": [], "password": "sha1$e643b$9b7e8973abfd9a25897123369cbe864b5f1f0170", "email": "andreig@gmail.com", "date_joined": "2010-07-11 03:32:14"}}, {"pk": 24, "model": "auth.user", "fields": {"username": "sbinq", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 06:20:15", "groups": [], "user_permissions": [], "password": "sha1$0732c$256faebef6b8a53f79735e8f1f25618604c896bd", "email": "stas.binko@gmail.com", "date_joined": "2010-07-11 06:20:15"}}, {"pk": 25, "model": "auth.user", "fields": {"username": "samoverton", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 07:14:29", "groups": [], "user_permissions": [], "password": "sha1$219fe$573926c6e341639b397e792f0c4aae0088554bf4", "email": "samoverton@gmail.com", "date_joined": "2010-07-11 07:14:29"}}, {"pk": 26, "model": "auth.user", "fields": {"username": "_ex_", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 08:22:49", "groups": [], "user_permissions": [], "password": "sha1$d07a8$913bf1b8df318a8cc6ff35b9142045e8b3d9b444", "email": "exeqtor@gmail.com", "date_joined": "2010-07-11 08:22:49"}}, {"pk": 27, "model": "auth.user", "fields": {"username": "mawaldne", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 09:04:26", "groups": [], "user_permissions": [], "password": "sha1$e4aa5$c133052e0c828465a94dd31a082e587633d5e944", "email": "mike.waldner@gmail.com", "date_joined": "2010-07-11 09:04:26"}}, {"pk": 5, "model": "auth.user", "fields": {"username": "ben", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-06-11 04:24:36", "groups": [], "user_permissions": [], "password": "sha1$ede53$b9f530c9f48bdef34671d87b884ef5aaede0aa1c", "email": "b.meinl@gmail.com", "date_joined": "2010-06-11 04:24:36"}}, {"pk": 28, "model": "auth.user", "fields": {"username": "rem", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 09:33:40", "groups": [], "user_permissions": [], "password": "sha1$5df13$09ebfa30e485e98df1ae5dc2287b698c11d7187e", "email": "rem132@yandex.ru", "date_joined": "2010-07-11 09:33:40"}}, {"pk": 6, "model": "auth.user", "fields": {"username": "User_4574", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-06-17 17:59:48", "groups": [], "user_permissions": [], "password": "sha1$9974d$73553599c65a5d4a518f4f1e4aaf233b0cd6b897", "email": "nathan.je.lasseter@googlemail.com", "date_joined": "2010-06-17 17:59:48"}}, {"pk": 50, "model": "auth.user", "fields": {"username": "ACRush", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-16 18:53:24", "groups": [], "user_permissions": [], "password": "sha1$1b341$fb54c724c8ec2baa01816bbb359481b9e7b3d2c6", "email": "loutiancheng860214@gmail.com", "date_joined": "2010-07-16 18:53:24"}}, {"pk": 9, "model": "auth.user", "fields": {"username": "pbunbun", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-09 21:08:27", "groups": [], "user_permissions": [], "password": "sha1$321f6$f62e9a83009136d9f51c42630fa5dc0eb53286ed", "email": "paul.bunbury2@mail.dcu.ie", "date_joined": "2010-07-09 21:08:27"}}, {"pk": 10, "model": "auth.user", "fields": {"username": "cheezey", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 01:14:13", "groups": [], "user_permissions": [], "password": "sha1$e7d7d$0002d5ab5ea678d23685688a50ca475e266396e2", "email": "cheeze477@gmail.com", "date_joined": "2010-07-10 01:14:13"}}, {"pk": 11, "model": "auth.user", "fields": {"username": "torrentlord", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 15:07:55", "groups": [], "user_permissions": [], "password": "sha1$a4dd1$53a12d4e2f5219a0ccb6913d08fec22e23d6b98a", "email": "dragon.fume@gmail.com", "date_joined": "2010-07-10 15:07:55"}}, {"pk": 12, "model": "auth.user", "fields": {"username": "terite", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 16:30:25", "groups": [], "user_permissions": [], "password": "sha1$94312$f0a810f4b20e0df6e0d13fa370152cdcac0b5b5d", "email": "pizzatsf@gmail.com", "date_joined": "2010-07-10 16:30:25"}}, {"pk": 13, "model": "auth.user", "fields": {"username": "luckytoilet", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 16:54:58", "groups": [], "user_permissions": [], "password": "sha1$08363$29e8930680aa25315bd943d849af90f73e6fb74f", "email": "luckytoilet@gmail.com", "date_joined": "2010-07-10 16:54:58"}}, {"pk": 14, "model": "auth.user", "fields": {"username": "dsaint", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 17:44:19", "groups": [], "user_permissions": [], "password": "sha1$8dc9d$053ebaa0846556801805ad9b38f5cbd98378c470", "email": "matt@csbgroup.org", "date_joined": "2010-07-10 17:44:19"}}, {"pk": 15, "model": "auth.user", "fields": {"username": "Rafajafar", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 18:32:54", "groups": [], "user_permissions": [], "password": "sha1$8c276$4d2d793a0f5e7d00fec8c7acdb68366ad6ade36e", "email": "rafajafar@gmail.com", "date_joined": "2010-07-10 18:32:54"}}, {"pk": 18, "model": "auth.user", "fields": {"username": "tinio", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-10 18:48:19", "groups": [], "user_permissions": [], "password": "sha1$9b472$c98f1ca6cfd5a84d2a6c26fe4955841a7b833f90", "email": "aurelio@tinio.org", "date_joined": "2010-07-10 18:48:19"}}, {"pk": 44, "model": "auth.user", "fields": {"username": "sztomi", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-11-01 09:44:02", "groups": [], "user_permissions": [], "password": "sha1$6fcc1$6af36cd9de318a05bc39aee871e85247028944a8", "email": "szelei.t@gmail.com", "date_joined": "2010-07-15 13:12:49"}}, {"pk": 30, "model": "auth.user", "fields": {"username": "x10", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 10:04:47", "groups": [], "user_permissions": [], "password": "sha1$d54e0$7fefde4a48a733cd1ff37d4aac1fce9e7f673f5f", "email": "Mihail.Minkov.BG@gmail.com", "date_joined": "2010-07-11 10:04:47"}}, {"pk": 31, "model": "auth.user", "fields": {"username": "ytuso", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 12:10:37", "groups": [], "user_permissions": [], "password": "sha1$37876$2be6cbcbfce12446b49d3b2b3eb20055cdc6f081", "email": "fake@spam.la", "date_joined": "2010-07-11 12:10:37"}}, {"pk": 32, "model": "auth.user", "fields": {"username": "ddombrow", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 13:45:24", "groups": [], "user_permissions": [], "password": "sha1$57431$ab5e7c797ce8934228630b0070218053dc689514", "email": "ddombrow@gmail.com", "date_joined": "2010-07-11 13:45:24"}}, {"pk": 33, "model": "auth.user", "fields": {"username": "cjb", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 14:58:31", "groups": [], "user_permissions": [], "password": "sha1$73b74$771ecfab20aa6bbbb9ad6b8fc9dfeb17c60f8880", "email": "cjbattagl@gmail.com", "date_joined": "2010-07-11 14:58:31"}}, {"pk": 34, "model": "auth.user", "fields": {"username": "elohel", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 15:10:50", "groups": [], "user_permissions": [], "password": "sha1$fac59$2b81a2f5613f73bef745543519bf5655795f14ed", "email": "elohel@suremail.info", "date_joined": "2010-07-11 15:10:50"}}, {"pk": 35, "model": "auth.user", "fields": {"username": "tomh", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-11 15:21:00", "groups": [], "user_permissions": [], "password": "sha1$27af8$8e17bda8b95afd5695ddec3da332bbf456ab4a90", "email": "tomhartley@rocketmail.com", "date_joined": "2010-07-11 15:21:00"}}, {"pk": 37, "model": "auth.user", "fields": {"username": "cowpow", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-12 16:11:24", "groups": [], "user_permissions": [], "password": "sha1$3cd56$5a0dffb489afd86c1a3387410cf4bd6605acd13f", "email": "obknoxious@gmail.com", "date_joined": "2010-07-12 16:11:24"}}, {"pk": 7, "model": "auth.user", "fields": {"username": "Tinned_Tuna", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-27 19:33:37", "groups": [], "user_permissions": [], "password": "sha1$ac6ec$96c6d9a15c86f507adb08edcb9aae14d77ac2cfe", "email": "dsturner@dannyturner.net", "date_joined": "2010-06-28 09:02:27"}}, {"pk": 16, "model": "auth.user", "fields": {"username": "carapace", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-12 16:35:58", "groups": [], "user_permissions": [], "password": "sha1$f50b6$05800ec9f4239e9e7eebe28d5f09bd6516c16bd0", "email": "gmweezel@gmail.com", "date_joined": "2010-07-10 18:43:48"}}, {"pk": 38, "model": "auth.user", "fields": {"username": "1ee", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-12 21:09:25", "groups": [], "user_permissions": [], "password": "sha1$4da1a$b6bd06e9bbdc4e71de7ebf06d5eaaa28bcbcffa5", "email": "lee_fallat@hotmail.com", "date_joined": "2010-07-12 21:09:25"}}, {"pk": 39, "model": "auth.user", "fields": {"username": "zolkowski", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-13 05:52:08", "groups": [], "user_permissions": [], "password": "sha1$1f769$6e5314685a8cb24b00d93a415774850f538096bd", "email": "zoltan.fegyver@gmail.com", "date_joined": "2010-07-13 05:52:08"}}, {"pk": 2, "model": "auth.user", "fields": {"username": "mjard", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2010-10-24 03:44:24", "groups": [], "user_permissions": [], "password": "sha1$fc8c4$c2004fb282192e287f01a36492db697ae3458969", "email": "", "date_joined": "2010-06-08 16:56:36"}}, {"pk": 46, "model": "auth.user", "fields": {"username": "b00b_the_nOOb", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-15 15:44:59", "groups": [], "user_permissions": [], "password": "sha1$55aa1$27ff562cd8128a8bfbecd8eae9603b3eac9d5e45", "email": "entropycapital@yahoo.com", "date_joined": "2010-07-15 15:44:59"}}, {"pk": 42, "model": "auth.user", "fields": {"username": "Panaetius", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-13 22:58:09", "groups": [], "user_permissions": [], "password": "sha1$1ccfc$ca44df875a4dc957c8fb250f5ddda9a57a68e1b0", "email": "ralf.grubenmann@hotmail.com", "date_joined": "2010-07-13 22:58:09"}}, {"pk": 43, "model": "auth.user", "fields": {"username": "lilleswing", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-14 12:25:10", "groups": [], "user_permissions": [], "password": "sha1$b7938$055f20ec82af82f1bbd2d992f0c206ff88035fbb", "email": "lilleswing@gmail.com", "date_joined": "2010-07-14 12:25:10"}}, {"pk": 36, "model": "auth.user", "fields": {"username": "Queue29", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-12-22 08:52:45", "groups": [], "user_permissions": [], "password": "sha1$7901b$9b32015bb9108a618d87c7afc2c743047ac0b883", "email": "seth.a.hoenig@gmail.com", "date_joined": "2010-07-11 20:03:43"}}, {"pk": 45, "model": "auth.user", "fields": {"username": "vish", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-15 13:14:33", "groups": [], "user_permissions": [], "password": "sha1$42c1c$4cf871ac0c5489625b1d81d46e7a75b15ab99f9d", "email": "vikas.cse.nitt@gmail.com", "date_joined": "2010-07-15 13:14:33"}}, {"pk": 52, "model": "auth.user", "fields": {"username": "turuthok", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-18 19:48:25", "groups": [], "user_permissions": [], "password": "sha1$2b440$ee28cde932764d5596ba097a57296a024b1d03c8", "email": "legoharyanto@gmail.com", "date_joined": "2010-07-18 19:48:25"}}, {"pk": 48, "model": "auth.user", "fields": {"username": "meenuh", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-16 13:25:52", "groups": [], "user_permissions": [], "password": "sha1$3d04c$dd3214775ae76b6cf124122f6b5f9c084948a682", "email": "dearmina@hotmail.com", "date_joined": "2010-07-16 13:25:52"}}, {"pk": 49, "model": "auth.user", "fields": {"username": "danger", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-16 14:10:51", "groups": [], "user_permissions": [], "password": "sha1$a711a$f6d7014034e330dc429734aa61c70380169a468c", "email": "danger.mccann@gmail.com", "date_joined": "2010-07-16 14:10:51"}}, {"pk": 47, "model": "auth.user", "fields": {"username": "johnny_ozone", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-17 22:47:37", "groups": [], "user_permissions": [], "password": "sha1$2f15c$ac3d63924c8169864112ad470a0bea94f37aaa54", "email": "rich@interhacktive.com", "date_joined": "2010-07-15 20:26:15"}}, {"pk": 51, "model": "auth.user", "fields": {"username": "pedrodelgallego", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-18 06:46:51", "groups": [], "user_permissions": [], "password": "sha1$63250$d96ed73a68c77cacdcdaca4fd2a385bdac7102f5", "email": "pedro.delgallego@gmail.com", "date_joined": "2010-07-18 06:46:51"}}, {"pk": 53, "model": "auth.user", "fields": {"username": "andrewattwood", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-19 16:32:48", "groups": [], "user_permissions": [], "password": "sha1$c2e17$c86915e222237a4b4b62b8e916bfb364fad7d2cc", "email": "andrewattwood@gmail.com", "date_joined": "2010-07-19 16:32:48"}}, {"pk": 54, "model": "auth.user", "fields": {"username": "quattro", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-20 00:43:04", "groups": [], "user_permissions": [], "password": "sha1$444af$0244f541dfe90dd3f79c02ad3b07c03f29ee140d", "email": "nick.mancuso@gmail.com", "date_joined": "2010-07-20 00:43:04"}}, {"pk": 55, "model": "auth.user", "fields": {"username": "mounikasiva", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-23 07:30:42", "groups": [], "user_permissions": [], "password": "sha1$0d8c7$6e18b6593554f41f2edc3778dcf8c9d5359c9d5b", "email": "7siva7@gmail.com", "date_joined": "2010-07-23 07:30:42"}}, {"pk": 56, "model": "auth.user", "fields": {"username": "mahathey", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-07-24 07:41:41", "groups": [], "user_permissions": [], "password": "sha1$97c50$7932c12252db87afd95d0c023bb5b4202b5d2254", "email": "pavan_mahathey@yahoo.com", "date_joined": "2010-07-24 07:41:41"}}, {"pk": 57, "model": "auth.user", "fields": {"username": "tamizhgeek", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-08-07 00:19:36", "groups": [], "user_permissions": [], "password": "sha1$e1d42$d9f1beeebba8c2b8fc4a9d887ac6901c283f2573", "email": "tamizhgeek@gmail.com", "date_joined": "2010-08-04 12:00:06"}}, {"pk": 29, "model": "auth.user", "fields": {"username": "yoden", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-25 15:41:45", "groups": [], "user_permissions": [], "password": "sha1$f1fd3$d8742e267bc3c23dc14672b5daad7cb4dcc1b715", "email": "yoden_ss@yahoo.com", "date_joined": "2010-07-11 10:04:20"}}, {"pk": 58, "model": "auth.user", "fields": {"username": "waynegretzky", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-08-11 11:39:25", "groups": [], "user_permissions": [], "password": "sha1$22626$40e2f69cd05e3a575a76806bc38ef17057ab8541", "email": "waynegretzky@writeme.com", "date_joined": "2010-08-10 19:57:11"}}, {"pk": 40, "model": "auth.user", "fields": {"username": "eric", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-09-15 04:40:53", "groups": [], "user_permissions": [], "password": "sha1$3a2f1$542f8db7dcff9c2b090e56eb20a7010d566e3fc4", "email": "eric.pruitt@gmail.com", "date_joined": "2010-07-13 15:17:38"}}, {"pk": 59, "model": "auth.user", "fields": {"username": "KumarAnurag", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-08-12 11:12:26", "groups": [], "user_permissions": [], "password": "sha1$e40ef$075f4937f8fd871e879a624f788908d5765bde63", "email": "anurag.it.jolly@gmail.com", "date_joined": "2010-08-12 11:12:26"}}, {"pk": 61, "model": "auth.user", "fields": {"username": "islands", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-22 23:04:16", "groups": [], "user_permissions": [], "password": "sha1$5df13$6e6c29bd6e0becb2ef31d8ffb799a46810dadfe6", "email": "proggitquiz@gtcode.com", "date_joined": "2010-10-22 23:04:16"}}, {"pk": 60, "model": "auth.user", "fields": {"username": "Chronicler", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-08-05 15:59:49", "groups": [], "user_permissions": [], "password": "sha1$e9595$579cf49bf0378aa74393f29e16d752620674dc84", "email": "lastchronicler@gmail.com", "date_joined": "2010-10-22 16:19:37"}}, {"pk": 8, "model": "auth.user", "fields": {"username": "Scriptor", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-04 21:21:12", "groups": [], "user_permissions": [], "password": "sha1$c819b$2df3d53cae821e222d70ac10ecf03721bdd4400c", "email": "historium@gmail.com", "date_joined": "2010-07-09 13:30:24"}}, {"pk": 17, "model": "auth.user", "fields": {"username": "anescient", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-07 13:38:36", "groups": [], "user_permissions": [], "password": "sha1$15765$df55b3c070b2cc6ef574bd309032005f6fb0d9d9", "email": "anescient@gmail.com", "date_joined": "2010-07-10 18:44:05"}}, {"pk": 41, "model": "auth.user", "fields": {"username": "coder_lyte", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-05 07:45:13", "groups": [], "user_permissions": [], "password": "sha1$3bc84$2a3b41753590204ecd5990bdf069412aa858765a", "email": "hopperw2000@yahoo.com", "date_joined": "2010-07-13 16:27:50"}}, {"pk": 63, "model": "auth.user", "fields": {"username": "praveen", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-24 04:46:21", "groups": [], "user_permissions": [], "password": "sha1$eeae4$c4fd6fb4fadb7382a0d67d12c3b99d1a35b23eb7", "email": "tpk1024@gmail.com", "date_joined": "2010-10-24 04:46:21"}}, {"pk": 64, "model": "auth.user", "fields": {"username": "zszugyi", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-24 13:01:57", "groups": [], "user_permissions": [], "password": "sha1$95a0e$9b961c12089efdea71c3d70927f94cdf9a6b6184", "email": "zoli.szugyi@gmail.com", "date_joined": "2010-10-24 13:01:57"}}, {"pk": 62, "model": "auth.user", "fields": {"username": "GeDaMo", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-25 07:12:24", "groups": [], "user_permissions": [], "password": "sha1$a2b98$5b76f3c518be9a1c831aa6b5850ae7194e9f900c", "email": "proggit@gedamo.demon.co.uk", "date_joined": "2010-10-24 01:04:58"}}, {"pk": 66, "model": "auth.user", "fields": {"username": "koryk", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-25 16:11:04", "groups": [], "user_permissions": [], "password": "sha1$796fa$c62df639e137cb84dd5031bb29cafb67c7e8c9a8", "email": "korykirk@gmail.com", "date_joined": "2010-10-25 16:11:04"}}, {"pk": 67, "model": "auth.user", "fields": {"username": "azkar", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-28 13:36:37", "groups": [], "user_permissions": [], "password": "sha1$dfd2f$2a07f78f6d507cba5e4339ff12b11d90fd1b59fd", "email": "le.azkar@gmail.com", "date_joined": "2010-10-28 13:36:37"}}, {"pk": 68, "model": "auth.user", "fields": {"username": "ryanWIN", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2010-10-29 19:33:19", "groups": [], "user_permissions": [], "password": "sha1$8ba72$bd65e34dc6d5a2842aab69527e048facf1399ee7", "email": "ryanbroomfield@gmail.com", "date_joined": "2010-10-29 19:33:19"}}, {"pk": 69, "model": "auth.user", "fields": {"username": "Ceagnelia", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-01-20 18:43:56", "groups": [], "user_permissions": [], "password": "sha1$a7fda$74bd6ebd8a0f93cd53450e27cf214cdc788d82be", "email": "danaa.dan@yandex.ru", "date_joined": "2011-01-14 18:15:46"}}, {"pk": 70, "model": "auth.user", "fields": {"username": "Lealayholdele", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-01-21 01:38:30", "groups": [], "user_permissions": [], "password": "sha1$d65bb$087d702776cc9f1f11cf947389d53bdb0b290b96", "email": "do1.do@yandex.ru", "date_joined": "2011-01-14 23:58:09"}}, {"pk": 71, "model": "auth.user", "fields": {"username": "djmagspcrse", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-03-20 06:48:36", "groups": [], "user_permissions": [], "password": "sha1$6beec$22302bf17c051246b1ec8e7bd2c5e89b3a30c287", "email": "cilzemu@gmail.com", "date_joined": "2011-03-20 06:48:32"}}, {"pk": 78, "model": "auth.user", "fields": {"username": "attivaunurb", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-08-07 18:14:59", "groups": [], "user_permissions": [], "password": "sha1$09015$4ae678706982469c6eaf01f58f492b136f21b38a", "email": "fajnyomjf@elisione.pl", "date_joined": "2011-08-03 21:52:16"}}, {"pk": 72, "model": "auth.user", "fields": {"username": "ErnestRO", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-04-17 23:59:08", "groups": [], "user_permissions": [], "password": "sha1$35491$284d398af917b279232eefb432ea8497dd013a6f", "email": "antarctic680@gmail.com", "date_joined": "2011-04-17 23:54:35"}}, {"pk": 73, "model": "auth.user", "fields": {"username": "Acousbuct", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-04-27 04:26:14", "groups": [], "user_permissions": [], "password": "sha1$8bf9f$6314101cc9785164add96075aa8842fce332f2ab", "email": "darmoe34@elisione.pl", "date_joined": "2011-04-27 04:25:59"}}, {"pk": 74, "model": "auth.user", "fields": {"username": "rmtkmooeqx", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-06-14 17:50:19", "groups": [], "user_permissions": [], "password": "sha1$d842e$a759f1a8f3726ed520137128890bd24beaea0eb7", "email": "zelipapa.mart@gmail.com", "date_joined": "2011-06-14 17:50:17"}}, {"pk": 82, "model": "auth.user", "fields": {"username": "illixdaycle", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-08-09 07:06:20", "groups": [], "user_permissions": [], "password": "sha1$5527c$fd61fdcbbac80f88ea275a6b073861d694455b11", "email": "kasiulka@muzyka-reggae.pl", "date_joined": "2011-08-09 07:06:17"}}, {"pk": 75, "model": "auth.user", "fields": {"username": "gbxkmooesy", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-06-14 20:24:11", "groups": [], "user_permissions": [], "password": "sha1$4a202$812a00e51e48c23fe05dc3fefa0d924ee2e9fb5f", "email": "jakoprigazoda@gmail.com", "date_joined": "2011-06-14 20:24:09"}}, {"pk": 76, "model": "auth.user", "fields": {"username": "tibiaapexia", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-06-17 11:54:47", "groups": [], "user_permissions": [], "password": "sha1$0e3df$f5a2194ff3e85fccea47b876cdea9ea9ea1ab97d", "email": "lolek@keegoharborcookbook.org", "date_joined": "2011-06-17 11:54:45"}}, {"pk": 83, "model": "auth.user", "fields": {"username": "aZoTGwFg", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-08-22 09:42:07", "groups": [], "user_permissions": [], "password": "sha1$fc869$55e1020398ac6df1d561feadb8fdae3b1d162442", "email": "azotgwfg@gmail.com", "date_joined": "2011-08-22 09:42:07"}}, {"pk": 77, "model": "auth.user", "fields": {"username": "ephepthelussy", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-06-27 15:24:26", "groups": [], "user_permissions": [], "password": "sha1$62fdd$f98fcb86bdcf191fb212e6e4efe947644b747ed0", "email": "oz@kolczynka.pl", "date_joined": "2011-06-27 15:24:24"}}, {"pk": 79, "model": "auth.user", "fields": {"username": "quanticle", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-08-05 13:37:10", "groups": [], "user_permissions": [], "password": "sha1$cb379$aaf61f5daaefd85fdf2bb94b45169ac8bbc8fbba", "email": "quanticle@gmail.com", "date_joined": "2011-08-05 13:37:10"}}, {"pk": 97, "model": "auth.user", "fields": {"username": "Jeane_Blak", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-26 10:45:32", "groups": [], "user_permissions": [], "password": "sha1$01aae$9cbb3bb504481645359c9c2f7df76fc53caa5e3a", "email": "d.a.ro.nsi.n.gc.a@gmail.com", "date_joined": "2012-03-26 10:45:32"}}, {"pk": 85, "model": "auth.user", "fields": {"username": "felipe1961", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-12-11 08:23:44", "groups": [], "user_permissions": [], "password": "sha1$c7de5$cb26b296da021866d363b9de9f68c03976acbb10", "email": "edtiogoo@gmail.com", "date_joined": "2011-12-11 08:23:44"}}, {"pk": 86, "model": "auth.user", "fields": {"username": "sipsHupturl", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2011-12-17 11:30:25", "groups": [], "user_permissions": [], "password": "sha1$0cc39$b7fe54704fc1434f271365f91b6a1b16e5af6005", "email": "laceyadaks@gmail.com", "date_joined": "2011-12-17 11:30:23"}}, {"pk": 92, "model": "auth.user", "fields": {"username": "ryandixel", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-20 19:25:59", "groups": [], "user_permissions": [], "password": "sha1$bc408$fdf0d3c14df688a014d55a58a2e5421564692b77", "email": "ryandixel@gmail.com", "date_joined": "2012-02-20 19:25:34"}}, {"pk": 80, "model": "auth.user", "fields": {"username": "lzm", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-24 19:25:53", "groups": [], "user_permissions": [], "password": "sha1$b415e$03a921f896018a412eefbff5be5ae6b22c23c0be", "email": "lessandro@gmail.com", "date_joined": "2011-08-05 16:41:22"}}, {"pk": 103, "model": "auth.user", "fields": {"username": "martineratons", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-12 12:43:46", "groups": [], "user_permissions": [], "password": "sha1$7e0c6$25225cbd860cde62e995583d337b18b5f945614f", "email": "martineratons@gmail.com", "date_joined": "2012-04-12 12:43:20"}}, {"pk": 93, "model": "auth.user", "fields": {"username": "MoniQJfuv", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-26 15:11:35", "groups": [], "user_permissions": [], "password": "sha1$c7b50$e4cd7c7f38340965410988e88a5215ac2cfc50bd", "email": "ndskmooeinkfokmooesv@iowkmooenmrkxkmooeow.com", "date_joined": "2012-02-26 15:11:28"}}, {"pk": 65, "model": "auth.user", "fields": {"username": "synx", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-28 14:43:40", "groups": [], "user_permissions": [], "password": "sha1$f56b6$c07cce6c4b66faddeb96a12a3bf4f2cc75aaa357", "email": "synxes@gmail.com", "date_joined": "2010-10-24 13:58:28"}}, {"pk": 87, "model": "auth.user", "fields": {"username": "willy1234x1", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-06 22:09:02", "groups": [], "user_permissions": [], "password": "sha1$61a4f$4c5d9a51e8343533bca5843993c829e40b814578", "email": "willy1234x1@gmail.com", "date_joined": "2012-01-06 22:09:01"}}, {"pk": 98, "model": "auth.user", "fields": {"username": "tyhmqmx0", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-29 20:29:52", "groups": [], "user_permissions": [], "password": "sha1$52fc3$242a1e56a997d8bc4de10b439bf0e43cb68ce524", "email": "gjiiubcs@gmail.com", "date_joined": "2012-03-29 20:29:43"}}, {"pk": 88, "model": "auth.user", "fields": {"username": "Henrysmith", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-14 15:09:59", "groups": [], "user_permissions": [], "password": "sha1$2472c$0fe324e55bf44d304299580d76d43f38d4325ae0", "email": "jamessmith28a@gmail.com", "date_joined": "2012-01-14 15:09:59"}}, {"pk": 89, "model": "auth.user", "fields": {"username": "merlin1976", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-01-31 10:50:14", "groups": [], "user_permissions": [], "password": "sha1$e28bd$271ed8759684d0af2b14cb501f3f2d2b9582f900", "email": "stephan1957ff@gmail.com", "date_joined": "2012-01-31 10:50:14"}}, {"pk": 90, "model": "auth.user", "fields": {"username": "taylor1989", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-01 14:30:07", "groups": [], "user_permissions": [], "password": "sha1$67e9a$7dda41c600624fdcb8d53ec7af940234f20caf82", "email": "satgekko135@gmail.com", "date_joined": "2012-02-01 14:30:07"}}, {"pk": 99, "model": "auth.user", "fields": {"username": "ltdgqhmh", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-31 23:02:49", "groups": [], "user_permissions": [], "password": "sha1$b5910$1a1bb9447f6960efbf102abf6bfc60292439f7d4", "email": "fgsqjgft@gmail.com", "date_joined": "2012-03-31 23:02:33"}}, {"pk": 81, "model": "auth.user", "fields": {"username": "sirpengi", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2012-02-13 14:47:33", "groups": [], "user_permissions": [], "password": "sha1$b1b3e$2ef4e27fc94e5b07d72b1461f55334228be206a9", "email": "me@sirpengi.com", "date_joined": "2011-08-05 22:11:22"}}, {"pk": 91, "model": "auth.user", "fields": {"username": "sykindocha", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-02-16 00:30:16", "groups": [], "user_permissions": [], "password": "sha1$71aa3$80f34795d73e83bd3532db7ca44cf709dbd6b585", "email": "agl.a.ja.b.ramp.uf@gmail.com", "date_joined": "2012-02-16 00:30:16"}}, {"pk": 94, "model": "auth.user", "fields": {"username": "rBeExifs", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-12 12:55:04", "groups": [], "user_permissions": [], "password": "sha1$0ed1e$3615e1f98102493ec0b7cd2db8fed65e6b774733", "email": "milanasierra@gmx.com", "date_joined": "2012-03-12 12:55:02"}}, {"pk": 84, "model": "auth.user", "fields": {"username": "dawbincassown", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-17 13:46:29", "groups": [], "user_permissions": [], "password": "sha1$6708b$297faa190b7ad674385c95aca77d7ce6e598d1c8", "email": "voskobojnikovanna@mail.ru", "date_joined": "2011-12-10 23:50:52"}}, {"pk": 107, "model": "auth.user", "fields": {"username": "toinkwxem", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-05-30 19:40:22", "groups": [], "user_permissions": [], "password": "sha1$0b99b$de29d6ff4c0a9419fc253e20aa13fdad01256ebf", "email": "lonuatuna@aol.com", "date_joined": "2012-05-30 19:40:22"}}, {"pk": 100, "model": "auth.user", "fields": {"username": "sikasdcjjd", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-04 19:00:26", "groups": [], "user_permissions": [], "password": "sha1$9fb02$6ce28eb6295ed6a42e862ac142af1034e8cfe540", "email": "to.iv.oaind.rt.u.q@gmail.com", "date_joined": "2012-04-04 19:00:21"}}, {"pk": 96, "model": "auth.user", "fields": {"username": "aerossyToom", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-25 03:39:02", "groups": [], "user_permissions": [], "password": "sha1$d2727$38995f46e6cfdec4066a915479d59c082221f9bc", "email": "uti.bre.w.heew@gmail.com", "date_joined": "2012-03-25 03:38:58"}}, {"pk": 95, "model": "auth.user", "fields": {"username": "PhemAgege", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-03-26 09:13:12", "groups": [], "user_permissions": [], "password": "sha1$d2d5b$785b58b4e477738862378fd3a149967473e94254", "email": "pupuruza@yandex.ru", "date_joined": "2012-03-18 03:06:41"}}, {"pk": 101, "model": "auth.user", "fields": {"username": "Susan_zima", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-05 00:51:19", "groups": [], "user_permissions": [], "password": "sha1$e9ae1$6df8d4019fbbd5bc885a8a069b0bd6db20e275ba", "email": "p.a.rba.i.d.run.o.p@gmail.com", "date_joined": "2012-04-05 00:51:19"}}, {"pk": 102, "model": "auth.user", "fields": {"username": "jeffry1965", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-09 12:03:03", "groups": [], "user_permissions": [], "password": "sha1$95d32$3c0007927ca2baa67be516eb0cbcf8033dbf78d8", "email": "ronaldsrbg@gmail.com", "date_joined": "2012-04-09 12:03:02"}}, {"pk": 1, "model": "auth.user", "fields": {"username": "sixthgear", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2012-06-05 13:20:25", "groups": [], "user_permissions": [], "password": "sha1$1abec$4072092376d81c6d5e7b80447a997058592cfc9a", "email": "sixthgear@sixthgear.ca", "date_joined": "2010-06-07 20:40:20"}}, {"pk": 104, "model": "auth.user", "fields": {"username": "pruregora", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-23 19:00:07", "groups": [], "user_permissions": [], "password": "sha1$7a88e$1d701c60502efcd3b33d0c1cbca8ba4a06f4631a", "email": "mindrevles@mail.ru", "date_joined": "2012-04-23 18:59:52"}}, {"pk": 105, "model": "auth.user", "fields": {"username": "eTrfwrarmP", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-04-26 21:04:27", "groups": [], "user_permissions": [], "password": "sha1$a63d3$2b7b63d7e530037cdec78ceb44ea15b182723180", "email": "ministrelbahiev@gmx.com", "date_joined": "2012-04-26 21:04:25"}}, {"pk": 106, "model": "auth.user", "fields": {"username": "banqimula", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-05-26 14:43:11", "groups": [], "user_permissions": [], "password": "sha1$ed951$4fecb6f7f6d6517f02c831e577a607733647c768", "email": "banqimula@gmail.com", "date_joined": "2012-05-26 14:43:11"}}, {"pk": 108, "model": "auth.user", "fields": {"username": "huanievua", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-06-10 20:15:32", "groups": [], "user_permissions": [], "password": "sha1$3c7e5$8021c43c01f8520252acd36986c4b7122e7cf115", "email": "aag.xcgv@aol.com", "date_joined": "2012-06-10 20:15:31"}}, {"pk": 109, "model": "auth.user", "fields": {"username": "Clesmegabbape", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-06-13 12:37:17", "groups": [], "user_permissions": [], "password": "sha1$ce692$5e16e99d371756f6c98dd8be657296756057a508", "email": "kajo1983@mail.ru", "date_joined": "2012-06-13 12:37:17"}}, {"pk": 110, "model": "auth.user", "fields": {"username": "duanvbwtr", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2012-06-14 12:08:09", "groups": [], "user_permissions": [], "password": "sha1$54b62$806e0104417af7529d84b29d93b98069d24f1365", "email": "ccvgcr@aol.com", "date_joined": "2012-06-14 12:08:09"}}]